<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100" 
		 height="100%"
		 xmlns:controls="com.flexcapacitor.controls.*"
		 xmlns:inspectors="com.flexcapacitor.inspectors.*"
		 xmlns:ns1="*"
		 xmlns:supportClasses="spark.components.supportClasses.*"
		 >
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace controls "com.flexcapacitor.controls.*";
		@namespace inspectors "com.flexcapacitor.inspectors.*";
		@namespace ns1 "*";
		@namespace supportClasses "spark.components.supportClasses.*";
		
		.formItem {
			backgroundColor:#e6e6e6;
			paddingLeft:10;
			paddingTop:10;
			paddingBottom:6;
			fontSize:15;
			fontWeight:bold;
			textAlpha:.75;
		}
		{
			fontFamily:"Myriad Pro";
			fontSize:14;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.radiate.Radiate;
			
			import mx.collections.ArrayCollection;
			import mx.controls.ToolTip;
			import mx.core.DragSource;
			import mx.core.FlexGlobals;
			import mx.core.FlexSprite;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.effects.Effect;
			import mx.effects.EffectInstance;
			import mx.effects.EffectManager;
			import mx.effects.IEffect;
			import mx.effects.Sequence;
			import mx.effects.effectClasses.PropertyChanges;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.states.Transition;
			import mx.utils.NameUtil;
			import mx.utils.ObjectUtil;
			
			import spark.components.Image;
			import spark.components.Label;
			import spark.core.SpriteVisualElement;
			import spark.effects.SetAction;
			import spark.skins.SparkSkin;
			import spark.skins.spark.ImageSkin;
			
			[Bindable]
			public var panels:ArrayCollection;
			
			[Bindable]
			public var currentTarget:UIComponent;
			
			
			public var sequence:Sequence = new Sequence();
			
			
			protected function dragButton_mouseDownHandler(event:MouseEvent):void {
				var sprite:SpriteVisualElement = new SpriteVisualElement();
				var n:DragSource = new DragSource();
				
				systemManager.getSandboxRoot().addEventListener(DragEvent.DRAG_ENTER, dragEnterHandler);
				
				var displayIcon:Image = new Image();
				displayIcon.source = "icons/sapphires.jpeg";
				displayIcon.width = 50;
				displayIcon.height = 50;
				/* 
				var label:Label = new Label();
				label.graphics.beginFill(0,.2);
				label.graphics.drawRect(0,0,120,22);
				label.graphics.endFill();
				label.text = "";
				label.width = 120;
				label.height = 22;
				
				label.setStyle("backgroundColor", "0x000000");
				label.setStyle("backgroundAlpha", .2);
				label.setStyle("color", "0xFFFFFF");
				label.setStyle("fontWeight", "bold"); */
				
				dragLabel.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				
				//displayIcon.x = List(event.currentTarget).mouseX;
				//displayIcon.y = List(event.currentTarget).mouseY; 
				event.stopImmediatePropagation();
				DragManager.doDrag(dragButton, n, event, dragLabel, 0, 0, 1);
			}
			
			private function dragEnterHandler(event:DragEvent):void
			{
				var pointTarget:Array = systemManager.getObjectsUnderPoint(new Point(event.stageX, event.stageY));
				//trace("dragging over ", pointTarget[pointTarget.length-1]);
				DragManager.acceptDragDrop(FlexGlobals.topLevelApplication as IUIComponent);
			}
			
			protected function dragButton_mouseUpHandler(event:MouseEvent):void
			{
			}
			
			protected function mouseMoveHandler(event:MouseEvent):void
			{
				var currentTarget:FlexSprite = FlexSprite(event.target);
				var pointTarget:Array = systemManager.getObjectsUnderPoint(new Point(event.stageX, event.stageY));
				var target:Object;
				var length:int = pointTarget.length;
				var targetName:String;
				var targetParentName:String;
				
				
				for (var i:int=length-1;i>-1;i--) {
					target = pointTarget[i];
					
					// skip raw children of target 
					if (currentTarget.contains(DisplayObject(target))) {
						//trace(NameUtil.getUnqualifiedClassName(target));
						continue;
					}
					
					//if (lastTarget==currentTarget) return;
					
					//targetName = NameUtil.getUnqualifiedClassName(target);
					//targetParentName = NameUtil.getUnqualifiedClassName(target.parent);
					
					if (target is UIComponent 
						&& !("hostComponent" in target)) {
						event.target.text = NameUtil.getUnqualifiedClassName(target);
						break;
						//return;
					}
					else if (target.parent is UIComponent) {
						event.target.text = NameUtil.getUnqualifiedClassName(target.parent);
						break;
					}
				}
				
				lastTarget = target;
			}
			private var lastTarget:Object;
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:Label id="dragLabel"
				 width="120"
				 fontFamily="Arial"
				 fontSize="14"
				 fontWeight="bold"
				 color="0xFFFFFF"
				 backgroundColor="0"
				 backgroundAlpha=".3"
				 textAlign="center"
				 verticalAlign="middle"
				 height="20"
				 />
	</fx:Declarations>
			 
	<s:Button id="dragButton" 
			  mouseDown="dragButton_mouseDownHandler(event)" 
			  mouseUp="dragButton_mouseUpHandler(event)" 
			  label="Drag"/>
	
</s:Group>
