<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:utils="com.flexcapacitor.utils.*"
					   xmlns:fl="flash.events.*"
					   applicationComplete="applicationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.tools.supportClasses.VisualElementHandle;
			import com.roguedevelopment.DisplayModel;
			import com.roguedevelopment.Flex4ChildManager;
			import com.roguedevelopment.Flex4HandleFactory;
			import com.roguedevelopment.ObjectChangedEvent;
			import com.roguedevelopment.ObjectHandles;
			import com.roguedevelopment.ObjectHandlesSelectionManager;
			import com.roguedevelopment.constraints.MaintainProportionConstraint;
			import com.roguedevelopment.constraints.SizeConstraint;
			import com.roguedevelopment.constraints.SnapToGridConstraint;
			import com.roguedevelopment.decorators.AlignmentDecorator;
			import com.roguedevelopment.decorators.DecoratorManager;
			import com.roguedevelopment.decorators.ObjectLinesDecorator;
			import com.roguedevelopment.decorators.OutlineDecorator;
			import com.roguedevelopment.decorators.WebDecorator;
			
			import mx.events.FlexEvent;
			
			private var objectHandles:ObjectHandles;
			
			protected function applicationCompleteHandler(event:Event):void {
				var manager:Flex4ChildManager;
				var selectionManager:ObjectHandlesSelectionManager;
				var decoratorManager:DecoratorManager;
				var alignmentDecorator:AlignmentDecorator;
				var webDecorator:WebDecorator;
				var outlineDecorator:OutlineDecorator;
				var objectLinesDecorator:ObjectLinesDecorator;
				var sizeConstraint:SizeConstraint;
				var snapToGridConstraint:SnapToGridConstraint;
				var handleFactory:Flex4HandleFactory;
				
				if (objectHandles==null) {
					manager = new Flex4ChildManager();
					handleFactory = new Flex4HandleFactory();
					selectionManager = new ObjectHandlesSelectionManager();
					
					//selectionManager.unselectedModelState();
					
					// CREATE OBJECT HANDLES
					ObjectHandles.defaultHandleClass = VisualElementHandle;
					objectHandles = new ObjectHandles(this, null, null, manager);
					objectHandles.enableMultiSelect = true;
					objectHandles.snapGrid = true;
					objectHandles.snapNumber = 8;
					objectHandles.snapAngle = true;
					objectHandles.moveEnabled = true;
					
					
					decoratorManager = new DecoratorManager(objectHandles, drawLayer);
					
					
					// SHOW LINES FOR ALL OBJECTS
					objectLinesDecorator = new ObjectLinesDecorator();
					objectLinesDecorator.lineColor = 0xFF0000;
					objectLinesDecorator.lineWeight = 1;
					decoratorManager.addDecorator(objectLinesDecorator);
					
					// SHOW ALIGNMENTS
					alignmentDecorator = new AlignmentDecorator();
					alignmentDecorator.lineColor = 0xFF0000;
					alignmentDecorator.lineWeight = 1;
					decoratorManager.addDecorator(alignmentDecorator);
					
					// CONSTRAINTS 
					// SIZE CONSTRAINTS
					sizeConstraint = new SizeConstraint();
					sizeConstraint.minWidth = 1;
					sizeConstraint.minHeight = 1;
					objectHandles.addDefaultConstraint(sizeConstraint);
					
					// SNAP TO GRID
					snapToGridConstraint = new SnapToGridConstraint();
					snapToGridConstraint.gridSpaceX = 8;
					snapToGridConstraint.gridSpaceY = 8;
					objectHandles.addDefaultConstraint(snapToGridConstraint);
					
					//webDecorator = new WebDecorator();
					//decoratorManager.addDecorator(webDecorator);
					
					outlineDecorator = new OutlineDecorator();
					
					decoratorManager.addDecorator(outlineDecorator);
					
					//objectHandles.nudgeFactor = 10;
					objectHandles.addEventListener(ObjectChangedEvent.OBJECT_MOVED, objectMoved);
					objectHandles.addEventListener(ObjectChangedEvent.OBJECT_MOVING, objectMoving);
					objectHandles.addEventListener(ObjectChangedEvent.OBJECT_RESIZING, objectResizing);
					objectHandles.addEventListener(ObjectChangedEvent.OBJECT_RESIZED, objectResized);
				}
				
				var constraintArray:Array = [];
				
				var shapeModel:DisplayModel = new DisplayModel();
				shapeModel.width 	= sparkButton.getLayoutBoundsWidth();
				shapeModel.height 	= sparkButton.getLayoutBoundsHeight();
				shapeModel.x 		= sparkButton.getLayoutBoundsX();
				shapeModel.y 		= sparkButton.getLayoutBoundsY();
				shapeModel.x 		= sparkButton.x;
				shapeModel.y 		= sparkButton.y;
				
				//var shapeModel2:DisplayModel = new DisplayModel();
				var shapeModel2:Object = new Object();
				shapeModel2.width 	= nestedButton.getLayoutBoundsWidth();
				shapeModel2.height 	= nestedButton.getLayoutBoundsHeight();
				shapeModel2.x 		= nestedButton.getLayoutBoundsX();
				shapeModel2.y 		= nestedButton.getLayoutBoundsY();
				
				var haloShapeModel:DisplayModel = new DisplayModel();
				haloShapeModel.width 	= haloButton.getLayoutBoundsWidth();
				haloShapeModel.height 	= haloButton.getLayoutBoundsHeight();
				haloShapeModel.x 		= haloButton.getLayoutBoundsX();
				haloShapeModel.y 		= haloButton.getLayoutBoundsY();
				haloShapeModel.isLocked  = true;
				
				var groupModel:DisplayModel = new DisplayModel();
				groupModel.width 	= sparkGroup.getLayoutBoundsWidth();
				groupModel.height 	= sparkGroup.getLayoutBoundsHeight();
				groupModel.x 		= sparkGroup.getLayoutBoundsX();
				groupModel.y 		= sparkGroup.getLayoutBoundsY();
				
				var aspectRatioConstraint:MaintainProportionConstraint = new MaintainProportionConstraint();
				
				objectHandles.registerComponent(shapeModel, sparkButton, null, true, [aspectRatioConstraint]);
				objectHandles.registerComponent(shapeModel2, nestedButton, null, true, constraintArray);
				objectHandles.registerComponent(haloShapeModel, haloButton, null, true, constraintArray);
				objectHandles.registerComponent(groupModel, sparkGroup, null, true, constraintArray);
				
				var currentlySelected:Array = objectHandles.selectionManager.currentlySelected;
				var modelList:Array = objectHandles.modelList.slice(1);
			}
			
			protected function objectMoved(event:ObjectChangedEvent):void
			{
				trace("moved");
				var model:Object = event.relatedObjects[0];
				var component:Object = objectHandles.getDisplayForModel(model);
				component.x = model.x;
				component.y = model.y;
			}
			
			protected function objectResizing(event:ObjectChangedEvent):void
			{
				trace("sizing");
				var elements:Array = event.relatedObjects;
				for (var i:int = 0; i < elements.length; i++) 
				{
					var model:Object = elements[i];
					var component:Object = objectHandles.getDisplayForModel(model);
					component.x = model.x;
					component.y = model.y;
					component.width = model.width;
					component.height = model.height;
				}
			}
			
			protected function objectResized(event:ObjectChangedEvent):void {
				trace("resized");
				var elements:Array = event.relatedObjects;
				
				for (var i:int = 0; i < elements.length; i++) 
				{
					var model:Object = elements[i];
					var component:Object = objectHandles.getDisplayForModel(model);
					component.x = model.x;
					component.y = model.y;
					component.width = model.width;
					component.height = model.height;
				}
			}
			
			protected function objectMoving(event:ObjectChangedEvent):void
			{
				var elements:Array = event.relatedObjects;
				for (var i:int = 0; i < elements.length; i++) 
				{
					var model:Object = elements[i];
					var component:Object = objectHandles.getDisplayForModel(model);
					component.x = model.x;
					component.y = model.y;
				}
				
			}
			
			protected function oh_clickHandler(event:MouseEvent):void {
				if (objectHandles) {
					objectHandles.selectionManager.clearSelection();
				}
			}
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<utils:MiniInspector/>
	</fx:Declarations>
	
	
	
	<mx:Canvas id="mainCanvas" 
			   top="30" 
			   left="30" 
			   right="30" 
			   bottom="30" 
			   clipContent="false"
			   borderColor="0x00FF00" 
			   borderStyle="solid" 
			   borderAlpha=".5" 
			   >
		<s:Group id="oh" >
			<s:Button id="sparkButton" label="spark button" />
			<s:Group id="sparkGroup" 
					 x="50" 
					 width="100"
					 height="100"
					 mouseEnabledWhereTransparent="true"
					 mouseDown="sparkGroup" ></s:Group>
			<mx:Button id="haloButton" label="halo button" y="100"/>
			<s:Group id="randomGroup" 
					 x="200" 
					 width="100"
					 height="100"
					 mouseEnabledWhereTransparent="true">
				<s:Button id="nestedButton" label="Nested Button" x="10" y="100"/>
			</s:Group>
		</s:Group>
		
		
		<mx:UIComponent id="drawLayer" 
						top="0" 
						left="0" 
						right="0" 
						bottom="0" 
						mouseChildren="false" 
						mouseEnabled="false"
						visible="true" />
	</mx:Canvas>
</s:WindowedApplication>
