<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:utils="com.flexcapacitor.utils.*" 
					   xmlns:model="com.flexcapacitor.model.*" 
					   xmlns:controls="com.flexcapacitor.controls.*"
					   xmlns:components="components.*"
					   xmlns:handlers="com.flexcapacitor.handlers.*" 
					   xmlns:window="com.flexcapacitor.effects.window.*"
					   
					   width="1200"
					   height="800"
					   minWidth="800"
					   minHeight="400"
					   applicationComplete="applicationCompleteHandler(event)"
					   render="windowedapplication1_enterFrameHandler(event)"
					   uncaughtError="windowedapplication1_uncaughtErrorHandler(event)"
					   networkChange="windowedapplication1_networkChangeHandler(event)"
					   invoke="windowedapplication1_invokeHandler(event)"
					   dragOver="mainView_dragOverHandler(event)"
					   dragDrop="mainView_dragDropHandler(event)"
					   dragExit="mainView_dragExitHandler(event)" 
					   >
	
	<fx:Style source="styles.css"/>
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.AceEvent;
			import com.flexcapacitor.events.IssueDataEvent;
			import com.flexcapacitor.managers.CodeManager;
			import com.flexcapacitor.managers.HistoryManager;
			import com.flexcapacitor.model.Document;
			import com.flexcapacitor.model.ErrorData;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.IssueData;
			import com.flexcapacitor.model.MetaData;
			import com.flexcapacitor.model.SourceData;
			import com.flexcapacitor.model.TranscoderDescription;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.DocumentTranscoder;
			import com.flexcapacitor.utils.MXMLDocumentImporter;
			import com.flexcapacitor.utils.XMLUtils;
			import com.flexcapacitor.utils.supportClasses.XMLValidationInfo;
			
			import flash.utils.getTimer;
			
			import mx.controls.HTML;
			
			import flashx.textLayout.conversion.ITextImporter;HTML;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import spark.components.WindowedApplication;
			
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			
			public var warningMessage:String = "Warning: XML is invalid and may not import correctly.";
			
			[Bindable]
			public var aceCSSEditor:*;
			public var templateEditor:*;
			
			[Bindable]
			public var editorMargin:String = "10px 0 8px 0px";
			public var aceEditorCreated:Boolean;
			public var mxmlDocumentImporter:MXMLDocumentImporter;
			
			public var transcoder:TranscoderDescription;
			public var importer:DocumentTranscoder;
			public var sourceData:SourceData;
			public var updateNeeded:Boolean;
			public var renderDeltaChanges:Boolean;
			public var viewRendered:Boolean;
			
			protected function applicationCompleteHandler(event:FlexEvent):void {
				textArea.text = message;
				
				XMLUtils.initialize();
				var hasDefinition:Boolean;
				
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
				var version:String = appXML.versionNumber;
				
				version = appXML.ns::versionNumber;
				CodeManager.setTranscodersVersion(version);
				Radiate.initialize();
				
				Radiate.addComponentDefinition("WindowedApplication", "spark.components.WindowedApplication", WindowedApplication);
				Radiate.addComponentDefinition("VDividedBox", "mx.components.VDividedBox", VDividedBox);
				Radiate.addComponentDefinition("HDividedBox", "mx.components.HDividedBox", HDividedBox);
				
				// only update on save keyboard shortcut or on change
				updateOnSave = false;
				
				updateOnChangeButton.selected = !updateOnSave;
				updateOnSaveButton.selected = updateOnSave;
				
				var transcoderDescription:TranscoderDescription = new TranscoderDescription();
				var item:XML = <transcoder type="mxml" label="MXML" importLabel="MXML Importer" supportsImport="true" supportsExport="false" 
								classPath="com.flexcapacitor.utils.MXMLDocumentImporter" 
								extension="mxml" />;
				
				transcoderDescription.importXML(item);
				
				hasDefinition = ClassUtils.hasDefinition(transcoderDescription.classPath);
				
				if (hasDefinition) {
					CodeManager.registerTranscoder(transcoderDescription);
				}
				
				
				if (iDocument==null) {
					iDocument = new Document();
					iDocument.instance = applicationLoader.targetApplication;
				}
				
				HistoryManager.doNotAddEventsToHistory = true;
				
				createEditors();
				
				setDefaultXML();
				
				
				var textFlowString:String = TextConverter.export(richText59.textFlow, TextConverter.TEXT_LAYOUT_FORMAT, ConversionType.STRING_TYPE) as String;
				// var textFlow:TextFlow = TextConverter.importToFlow(textFlowString, TextConverter.TEXT_LAYOUT_FORMAT);
				var xml:XML = <s:TextFlow xmlns:s="library://ns.adobe.com/flex/spark" >
					<s:p>test
					</s:p>
				</s:TextFlow>;
				var textFlow:TextFlow = TextConverter.importToFlow(xml.toXMLString(), TextConverter.TEXT_LAYOUT_FORMAT);
				richText59.textFlow = textFlow;
			}
			
			private function createEditors():void {
				// 1067: Implicit coercion of a value of type com.flexcapacitor.controls:AceEditor to an unrelated type Object
				
				aceEditorCreated = true;
				
			}
			
			private var lastFocusedEditor:Object;
			
			private function editorFocusInHandler(event:FocusEvent):void {
				lastFocusedEditor = event.currentTarget;
			}
			
			protected function saveHandler(event:Event = null):void {
				invalidateDesignView();
			}
			
			protected function editorChangeHandler(event:AceEvent = null):void {
				var validationInfo:XMLValidationInfo;
				var errorLocation:String;
				var isValid:Boolean;
				var message:String;
				var error:Object;
				var code:String = aceEditor.text;
				var time:int;
				
				//PerformanceMeter.mark("Before xml validation", true);
				isValid = XMLUtils.isValidXML(code);
				//PerformanceMeter.mark("After xml validation");
				//error = XMLUtils.validationError;
				
				if (!isValid && code!="") {
					time = getTimer();
					validationInfo = XMLUtils.validateXML(code, true, true);
					time = getTimer()-time;
					message = XMLUtils.validationError ? "" +  validationInfo.internalErrorMessage : warningMessage;
					if (message==null) message = validationInfo.specificErrorMessage;
					errorLocation = "At line " + (validationInfo.row) + " column " + validationInfo.column+ ":";
					showMessage(errorLocation, message, validationInfo.row-1, validationInfo.column);
					renderTimeLabel.text = "Validation time "+ time + "ms";
				}
				else {
					hideMessage();
					
					if (!updateOnSave) {
						invalidateDesignView();
						if (renderDeltaChanges) {
							checkForDifferences();
						}
					}
				}
				
				var token:Object = aceEditor.getSelectionAnchor();
				
			}
			
			public var useStatusText:Boolean = false;
			public function showMessage(firstMessage:String, secondMessage:String = "", row:int = -1, column:int = 0, updateIssues:Boolean = true):void {
				var errorData:ErrorData;
				
				if (useStatusText) {
					statusText.text = firstMessage + ": " + secondMessage;
				}
				else {
					errorGroup.visible = true;
					errorGroup.includeInLayout = true;
					lineError.text = firstMessage;
					warningLabel.text = secondMessage;
					warningLabel.toolTip = secondMessage;
				}
				 
				aceEditor.clearAnnotations();
				aceEditor.setAnnotation(row, column, secondMessage, "error");
				
				if (updateIssues) {
					errorData = ErrorData.getIssue(firstMessage, secondMessage, row, column);
					issuesInspector.updateIssuesTree([errorData], []);
				}
			}
			
			public function hideMessage():void {
				
				if (useStatusText) {
					statusText.text = "";
				}
				else {
					errorGroup.visible = false;
					errorGroup.includeInLayout = false;
					lineError.text = "";
					warningLabel.text = "";
					warningLabel.toolTip = "";
				}
				
				aceEditor.clearAnnotations();
			}
			
			/**
			 * This method lets us show a status indication while rendering
			 * */
			public function invalidateDesignView():void {
				renderTimeLabel.text = "Rendering...";
				renderTimeLabel.validateNow();
				
				// we check on the next frame if any updates are needed 
				updateNeeded = true;
			}
			
			/**
			 * Updates the view. We could move this to another thread
			 * */
			public function updateView():void {
				if (iDocument.instance==null) return; // not loaded yet
				var error:IssueData;
				
				var code:String = aceEditor.text;
				var time:int;
				
				if (transcoder==null) {
					transcoder = CodeManager.getImporter(CodeManager.MXML);
					importer = transcoder.importer;
					importer.removeAllOnImport = true;
					importer.makeInteractive = true;
				}
				
				time = getTimer();
				
				if (!renderDeltaChanges) {
					sourceData = importer.importare(code, iDocument);
				}
				else {
					parseFile();
					computeChanges();
					applyChanges();
				}
				
				time = getTimer()-time;
				renderTimeLabel.text = time + "ms";
				
				if (issuesInspector) {
					issuesInspector.updateIssuesTree(sourceData.errors, sourceData.warnings);
					if (sourceData.errors && sourceData.errors.length) {
						error = sourceData.errors[0] as IssueData;
						showMessage(error.label, error.description, error.line, error.column, false);
					}
				}
				
				updateNeeded = false;
			}
			
			private function computeChanges():void {
				var newValues:Object;
				var oldValues:Object;
				var newValue:Object;
				var oldValue:Object;
				var removeList:Object;
				var attributeName:String;
				var parts:Array;
				var changeList:Object;
				var supportedAttributes:Object;
				var fullAttributeName:String;
				
				changes = {};
				removals = {};
				
				if (oldDB == null) {
					oldDB = newDB;
					return;
				}
				
				// assume set of components with ids and their ids won't change
				for (var nodeID:String in newDB) {
					newValues = newDB[nodeID];
					oldValues = oldDB[nodeID];
					
					if (oldValues==null) continue;
					
					for (fullAttributeName in newValues) {
						newValue = newValues[fullAttributeName];
						oldValue = oldValues[fullAttributeName];
						
						if (newValue != oldValue) {
							changeList = changes[nodeID];
							
							if (!changeList) {
								changeList = changes[nodeID] = {};
							}
							
							changeList[fullAttributeName] = newValue;
						}
					}
					
					// look for deletions and set value back to default value
					for (fullAttributeName in oldValues) {
						
						if (!newValues.hasOwnProperty(fullAttributeName)) {
							removeList = removals[nodeID];
							
							if (!removeList) {
								removeList = removals[nodeID] = {};
							}
							
							attributeName = fullAttributeName;
							
							if (fullAttributeName.indexOf(".") > -1) {
								parts = fullAttributeName.split(".");
								attributeName = parts[0];
							}
							
							// 
							//removeList[fullAttributeName] = supportedAttributes[attributeName];
						}
					}
					
					//supportedAttributes = ClassUtils.getMemberNames(nodeID);
				}
				
				oldDB = newDB;
			}
			
			private function applyChanges():void {
				var changedValues:Object;
				var removedValues:Object;
				var attributeName:String;
				var nodeID:String;
				
				for (nodeID in changes) {
					changedValues = changes[nodeID];
					trace("Node ID:" + nodeID);
					
					for (attributeName in changedValues) {
						trace(" - Attribute to change: " + attributeName);
						trace(" - New value: " + changedValues[attributeName]);
						//commandconnection.send("_MXMLLiveEditPluginCommands", "setValue", nodeID, attributeName, changedValues[attributeName]);
					}
				}
				
				for (nodeID in removals) {
					removedValues = removals[nodeID];
					trace(nodeID);
					
					for (attributeName in removedValues)
					{
						trace(" - Attribute removed: " + attributeName);
						//commandconnection.send("_MXMLLiveEditPluginCommands", "setValue", p, q, removedValues[q]);
					}
				}
			}
			
			public var iDocument:IDocument;
			public var updateOnSave:Boolean;
			
			protected function showIssuesButton_clickHandler(event:MouseEvent):void
			{
				if (currentState=="sidebar") {
					currentState = "normal";
				}
				else if (currentState=="normal") {
					currentState = "sidebar";
				}
			}
			
			protected function closeButton_clickHandler(event:MouseEvent):void
			{
				exit();
			}
			
			// the application wasn't loading. restarted flash builder and 
			// application.swf started loading again
			protected function applicationLoader_completeHandler(event:Event):void
			{
				iDocument.instance = applicationLoader.targetApplication;
				Radiate.instance.selectedDocument = iDocument;
				//Radiate.setTarget(iDocument.instance);
			}
			
			protected function clearDocumentButton_clickHandler(event:MouseEvent):void
			{
				applicationLoader.createCleanApplication();
				setDefaultXML();
				aceEditor.validateNow();
				invalidateDesignView();
			}
			
			protected function addDemoDataButton_clickHandler(event:MouseEvent):void
			{
				aceEditor.text = embeddedMXML2.value;
				aceEditor.validateNow();
				invalidateDesignView();
			}
			
			protected function updateOnChangeButton_clickHandler(event:MouseEvent):void
			{
				if (updateOnChangeButton.selected) {
					updateOnSave = false;
				}
				else if (updateOnSaveButton.selected) {
					updateOnSave = true;
				}
			}
			
			private function setDefaultXML():void
			{
				var transcoder:DocumentTranscoder = new DocumentTranscoder();
				var defaultCode:XML = transcoder.getDefaultMXMLDocumentXML();
				var comment:XML = <!--\n\n-->;
				var code:String = defaultCode.appendChild(comment).toXMLString();
				var xml:XML = <s:Label xmlns:s="library://ns.adobe.com/flex/spark"><s:color>red</s:color>
						test level</s:Label>;
				/*var elements:XMLList = xml.elements();
				trace(elements.toXMLString());
				var copy:XMLList = elements.copy();
				trace(copy.toXMLString());*/
				code = code.replace("</s:Application>", "\n" + xml.toXMLString() + "\n</s:Application>");
				aceEditor.text = code;
			}
			
			protected function updateDocumentButton_clickHandler(event:MouseEvent):void
			{
				invalidateDesignView();
			}
			
			protected function windowedapplication1_enterFrameHandler(event:Event):void
			{
				if (updateNeeded) {
					callLater(updateView);
				}
			}
			
			protected function addDemoMXMLButton2_clickHandler(event:MouseEvent):void
			{
				aceEditor.text = embeddedSimpleMXML.value;
				aceEditor.validateNow();
				invalidateDesignView();
			}
			
			protected function issuesInspector_changeHandler(event:IssueDataEvent):void
			{
				var errorData:ErrorData = event.issueData as ErrorData;
				
				if (errorData) {
					showMessage(event.label, event.description, errorData.line, errorData.column, false);
				}
				else {
					showMessage(event.label, event.description, -1, -1, false);
				}
			}
			
			protected function windowedapplication1_uncaughtErrorHandler(event:UncaughtErrorEvent):void {
				// you're here probably because an incorrect style was set on Label 
				// for example, you put "b" for fontWeight
				// spark Label throws an error in this case. 
				// it shouldn't. it's the crappy part of TLF.
				// so we catch that and other errors here
				// note: I say shouldn't because other Flex components style values do not throw
				// errors by design.
				
				//ArgumentError: Error #2008: Parameter fontWeight must be one of the accepted values.
				// at flash.text.engine::FontDescription/set fontWeight()
				

				/*
				
				textFlowParser = TextConverter.getImporter(TextConverter.TEXT_LAYOUT_FORMAT, null);
				textFlowParser.throwOnError = false;
				textFlow = textFlowParser.importToFlow(textFlowXML);
				textFlowParser.errors;
				
				var textFlowParser:ITextImporter = TextConverter.getImporter(TextConverter.TEXT_LAYOUT_FORMAT, null);
				textFlowParser.throwOnError = false;
				
				*/
				
				var errorData:ErrorData;
				var message:String;
				
				if (event.error is Error) {
					message = Error(event.error).message;
				}
				else if (event.error is ErrorEvent) {
					message = ErrorEvent(event.error).text;
				}
				else {
					message = event.error.toString();
				}
				
				errorData = ErrorData.getIssue("Uncaught Error", message);
				issuesInspector.updateIssuesTree([errorData]);
			}
			
			protected function windowedapplication1_networkChangeHandler(event:Event):void
			{
				
			}
			
			public var message:String;
			
			protected function windowedapplication1_invokeHandler(event:InvokeEvent):void {
				var invokeArguments:Array = event.arguments;
				var filePath:String;
				var stream:FileStream;
				var file:File;
				var testing:Boolean = false;
				
				
				// application icon had a file dropped on it or an associated file was double clicked
				if (event.reason == InvokeEventReason.STANDARD && invokeArguments.length) {
					
					//showMessage("invoking with arguments" +  ObjectUtil.toString(invokeArguments));
					invokeWithFile(event.currentDirectory, invokeArguments);
				}
				
				// application opened normally 
				if (event.reason == InvokeEventReason.STANDARD && invokeArguments.length == 0) {
					//invokeWithFile(event.currentDirectory, invokeArguments);
					
					return;
				}
				
				// application opened at login
				if (event.reason == InvokeEventReason.LOGIN) {
					return;
				}
				
				// application opened from URL
				if (event.reason == InvokeEventReason.OPEN_URL) {
					return;
				}
				
				// application opened from notification such as iOS APN
				if (event.reason == InvokeEventReason.NOTIFICATION) {
					return;
				}
			}
			
			protected function mainView_dragOverHandler(event:DragEvent):void {
				
				if (event.dragInitiator==null && Radiate.isAcceptableDragAndDropFormat(event.dragSource)) {
					DragManager.acceptDragDrop(IUIComponent(event.currentTarget));
					dropImagesLocation.visible = true;
				}
				
			}
			
			public function mainView_dragDropHandler(event:DragEvent):void {
				var dragSource:DragSource;
				var hasFileListFormat:Boolean;
				var hasFilePromiseListFormat:Boolean;
				var hasURLFormat:Boolean;
				var isSelf:Boolean;
				var AIR_URL:String = "air:url";
				var isHTMLPreviewOpen:Boolean;
				var destination:Object;
				var droppedFiles:Array;
				
				AIR_URL = ClipboardFormats.URL_FORMAT;
				
				dragSource = event.dragSource;
				hasFileListFormat = dragSource.hasFormat(ClipboardFormats.FILE_LIST_FORMAT);
				hasFilePromiseListFormat = dragSource.hasFormat(ClipboardFormats.FILE_PROMISE_LIST_FORMAT);
				hasURLFormat = dragSource.hasFormat(AIR_URL);
				
				
				if (hasFileListFormat) {
					droppedFiles = dragSource.dataForFormat(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				}
				else if (hasFilePromiseListFormat) {
					droppedFiles = dragSource.dataForFormat(ClipboardFormats.FILE_PROMISE_LIST_FORMAT) as Array;
				}
				
				var currentDirectory:File;
				var currentFile:File;
				
				if (droppedFiles.length) {
					currentFile = droppedFiles[0] as File;
					currentDirectory = currentFile.parent;
					
					// reuse invoke with file
					invokeWithFile(currentDirectory, [currentFile.nativePath]);
				}
				dropImagesLocation.visible = false;
			}
			
			protected function mainView_dragExitHandler(event:DragEvent):void
			{
				dropImagesLocation.visible = false;
			}
			
			public var invokedFile:File;
			
			/**
			 * Invoked file.
			 * */
			public function invokeWithFile(currentDirectory:File, invokedArguments:Array = null):void {
				var filePath:String = invokedArguments && invokedArguments.length ? invokedArguments[0] : null;
				var fileData:String;
				var fileStream:FileStream;
				var file:File;
				
				if (filePath) {
					try {
						file = new File(filePath);
					}
					catch (errorEvent:*) {
						trace("Error: " + errorEvent.toString());
						return;
					}
					
					if (file && 
						file.exists && 
						file.isDirectory==false && 
						file.extension && 
						file.extension.toLowerCase()=="mxml") {
						fileStream = new FileStream();
						
						try {
							fileStream.open(file, FileMode.READ);
							
							if (fileStream.bytesAvailable) {
								fileData = fileStream.readUTFBytes(fileStream.bytesAvailable);
								aceEditor.text = fileData;
								aceEditor.validateNow();
								invalidateDesignView();
							}
						}
						catch (error:*) {
							
						}
					}
				}
			}
			
			
			private function checkForDifferences(filePath:String = null):void {
				var mxmlFile:File;
				
				if (filePath!=null && filePath!="") {
					try {
						mxmlFile = new File(filePath);
						
						if (mxmlFile.exists && mxmlFile.modificationDate.time == lastModifiedTime) {
							return;
						}
					} catch (e:Error) {
						// might check while file is open to be written so just ignore
						// and check on the next interval;
						return;
					}
				}
				
				parseFile();
				computeChanges();
				applyChanges();
			}
			
			private function parseFile():void {
				var xml:XML = new XML(aceEditor.text);
				newDB = {};
				generatedIDCounter = 0;
				parseChildren(newDB, xml);
			}
			
			private function parseChildren(newDB:Object, parent:XML):void {
				var effectiveID:String;
				var elementAttributes:XMLList;
				var numberOfAttributes:int;
				var attributeMap:Object;
				var attributeName:String;
				var children:XMLList;
				var childNode:XML;
				var childNodeName:String;
				var numberOfChildren:int;
				var memberName:String;
				var isStateSpecific:Boolean;
				var metaData:MetaData;
				
				children = parent.children();
				numberOfChildren = children.length();
				
				for (var i:int = 0; i < numberOfChildren; i++){
					childNode = children[i];
					childNodeName = childNode.name();
					
					if (childNodeName == null) {
						continue; // saw this for CDATA children
					}
					
					// items to ignore
					if (filteredMXMLNodes[childNodeName]) {
						continue;
					}
					
					// we go deep first because that's how the Falcon compiler
					// generates IDs for tags that don't have id attributes set.
					parseChildren(newDB, childNode);
					
					// check if a class rather than property, style or event
					if (isInstance(childNodeName)) {
						if (childNode.@id.length() == 0) {
							effectiveID = "#" + generatedIDCounter++;
						}
						else {
							effectiveID = childNode.@id;
						}
						
						elementAttributes = childNode.attributes();
						numberOfAttributes = elementAttributes.length();
						
						attributeMap = {};
						newDB[effectiveID] = attributeMap;
						
						for (var j:int = 0; j < numberOfAttributes; j++) {
							attributeName = elementAttributes[j].name();
							isStateSpecific = attributeName.indexOf(".")!=-1;
							memberName = getAttributeName(attributeName);
							//metaData = ClassUtils.getMetaDataOfMember(childNodeName, memberName);
							
							//if (supportedAttributes.hasOwnProperty()) {
							//if (supportedAttributes.hasOwnProperty(getAttributeName(attributeName))) {
								attributeMap[attributeName] = childNode["@" + attributeName].toString();
							//}
						}
					}
				}
			}
			
			// assume it is an instance if the tag name starts with a capital letter
			private function isInstance(tagName:String):Boolean {
				var hasNamespace:int = tagName.indexOf("::");
				var firstCharacter:String;
				var isCapitalLetter:Boolean;
				
				if (hasNamespace > -1) {
					tagName = tagName.substring(hasNamespace + 2);
				}
				
				firstCharacter = tagName.charAt(0);
				isCapitalLetter = firstCharacter >= "A" && firstCharacter <= "Z";
				
				return isCapitalLetter;
			}
			
			/**
			 * If it contains a period we need to set the attribute in that state if the state exists
			 * */
			private function getAttributeName(attributeName:String):String {
				var containsPeriod:int = attributeName.indexOf(".");
				
				if (containsPeriod > -1) {
					attributeName = attributeName.substring(0, containsPeriod);
				}
				
				return attributeName;
			}
			
			
			private var lastModifiedTime:Number = 0;
			private var generatedIDCounter:int = 0;
			private var newDB:Object;
			private var oldDB:Object;
			private var changes:Object;
			private var removals:Object;
			
			private var filteredMXMLNodes:Object = {
				"http://ns.adobe.com/mxml/2009::Script": 1,
				"http://ns.adobe.com/mxml/2009::Declarations": 1,
				"http://ns.adobe.com/mxml/2009::Style": 1
			}
			
			protected function addDemoMXMLButton_clickHandler(event:MouseEvent):void
			{
				aceEditor.text = embeddedRichTextMXML.value;
				aceEditor.validateNow();
				invalidateDesignView();
			}
			/*
			TypeError: Error #1009: Cannot access a property or method of a null object reference.
				at mx.managers.systemClasses::MarshallingSupport/get swfBridgeGroup()
			at mx.managers.systemClasses::MarshallingSupport/hasSWFBridges()
			at mx.managers.systemClasses::MarshallingSupport/addEventListener()
			at mx.managers.systemClasses::MarshallingSupport/addEventListenerHandler()
			at flash.events::EventDispatcher/dispatchEventFunction()
			at flash.events::EventDispatcher/dispatchEvent()
			at mx.managers::SystemManager/addEventListener()[/Users/justinmclean/Documents/ApacheFlex4.15/frameworks/projects/framework/src/mx/managers/SystemManager.as:1550]
				at flash.display::InteractiveObject/set contextMenu()
			
			Needed to add compiler args
			-locale en_US 
			-includes=mx.managers.systemClasses.MarshallingSupport 
			-keep-all-type-selectors=true 
			-keep-as3-metadata+=Alternative
			-keep-as3-metadata+=ArrayElementType
			-keep-as3-metadata+=DefaultProperty
			-keep-as3-metadata+=Deprecated
			-keep-as3-metadata+=Effect
			-keep-as3-metadata+=Event
			-keep-as3-metadata+=HostComponent
			-keep-as3-metadata+=IconFile
			-keep-as3-metadata+=Inspectable
			-keep-as3-metadata+=InstanceType
			-keep-as3-metadata+=RemoteClass
			-keep-as3-metadata+=RichTextContent
			-keep-as3-metadata+=SkinPart
			-keep-as3-metadata+=SkinState
			-keep-as3-metadata+=Style
			-keep-as3-metadata+=SWF
			*/
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<handlers:EventHandler eventName="initialize">
			<window:CenterWindow target="{this}"/>
		</handlers:EventHandler>
		
		<model:EmbeddedFile id="embeddedMXML" file='@Embed("./examples/mxml.txt",mimeType="application/octet-stream")'/>
		<model:EmbeddedFile id="embeddedMXML2" file='@Embed("./examples/mxml2.txt",mimeType="application/octet-stream")'/>
		<model:EmbeddedFile id="embeddedSimpleMXML" file='@Embed("./examples/mxmlSimple.txt",mimeType="application/octet-stream")'/>
		<model:EmbeddedFile id="embeddedRichTextMXML" file='@Embed("./examples/mxmlRichText.txt",mimeType="application/octet-stream")'/>
		
		<utils:MiniInspector/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="sidebar"/>
	</s:states>
	
	<mx:VDividedBox width="100%" height="100%" top="10" right="10" left="10" bottom="10">
		<s:BorderContainer width="100%" height="100%" borderVisible="false">
			<s:backgroundFill> 
				<s:SolidColor color="0xDDDEDE" alpha="1"/> 
			</s:backgroundFill> 
			
			<s:BorderContainer id="canvasBorderInstance" 
							   top="0"
							   left="10" right="10"
							   backgroundAlpha="1"
							   borderVisible="true"
							   borderColor="gray"
							   visible="true"
							   height="100%">
				
				<components:ApplicationLoader id="applicationLoader" width="100%" height="100%"
											  complete="applicationLoader_completeHandler(event)"/>
				
				<!--- 
				This group is used to add visual elements above the application.
				For example, selection and resizing borders. 
				-->
				<s:Group id="toolLayerInstance" 
						 mouseChildren="false" 
						 mouseEnabled="false">
					
				</s:Group>
				
			</s:BorderContainer>
		</s:BorderContainer>
		
		<mx:HDividedBox left="15" 
						top="20" 
						right="20"
						bottom="20"
						height="50%"
						width="100%"
						horizontalScrollPolicy="off">
			
			<s:VGroup height="100%" includeIn="sidebar" itemCreationPolicy="immediate" width="200">
				<s:Label x="15" y="65" text="Issues:" fontWeight="bold"/>
				
				<components:IssuesInspector id="issuesInspector" 
											width="100%" height="100%"
											change="issuesInspector_changeHandler(event)"
											top="0"
											bottom="0">
					
				</components:IssuesInspector>
			</s:VGroup>
			
			<s:VGroup id="editorGroup" 
					  left="15" 
					  top="20" 
					  right="20"
					  bottom="20"
					  width="100%"
					  height="100%">
				
				
				<s:HGroup width="100%" verticalAlign="middle" >
					<s:Label x="15" y="65" text="MXML code:" fontWeight="bold"/>
					
					<s:HGroup id="errorGroup" width="100%" 
							  verticalAlign="middle" 
							  includeInLayout="false" visible="false">
						<s:Label id="lineError" 
								 x="15" y="15" 
								 text="" 
								 fontWeight="bold" 
								 color="red"/>
						
						<s:Label id="warningLabel" 
								 x="15" y="15" 
								 text="" maxDisplayedLines="1"
								 fontWeight="bold" 
								 color="red"
								 width="100%"/>
					</s:HGroup>
					<s:Spacer width="15%"/>
					
				</s:HGroup>
				
				<controls:AceEditor id="aceEditor" 
									 width="100%" 
									 height="100%"
									 mode="ace/mode/xml" 
									 showFoldWidgets="true" 
									 margin="{editorMargin}"
									 focusIn="editorFocusInHandler(event)"
									 change="editorChangeHandler(event)"
									 save="saveHandler(event)"
									 scrollSpeed=".5"
									 useWordWrap="false"
									 />
				
				<s:HGroup id="notesGroup" width="100%" verticalAlign="middle" 
						  includeInLayout="false" visible="false">
					<s:Label id="messageLabel"
							 fontWeight="bold" 
							 color="green"/>
					
				</s:HGroup>
				
				<s:HGroup width="100%" right="10" bottom="10" verticalAlign="baseline">
					<s:Button id="showIssuesButton" label.normal="Show Issues"
							  label.sidebar="Hide Issues"
							  click="showIssuesButton_clickHandler(event)"/>
					<s:Button id="addDemoMXMLButton2" label="Simple"
							  click="addDemoMXMLButton2_clickHandler(event)"/>
					<s:Button id="addDemoMXMLButton" label="Complex"
							  click="addDemoDataButton_clickHandler(event)"/>
					<s:Button id="addRichTextMXMLButton" label="RichText"
							  click="addDemoMXMLButton_clickHandler(event)"/>
					<s:Button id="clearDocumentButton" label="Clear"
							  click="clearDocumentButton_clickHandler(event)"/>
					<s:Button id="updateDocumentButton" label="Update"
							  click="updateDocumentButton_clickHandler(event)"/>
					<s:Label text="Update on:" />
					<s:RadioButton id="updateOnChangeButton" label="change"
								   click="updateOnChangeButton_clickHandler(event)"/>
					<s:RadioButton id="updateOnSaveButton" label="save" 
								   click="updateOnChangeButton_clickHandler(event)"/>
					<s:Label id="renderTimeLabel" color="#898989" />
					<s:Spacer width="100%"/>
					
					<controls:AceSearchTextInput id="findInput" width="125" aceEditor="{aceEditor}"
												 focusThickness="0"/>
					<s:Button id="closeButton" label="Close" click="closeButton_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
		</mx:HDividedBox>
		
		<s:TextArea id="textArea" width="100%" includeInLayout="false" visible="false"/>
	</mx:VDividedBox>
	
	<s:RichText id="richText59">
		<s:textFlow>
			<s:TextFlow>
				<s:p>test
				</s:p>
			</s:TextFlow>
		</s:textFlow>
	</s:RichText>
	
	
	<s:BorderContainer id="dropImagesLocation" 
					   width="100%" height="100%" 
					   backgroundColor="#04527b" 
					   backgroundAlpha=".75" 
					   visible="false" >
		<s:Label text="Drop files here" 
				 verticalCenter="0" 
				 horizontalCenter="0" 
				 fontSize="28" 
				 color="#ffffff"/>
	</s:BorderContainer>
	
	
</s:WindowedApplication>
