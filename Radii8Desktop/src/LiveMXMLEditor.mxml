<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:utils="com.flexcapacitor.utils.*" 
					   xmlns:model="com.flexcapacitor.model.*" 
					   xmlns:controls="com.flexcapacitor.controls.*"
					   xmlns:components="components.*"
					   
					   minWidth="1200"
					   minHeight="700"
					   applicationComplete="applicationCompleteHandler(event)"
					   render="windowedapplication1_enterFrameHandler(event)"
					   uncaughtError="windowedapplication1_uncaughtErrorHandler(event)"
					   >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.IssueDataEvent;
			import com.flexcapacitor.managers.CodeManager;
			import com.flexcapacitor.managers.HistoryManager;
			import com.flexcapacitor.model.Document;
			import com.flexcapacitor.model.ErrorData;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.SourceData;
			import com.flexcapacitor.model.TranscoderDescription;
			import com.flexcapacitor.performance.PerformanceManager;
			import com.flexcapacitor.performance.PerformanceMeter;
			import com.flexcapacitor.utils.AceEditorUtils;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.DocumentTranscoder;
			import com.flexcapacitor.utils.MXMLDocumentImporter;
			import com.flexcapacitor.utils.XMLUtils;
			import com.flexcapacitor.utils.supportClasses.XMLValidationInfo;
			
			import flash.utils.getTimer;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			public var warningMessage:String = "Warning: XML is invalid and may not import correctly.";
			
			[Bindable]
			public var aceEditor:*;
			public var aceCSSEditor:*;
			public var templateEditor:*;
			
			public var editorMargin:String = "4px 0 8px 0px";
			public var aceEditorCreated:Boolean;
			public var mxmlDocumentImporter:MXMLDocumentImporter;
			
			public var transcoder:TranscoderDescription;
			public var importer:DocumentTranscoder;
			public var sourceData:SourceData;
			public var updateNeeded:Boolean;
			
			protected function applicationCompleteHandler(event:FlexEvent):void {
				XMLUtils.initialize();
				var hasDefinition:Boolean;
				
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
				var version:String = appXML.versionNumber;
				version = appXML.ns::versionNumber;
				CodeManager.setTranscodersVersion(version);
				Radiate.initialize();
				
				var transcoderDescription:TranscoderDescription = new TranscoderDescription();
				var item:XML = <transcoder type="mxml" label="MXML" importLabel="MXML Importer" supportsImport="true" supportsExport="false" 
								classPath="com.flexcapacitor.utils.MXMLDocumentImporter" 
								extension="mxml" />;
				
				transcoderDescription.importXML(item);
				
				hasDefinition = ClassUtils.hasDefinition(transcoderDescription.classPath);
				
				if (hasDefinition) {
					CodeManager.registerTranscoder(transcoderDescription);
				}
				
				
				if (iDocument==null) {
					iDocument = new Document();
					iDocument.instance = applicationLoader.targetApplication;
				}
				
				HistoryManager.doNotAddEventsToHistory = true;
				
				createEditors();
				
				updateOnSave = true; // only update on save keyboard shortcut
				
				setDefaultXML();
			}
			
			private function createEditors():void {
				// 1067: Implicit coercion of a value of type com.flexcapacitor.controls:AceEditor to an unrelated type Object
				
				aceEditor = AceEditorUtils.createInstance();
				UIComponent(aceEditor).percentWidth = 100;
				UIComponent(aceEditor).percentHeight = 100;
				aceEditor.top = 0;
				aceEditor.left = 0;
				editorGroup.addElementAt(aceEditor, 1);
				aceEditor.mode = "ace/mode/xml";
				aceEditor.showFoldWidgets = true;
				aceEditor.margin = editorMargin;
				aceEditor.useWordWrap = true;
				aceEditor.addEventListener(FocusEvent.FOCUS_IN, editorFocusInHandler, false, 0, true);
				aceEditor.addEventListener(Event.CHANGE, changeHandler, false, 0, true);
				aceEditor.addEventListener("save", saveHandler, false, 0, true);
				aceEditor.scrollSpeed = .5;
				aceEditorCreated = true;
				
			}
			
			private var lastFocusedEditor:Object;
			
			private function editorFocusInHandler(event:FocusEvent):void {
				lastFocusedEditor = event.currentTarget;
			}
			
			protected function saveHandler(event:Event = null):void {
				prepareUpdateView();
			}
			
			protected function changeHandler(event:Event = null):void {
				var validationInfo:XMLValidationInfo;
				var errorLocation:String;
				var isValid:Boolean;
				var message:String;
				var error:Object;
				var code:String = aceEditor.text;
				var time:int;
				
				PerformanceMeter.mark("Before xml validation");
				isValid = XMLUtils.isValidXML(code);
				PerformanceMeter.mark("After xml validation");
				//error = XMLUtils.validationError;
				
				if (!isValid && code!="") {
					time = getTimer();
					validationInfo = XMLUtils.validateXML(code);
					time = getTimer()-time;
					message = XMLUtils.validationError ? "" +  validationInfo.internalErrorMessage : warningMessage;
					errorLocation = "At line " + (validationInfo.row) + " column " + validationInfo.column+ ":";
					showMessage(errorLocation, message, validationInfo.row-1, validationInfo.column);
				}
				else {
					hideMessage();
					if (!updateOnSave) {
						prepareUpdateView();
					}
				}
				
			}
			
			public function showMessage(firstMessage:String, secondMessage:String = null, row:int = -1, column:int = 0, updateIssues:Boolean = true):void {
				lineError.text = firstMessage;
				warningLabel.text = secondMessage;
				errorGroup.visible = true;
				errorGroup.includeInLayout = true;
				aceEditor.clearAnnotations();
				aceEditor.setAnnotation(row, column, secondMessage, "error");
				var errorData:ErrorData;
				
				if (updateIssues) {
					errorData = ErrorData.getIssue(firstMessage, secondMessage, row, column);
					issuesInspector.updateIssuesTree([errorData], []);
				}
			}
			
			public function hideMessage():void {
				errorGroup.visible = false;
				errorGroup.includeInLayout = false;
				lineError.text = "";
				warningLabel.text = "";
				aceEditor.clearAnnotations();
			}
			
			/**
			 * This method lets us show a status indication while rendering
			 * */
			public function prepareUpdateView():void {
				renderTimeLabel.text = "Rendering...";
				renderTimeLabel.validateNow();
				updateNeeded = true;
			}
			
			/**
			 * Updates the view. We could move this to another thread
			 * */
			public function updateView():void {
				if (iDocument.instance==null) return; // not loaded yet
				
				var code:String = aceEditor.text;
				
				if (transcoder==null) {
					transcoder = CodeManager.getImporter(CodeManager.MXML);
					importer = transcoder.importer;
					importer.removeAllOnImport = true;
					importer.makeInteractive = true;
				}
				
				var time:int = getTimer();
				sourceData = importer.importare(code, iDocument);
				time = getTimer()-time;
				renderTimeLabel.text = time + "ms";
				
				if (issuesInspector) {
					issuesInspector.updateIssuesTree(sourceData.errors, sourceData.warnings);
				}
				
				updateNeeded = false;
			}
			
			public var iDocument:IDocument;
			public var updateOnSave:Boolean;
			
			protected function showIssuesButton_clickHandler(event:MouseEvent):void
			{
				if (currentState=="sidebar") {
					currentState = "normal";
				}
				else if (currentState=="normal") {
					currentState = "sidebar";
				}
			}
			
			protected function closeButton_clickHandler(event:MouseEvent):void
			{
				exit();
			}
			
			// the application wasn't loading. restarted flash builder and 
			// application.swf started loading again
			protected function applicationLoader_completeHandler(event:Event):void
			{
				iDocument.instance = applicationLoader.targetApplication;
				Radiate.instance.selectedDocument = iDocument;
				//Radiate.setTarget(iDocument.instance);
			}
			
			protected function clearDocumentButton_clickHandler(event:MouseEvent):void
			{
				applicationLoader.createCleanApplication();
				setDefaultXML();
				aceEditor.validateNow();
				prepareUpdateView();
			}
			
			protected function addDemoDataButton_clickHandler(event:MouseEvent):void
			{
				aceEditor.text = embeddedMXML2.value;
				aceEditor.validateNow();
				prepareUpdateView();
			}
			
			protected function updateOnChangeButton_clickHandler(event:MouseEvent):void
			{
				if (updateOnChangeButton.selected) {
					updateOnSave = false;
				}
				else if (updateOnSaveButton.selected) {
					updateOnSave = true;
				}
			}
			
			private function setDefaultXML():void
			{
				var transcoder:DocumentTranscoder = new DocumentTranscoder();
				var defaultCode:XML = transcoder.getDefaultDocumentXML();
				var comment:XML = <!--\n\n-->;
				var code:String = defaultCode.appendChild(comment).toXMLString();
				code = code.replace("</s:Application>", "\n\t\n</s:Application>");
				aceEditor.text = code;
			}
			
			protected function updateDocumentButton_clickHandler(event:MouseEvent):void
			{
				prepareUpdateView();
			}
			
			protected function windowedapplication1_enterFrameHandler(event:Event):void
			{
				if (updateNeeded) {
					callLater(updateView);
				}
			}
			
			protected function addDemoMXMLButton2_clickHandler(event:MouseEvent):void
			{
				aceEditor.text = embeddedSimpleMXML.value;
				aceEditor.validateNow();
				prepareUpdateView();
			}
			
			protected function issuesInspector_changeHandler(event:IssueDataEvent):void
			{
				showMessage(event.label, event.description, 0, 0, false);
			}
			
			protected function windowedapplication1_uncaughtErrorHandler(event:UncaughtErrorEvent):void
			{
				// you're here probably because an incorrect style was set on Label 
				// for example, you put "b" for fontWeight
				// spark Label throws an error in this case. 
				// it shouldn't. it's the crappy part of TLF.
				// so we catch that and other errors here
				// note: I say shouldn't because other Flex components style values do not throw
				// errors by design.
				var errorData:ErrorData;
				var message:String;
				
				if (event.error is Error) {
					message = Error(event.error).message;
				}
				else if (event.error is ErrorEvent) {
					message = ErrorEvent(event.error).text;
				}
				else {
					message = event.error.toString();
				}
				
				errorData = ErrorData.getIssue("Uncaught Error", message);
				issuesInspector.updateIssuesTree([errorData]);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<model:EmbeddedFile id="embeddedMXML" file='@Embed("./examples/mxml.txt",mimeType="application/octet-stream")'/>
		<model:EmbeddedFile id="embeddedMXML2" file='@Embed("./examples/mxml2.txt",mimeType="application/octet-stream")'/>
		<model:EmbeddedFile id="embeddedSimpleMXML" file='@Embed("./examples/mxmlSimple.txt",mimeType="application/octet-stream")'/>
		<utils:MiniInspector/>
	</fx:Declarations>
	
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="sidebar"/>
	</s:states>
	
	<mx:VDividedBox width="100%" height="100%" top="10" right="10" left="10" bottom="10">
		<s:BorderContainer width="100%" height="100%" borderVisible="false">
			<s:backgroundFill> 
				<s:SolidColor color="0xDDDEDE" alpha="1"/> 
			</s:backgroundFill> 
			
			<s:BorderContainer id="canvasBorderInstance" 
							   top="0"
							   horizontalCenter="0"
							   backgroundAlpha="1"
							   borderVisible="true"
							   borderColor="gray"
							   visible="true"
							   height="100%">
				
				<components:ApplicationLoader id="applicationLoader" width="100%" height="100%"
											  complete="applicationLoader_completeHandler(event)"/>
				
				<!--- 
				This group is used to add visual elements above the application.
				For example, selection and resizing borders. 
				-->
				<s:Group id="toolLayerInstance" 
						 mouseChildren="false" 
						 mouseEnabled="false">
					
				</s:Group>
				
			</s:BorderContainer>
		</s:BorderContainer>
		
		<mx:HDividedBox left="15" 
						top="20" 
						right="20"
						bottom="20"
						height="50%"
						width="100%"
						horizontalScrollPolicy="off">
			
			<s:VGroup height="100%" includeIn="sidebar" itemCreationPolicy="immediate">
				<s:Label x="15" y="65" text="Issues:" fontWeight="bold"/>
				
				<components:IssuesInspector id="issuesInspector" 
											width="100%" height="100%"
											change="issuesInspector_changeHandler(event)"
											top="0"
											bottom="0">
					
				</components:IssuesInspector>
			</s:VGroup>
			
			<s:VGroup id="editorGroup" 
					  left="15" 
					  top="20" 
					  right="20"
					  bottom="20"
					  width="100%"
					  height="100%">
				
				<s:Label x="15" y="65" text="MXML code:" fontWeight="bold"/>
				
				<s:HGroup id="notesGroup" width="100%" verticalAlign="middle" 
						  includeInLayout="false" visible="false">
					<s:Label id="messageLabel"
							 fontWeight="bold" 
							 color="green"/>
					
				</s:HGroup>
				
				<s:HGroup id="errorGroup" width="100%" verticalAlign="middle" 
						  includeInLayout="false" visible="false">
					<s:Label id="lineError" 
							 x="15" y="15" 
							 text="" 
							 fontWeight="bold" 
							 color="red"/>
					
					<s:Label id="warningLabel" 
							 x="15" y="15" 
							 text="" 
							 fontWeight="bold" 
							 color="red"
							 width="100%"/>
				</s:HGroup>
				
				<s:HGroup width="100%" right="10" bottom="10" verticalAlign="baseline">
					<s:Button id="showIssuesButton" label.normal="Show Issues"
							  label.sidebar="Hide Issues"
							  click="showIssuesButton_clickHandler(event)"/>
					<s:Button id="addDemoMXMLButton2" label="Add Simple MXML"
							  click="addDemoMXMLButton2_clickHandler(event)"/>
					<s:Button id="addDemoMXMLButton" label="Add Complex MXML"
							  click="addDemoDataButton_clickHandler(event)"/>
					<s:Button id="clearDocumentButton" label="Clear Document"
							  click="clearDocumentButton_clickHandler(event)"/>
					<s:Button id="updateDocumentButton" label="Update Document"
							  click="updateDocumentButton_clickHandler(event)"/>
					<s:Label text="Update on:" />
					<s:RadioButton id="updateOnChangeButton" label="change"
								   click="updateOnChangeButton_clickHandler(event)"/>
					<s:RadioButton id="updateOnSaveButton" label="save" selected="true"
								   click="updateOnChangeButton_clickHandler(event)"/>
					<s:Label id="renderTimeLabel" paddingLeft="10"/>
					<s:Spacer width="100%"/>
					
					<controls:AceSearchTextInput id="findInput" aceEditor="{aceEditor}"
												 focusThickness="0"/>
					<s:Button id="closeButton" label="Close" click="closeButton_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
		</mx:HDividedBox>
		
	</mx:VDividedBox>
</s:WindowedApplication>
