<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:views="com.flexcapacitor.views.*"
					   xmlns:controls="com.flexcapacitor.controls.*"
					   xmlns:handlers="com.flexcapacitor.handlers.*" 
					   xmlns:local="com.flexcapacitor.effects.application.*"
					   xmlns:status="com.flexcapacitor.effects.status.*"
					   xmlns:core="com.flexcapacitor.effects.core.*" 
					   xmlns:utils="com.flexcapacitor.utils.*"
					   xmlns:local1="*"
					   
					   width="100%" 
					   height="100%" 
					   minWidth="800" 
					   minHeight="600"
					   frameRate="46"
					   pageTitle="Radiate"
					   
					   networkChange="windowedapplication1_networkChangeHandler(event)"
					   applicationComplete="applicationCompleteHandler(event)" 
					   initialize="initializeHandler(event)" 
					   invoke="windowedapplication1_invokeHandler(event)"
					   >

					   <!---
	
	// took out link reports to save build time
	-link-report linkreport.txt 
	-size-report=sizereport.txt
	
	// get the swf version
	// LoaderConfig.swfVersion
	
	// check if xml attribute is declared 
	//         if (definition.attribute("ref").length() == 1)
	
	WHEN THE USER IS NOT ONLINE THE LAYOUT IS NOT VALIDATED (So components are not sized) 
	POSSIBLY BECAUSE SUSPEND BACKGROUND PROCESSING??
	
	Do something with the following:
	
	UIComponentGlobals.layoutManager.validateNow();
	// Block all layout, responses from web service, and other background
	// processing until the tween finishes executing.
	UIComponent.suspendBackgroundProcessing();
	UIComponentGlobals.callLaterSuspendCount
	
	LayoutManager.doPhasedInstantiationCallback() may have answers

					   splashScreenImage="@Embed('../splashscreen/splashscreen.png')"
					   splashScreenMinimumDisplayTime="15000"
	
	Getting error when tabbing back and forth between app and another program: 
	Has to do with focus manager being null
	TypeError: Error #1009: Cannot access a property or method of a null object reference.
	at mx.containers::TabNavigator/keyDownHandler()[/Users/justinmclean/Documents/ApacheFlexSDK/frameworks/projects/mx/src/mx/containers/TabNavigator.as:903]
	
	
	have error where must use clean to create a new swf
	- noticed i had FCLibrary.swc in Radii8Library and 
	also had FCLibrary added as a library project
	- removed FCLibrary.swc
	- also removed as3 syntaxhighlighter.swc and using ace editor
	
	using hand tool in a release build and the application hung
	got error 2094
	
	Process terminated without establishing connection to debugger.
	
	application descriptor not found
	
	
	Launch command details:  "/Applications/Adobe Flash Builder 4.7/sdks/4.15 AIR 23/bin/adl" 
	-runtime "/Applications/Adobe Flash Builder 4.7/sdks/4.15 AIR 23/runtimes/air/mac" 
	/Users/monkeypunch/Documents/ProjectsGithub/Radii8/Radii8Desktop/bin-debug/ApplicationDesign-app.xml 
	/Users/monkeypunch/Documents/ProjectsGithub/Radii8/Radii8Desktop/bin-debug
	
	
	ReferenceError: Error #1069: Property commandKey not found on flash.events.KeyboardEvent and there is no default value.
	Error #1069: Property commandKey not found on flash.events.KeyboardEvent and there is no default value.
	Occurred in Safari. Not sure of cause
	
	There was an error downloading the update. Error# 16824
	
	// Error occured. how did this happen? is this the AIR update url?
	SecurityDomain 'app:/Radii8Desktop.swf' tried to access incompatible context 'http://adobe.com/apollo'
	-->
	
	<!-- LOOK IN TODO or CHANGES.txt for what to work on -->
	
	
		<!--<fx:Script source="build.as" local:test="test"/>-->

		<fx:Script>
			<![CDATA[
				import com.flexcapacitor.controller.Radiate;
				import com.flexcapacitor.events.RadiateEvent;
				import com.flexcapacitor.managers.HistoryManager;
				import com.flexcapacitor.model.MenuItem;
				import com.flexcapacitor.utils.NativeMenuManager;
				
				import flash.display.NativeMenu;
				import flash.display.NativeMenuItem;
				import flash.display.Screen;
				
				import mx.collections.ArrayCollection;
				import mx.controls.HTML;
				import mx.core.FlexHTMLLoader;FlexHTMLLoader;
				import mx.core.mx_internal;
				import mx.events.AIREvent;
				import mx.events.FlexEvent;
				import mx.events.FlexNativeMenuEvent;
				import mx.utils.Platform;
				
				import spark.components.WindowedApplication;
				
				import air.net.URLMonitor;HTML
				
				use namespace mx_internal;
				//include "build.as";
				
				/**
				 * Reference to radiate
				 * */
				[Bindable]
				public var radiate:Radiate;
				
				public static var NATIVE_MENU_CHANGE:String = "nativeMenuChange";
				public static var MODIFIER_CHANGED:String = "keyEquivalentModifiersFunctionChanged";
				public static var MNEMONIC_INDEX_FUNCTION_CHANGED:String = "mnemonicIndexFunctionChanged";
				
				protected function initializeHandler(event:FlexEvent):void {
					isWin = Platform.isWindows;
					isMac = Platform.isMac;
					isLinux = Platform.isLinux;
					
					width = Capabilities.screenResolutionX * .96;
					height = Capabilities.screenResolutionY * .9;
					
					nativeWindow.x = (Screen.mainScreen.bounds.width - width)/2;
					nativeWindow.y = (Screen.mainScreen.bounds.height - height)/2;
					
					mainViewMenu.addEventListener(NATIVE_MENU_CHANGE, mainViewMenuChanged, false, 0, true);
					mainViewMenu.addEventListener(MODIFIER_CHANGED, keyEquivalentModifiersFunctionChanged, false, 0, true);
					mainViewMenu.addEventListener(MNEMONIC_INDEX_FUNCTION_CHANGED, mnemonicIndexFunctionChanged, false, 0, true);
					
					//Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace;
					
					// .ace_editor {position: relative;overflow: hidden;font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', monospace;font-size: 12px;line-height: normal;color: black;}
					
				}
				
				/**
				 * Setup the environment.  
				 * */
				protected function applicationCompleteHandler(event:FlexEvent):void {
					startupDesktop();
					
					Radiate.startup(this, mainView);
					
					//setupNativeMenus();
					
					// set title bar icon (doesn't seem to work in debug build)
					titleIcon = Radii8LibraryAssets.logo;
					
					
					nativeApplication.addEventListener(Event.NETWORK_CHANGE, dispatchEvent);
					radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, historyChangeEventHandler, false, 0, true);
					
					//var loader:HTMLLoader = new HTMLLoader();
					// Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/533.19.4 (KHTML, like Gecko) AdobeAIR/3.6
					//trace(loader.userAgent);
				}
				
				protected function orderUpdateWindowToFront():void {
					//height = Capabilities.screenResolutionY * .5;
					//nativeWindow.y = 240;
					var windows:Array = nativeApplication.openedWindows;
					var window:NativeWindow;
					
					for (var i:int;i<windows.length;i++) {
						window = windows[i];
						
						// if application then skip
						if (window==nativeWindow) {
							//trace(NativeWindow.supportsNotification);
							window.notifyUser(NotificationType.INFORMATIONAL);
							window.notifyUser(NotificationType.CRITICAL);
							continue;
						}
						
						window.orderToFront();
						Radiate.callAfter(100, window.orderToFront);
						Radiate.callAfter(1000, window.orderToFront);
						Radiate.callAfter(2000, window.orderToFront);
						//break;
					}
					
					//Radiate.info("An update is available: " + "Current version: " + updateApplication.currentVersion + ". Remote version: " + updateApplication.remoteVersion);
				}
				
				private function nativeMenuHandler(menuEvent:Event):void{
					var application:WindowedApplication = this;
					var nativeMenuItem:NativeMenuItem = menuEvent.target as NativeMenuItem;
					var nativeMenu:NativeMenu = menuEvent.currentTarget as NativeMenu;
					var menuItem:MenuItem = nativeMenuManager ? nativeMenuManager.nativeMenuDictionary[nativeMenuItem] : null;
					
					if (!application.nativeWindow.active) {
						application.addEventListener(AIREvent.WINDOW_ACTIVATE, executeAsync);
						application.activate();
						
						function executeAsync(event:Event):void {
							application.removeEventListener(AIREvent.WINDOW_ACTIVATE, executeAsync);
							
							if (menuItem) {
								doCommand(menuEvent, menuItem.label, menuItem);
							}
							else {
								doCommand(menuEvent, nativeMenuItem.label);
							}
						}
					} else {
						if (menuItem) {
							doCommand(menuEvent, menuItem.label, menuItem);
						}
						else {
							doCommand(menuEvent, nativeMenuItem.label);
						}
					}
					
					//Radiate.info(menuEvent.item.label + " from " + menuEvent.currentTarget);
				}
				
				private function nativeMenuCommand(menuEvent:FlexNativeMenuEvent):void{
					var application:WindowedApplication = this;
					
					if (!application.nativeWindow.active) {
						application.addEventListener(AIREvent.WINDOW_ACTIVATE, executeAsync);
						application.activate();
						
						function executeAsync(event:Event):void {
							application.removeEventListener(AIREvent.WINDOW_ACTIVATE, executeAsync);
							doCommand(menuEvent, menuEvent.item.label);
						}
					} else {
						doCommand(menuEvent, menuEvent.item.name);
					}
					
					//Radiate.info(menuEvent.item.label + " from " + menuEvent.currentTarget);
				}
				
				//Execute the selected command
				
				private function doCommand(event:Event, command:String, menuItem:MenuItem = null):void {
					
					switch(command){
						case "cut":
							nativeApplication.cut();
							break;
						case "copy":
							nativeApplication.copy();
							break;
						case "paste":
							nativeApplication.paste();
							break;
						case "selectAll":
							nativeApplication.selectAll();
							break;
						case "clear":
						case "delete":
							nativeApplication.clear();
							break;
						case "toggleMenuBar":
							/*if(menuBarShown){
								menuBar.visible = false;
							} else {
								menuBar.visible = true;
							}
							menuBarShown = !menuBarShown;*/
							break;
						case "toggleIconMenu":
							if(iconMenuShown){
								dockIconMenu = new FlexNativeMenu();
								systemTrayIconMenu = new FlexNativeMenu();
							} else {
								dockIconMenu = mainViewMenu;
								systemTrayIconMenu = mainViewMenu;
							}
							iconMenuShown = !iconMenuShown;
							break;
						
						default:
							
							mainView.menuItemEventHandler(event, menuItem);
							
							dispatchEvent(event);
							
							/*if (event.item is MenuItem) {
								EventDispatcher(event.item).dispatchEvent(event);
							} 
							else if (event.menu && event.menu.dataProvider && 
								event.menu.dataProvider[0] is MenuItem && 
								event.menu.dataProvider[0].parent is MenuItem)
							{
								EventDispatcher(event.menu.dataProvider[0].parent).dispatchEvent(event);
							}*/
							//Radiate.info("Unrecognized command: " + command);
					}
				}
				
				private var iconMenuShown:Boolean;
				
				protected function updateApplication_errorHandler(event:Event):void
				{
					Radiate.warn("Could not connect to the online server. You need an internet connection to save projects.");
				}
				
				protected function windowedapplication1_networkChangeHandler(event:Event):void {
					var time:Date = new Date();
					
					if (monitorConnectionStatus) {
						monitorConnection();
					}
					
					Radiate.warn("The network has changed! You may now be connected or disconnected. " + time.toTimeString());
				}
				
				private var monitor:URLMonitor;
				public var monitorConnectionStatus:Boolean;
				
				/*
				This function checks the online status by attempting
				to resolve a connection to a remote address
				*/
				private function monitorConnection():void {
					var urlPath:String = "http://www.radii8.com";// should use radii8.com
					
					if (monitor==null) {
						monitor = new URLMonitor(new URLRequest(urlPath));
					}
					
					monitor.addEventListener(StatusEvent.STATUS, announceStatus);
					monitor.start();
				}
				
				private function announceStatus(event:StatusEvent):void {
					
					if (monitor.available) {
						radiate.isUserOnline = true;
					}
					else {
						radiate.isUserOnline= false;
					}
				}
				
				
				protected function updateApplication_firstRunHandler(event:Event):void {
					Radiate.firstRun = true;
				}
				
				protected function mainViewMenuChanged(event:Event):void {
					//trace("Native Flex Menu changed");
				}
				
				protected function keyEquivalentModifiersFunctionChanged(event:Event):void {
					//trace("Native Flex Key Modifiers changed");
					
				}
				
				protected function mnemonicIndexFunctionChanged(event:Event):void {
					//trace("Native Flex Mnemonic Index changed");
					
				}
				
				[Bindable]
				public var historyMenuStrongReference:Object = {};
				public var nativeMenuManager:NativeMenuManager;

				private var isWin:Boolean;

				private var isMac:Boolean;

				private var isLinux:Boolean;
				
				/**
				 * We have to convert the menus used in the browser into 
				 * native menu items in the desktop application
				 * 
				 * @param showInlineMenus set this to true to add our menu to the existing AIR application menu
				 * we must also support native menu items for this to work
				 * */
				private function setupNativeMenus(showInlineMenus:Boolean = false):void {
					// setup menus
					var defaultMenu:NativeMenu;
					var defaultMenuItems:Array;
					
					var nativeAboutMenu:NativeMenuItem;
					var nativeEditMenu:NativeMenuItem;
					var nativeFileMenu:NativeMenuItem;
					var nativeWindowMenu:NativeMenuItem;
					var nativeHelpMenu:NativeMenuItem;
					var nativeCommandMenu:NativeMenuItem;
					
					var customEditMenu:MenuItem;
					var customFileMenu:MenuItem;
					var customCommandMenu:MenuItem;
					var customWindowMenu:MenuItem;
					var customHelpMenu:MenuItem;
					
					var customMenu:MenuItem;
					var customMenuItems:Array;
					var customMenuItemsCollection:ArrayCollection;
					var nativeMenuItem:NativeMenuItem;
					
					
					var supportsMenu:Boolean;
					
					// docs incorrectly say there is a nativeApplication.menu.supportsMenu flag 
					// but compiler disagrees
					// actual API is NativeApplication.supportsMenu
					supportsMenu = NativeApplication.supportsMenu;
					
					
					// native menu has About, File, Edit, Window
					defaultMenu = nativeApplication.menu;
					defaultMenuItems = defaultMenu ? defaultMenu.items : [];
					
					// our custom menu items File, Command, Settings
					customMenuItemsCollection 	= mainViewMenu.dataProvider as ArrayCollection;
					customMenu 					= customMenuItemsCollection.getItemAt(0) as MenuItem;
					customMenuItems 			= customMenu.children;
					// get native menu items
					if (defaultMenuItems.length) {
						nativeAboutMenu 	= defaultMenuItems[0];
						nativeFileMenu 		= defaultMenuItems[1];
						nativeEditMenu 		= defaultMenuItems[2];
						nativeWindowMenu 	= defaultMenuItems[3];
					}
					// get custom menu items from main view menu bar
					if (customMenu.children && customMenu.children.length) {
						customFileMenu 			= customMenuItems[0];
						customEditMenu 			= customMenuItems[1];
						customCommandMenu 		= customMenuItems[2];
						customWindowMenu 		= customMenuItems[3];
						customHelpMenu 			= customMenuItems[4];
						
						nativeCommandMenu 		= new NativeMenuItem();
						nativeHelpMenu 			= new NativeMenuItem();
						
						nativeCommandMenu.label = "Commands";
						nativeHelpMenu.label 	= "Help";
					}
					
					
					// add our menu to existing menu or replace menu with our custom menu
					if (!showInlineMenus && supportsMenu) {
						nativeMenuManager = new NativeMenuManager();
						
						// File menu
						for (var i:int=customFileMenu.children.length-1;i>-1; i--) {
							nativeMenuItem = nativeMenuManager.getNativeMenuItem(customFileMenu.children[i]);
							if (nativeMenuItem.label=="Quit") continue;
							nativeFileMenu.submenu.addItemAt(nativeMenuItem, 0);
						}
						
						// Edit menu
						
						// separator
						nativeMenuItem = nativeMenuManager.getNativeMenuItem(customEditMenu.children[2]);
						nativeEditMenu.submenu.addItemAt(nativeMenuItem, 0);
						
						// update: made some mistakes with undo and redo so we could probably reuse nativeMenuItem
						nativeMenuItem = nativeMenuManager.getNativeMenuItem(customEditMenu.children[1]);
						nativeEditMenu.submenu.addItemAt(nativeMenuItem, 0);
						historyMenuStrongReference.redoMenu = nativeMenuItem;
						
						nativeMenuItem = nativeMenuManager.getNativeMenuItem(customEditMenu.children[0]);
						nativeEditMenu.submenu.addItemAt(nativeMenuItem, 0);
						historyMenuStrongReference.undoMenu = nativeMenuItem;
						
						
						// Commands menu
						for (i=0;i<customCommandMenu.children.length; i++) {
							nativeMenuItem = nativeMenuManager.getNativeMenuItem(customCommandMenu.children[i]);
							
							if (nativeCommandMenu.menu==null) {
								defaultMenu.addItem(nativeCommandMenu);
							}
							if (nativeCommandMenu.submenu==null) {
								nativeCommandMenu.submenu = new NativeMenu();
							}
							
							nativeCommandMenu.submenu.addItem(nativeMenuItem);
						}
						
						// Help menu
						for (i=0;i<customHelpMenu.children.length; i++) {
							nativeMenuItem = nativeMenuManager.getNativeMenuItem(customHelpMenu.children[i]);
							
							if (nativeHelpMenu.submenu==null) {
								defaultMenu.addItem(nativeHelpMenu);
							}
							if (nativeHelpMenu.submenu==null) {
								nativeHelpMenu.submenu = new NativeMenu();
							}
							
							nativeHelpMenu.submenu.addItem(nativeMenuItem);
							//aboutMenu.menu.addItem(nativeMenuItem, nativeMenuItem.label);
							//nativeMenuItem.menu = windowMenu;
						}
						
						// reassign the default menu 
						// this causes it to rebuild the menu with our new additions
						nativeApplication.menu = defaultMenu;
						defaultMenu.addEventListener(Event.SELECT, nativeMenuHandler, false, 0, true);
						
						radiate.applicationMenu = defaultMenu;
						radiate.applicationWindowMenu = nativeWindowMenu;
						
						mainView.showMenuBar(false);
					}
					else {
						
						// add the native menu items About and Edit to our custom menu items
						// has many issues - don't use
						if (false && nativeAboutMenu) {
							var aboutMenuSubmenu:Object = nativeAboutMenu.submenu;
							var menuItem:MenuItem = MenuItem.createInstance(nativeAboutMenu);
							
							customMenu.addItemAt(menuItem, 0);
							
							
							//aboutMenu.submenu = (aboutMenuSubmenu as NativeMenu);
							//mainViewMenuItemsCollection.refresh();
							mainViewMenu.dataProvider = null;
							mainViewMenu.dataProvider = customMenuItemsCollection;
							//mainViewMenuItemsCollection.addItemAt(aboutMenu.submenu.items[0], 0);
							//mainViewMenuItemsCollection.addItemAt(editMenu, 1);
						}
						
						
						// clear out default menu items
						if (supportsMenu) {
							for (var j:int = defaultMenuItems.length; j > 0; j--) 
							{
								defaultMenuItems.pop();
							}
							
							//defaultMenu.items = defaultMenuItems;
							nativeApplication.menu = defaultMenu;
						}
						
						// assign our custom menu to the application menu
						//menu = mainViewMenu;

						radiate.applicationMenu = mainViewMenu;
						radiate.applicationWindowMenu = customWindowMenu;
						
					}
				}
				
				/**
				 * Example modifier function
				 * http://help.adobe.com/en_US/flex/using/WSacd9bdd0c5c09f4a-690d4877120e8b878b0-7fea.html#WSacd9bdd0c5c09f4a-690d4877120e8b878b0-7fde
				 * */
				private function keyEquivalentModifiersFunction(item:Object):Array {
					var result:Array = new Array();
					var menu:Object;
					var label:String = "label" in item ? item.label : "name" in item ? item.name : ""; 
					
					//var keyEquivField:String = menu.keyEquivalentField;
					var keyEquivField:String = mainViewMenu.keyEquivalentField;
					var altKeyField:String;
					var controlKeyField:String;
					var shiftKeyField:String;
					
					if (item is XML) { 
						altKeyField = "@altKey";
						controlKeyField = "@controlKey";
						shiftKeyField = "@shiftKey";
					}
					else if (item is Object) { 
						altKeyField = "altKey";
						controlKeyField = "controlKey";
						shiftKeyField = "shiftKey";
					}
					
					if (item[keyEquivField] == null || item[keyEquivField].length == 0) { 
						return result;
					}
					
					if (item[altKeyField] != null && item[altKeyField] == true) 
					{
						if (isWin)
						{
							result.push(Keyboard.ALTERNATE); 
						}
					}
					
					if (item[controlKeyField] != null && item[controlKeyField] == true) 
					{
						if (isWin)
						{
							result.push(Keyboard.CONTROL);
						}
						else if (isMac) 
						{
							result.push(Keyboard.COMMAND);
						}
					}
					
					if (item[shiftKeyField] != null && item[shiftKeyField] == true) 
					{
						result.push(Keyboard.SHIFT);
					}
					
					return result;
				}
				
				protected function historyChangeEventHandler(event:RadiateEvent):void {
					if (historyMenuStrongReference.redoMenu) {
						if (historyMenuStrongReference.redoMenu.enabled != HistoryManager.canRedo) {
							historyMenuStrongReference.redoMenu.enabled = HistoryManager.canRedo;
						}
						if (historyMenuStrongReference.undoMenu.enabled != HistoryManager.canUndo) {
							historyMenuStrongReference.undoMenu.enabled = HistoryManager.canUndo;
						}
					}
				}
				
				/**
				 * This event occurs when a file is dragged and dropped onto the application
				 * */
				protected function windowedapplication1_invokeHandler(event:InvokeEvent):void {
					var invokeArguments:Array = event.arguments;
					var filePath:String;
					var stream:FileStream;
					var file:File;
					var testing:Boolean = false;

					// to test invokation - 
					// open run/debug launcher and set the compiler arguments to the absolute path 
					// of a file or multiple files. add quotes if the path contains spaces
					
					// application opened normally
					if (event.reason == InvokeEventReason.STANDARD && invokeArguments.length == 0) {
						
						invokeWithFile(event.currentDirectory, invokeArguments);
						
						return;
					}
					
					// application had a file dropped on it or an associated file was double clicked
					if (event.reason == InvokeEventReason.STANDARD && invokeArguments.length) {
						
						invokeWithFile(event.currentDirectory, invokeArguments);
					}
					
					// application opened at login
					if (event.reason == InvokeEventReason.LOGIN) {
						return;
					}
					
					// application opened from URL
					if (event.reason == InvokeEventReason.OPEN_URL) {
						return;
					}
					
					// application opened from notification such as iOS APN
					if (event.reason == InvokeEventReason.NOTIFICATION) {
						return;
					}
				}
				
				/**
				 * Invoked file. Move to radiate class
				 * */
				public function invokeWithFile(currentDirectory:File, invokedArguments:Array):void {
					var filePath:String = invokedArguments && invokedArguments.length ? invokedArguments[0] : null;
					var file:File;
					
					if (filePath) {
						file = new File(filePath);
						
						if (file.exists && file.isDirectory==false) {
							radiate.createNewDocumentAndSwitchToDesignView(file, radiate.selectedProject);
						}
						else {
							Radiate.error("The file you are attempting to open does not exist or is a directory");
						}
					}
				}
				
				private function startupDesktop():void {
					var applicationDescriptor:XML;
					var appNamespace:Namespace;
					var version:String;
					var showInlineMenus:Boolean;
					
					showInlineMenus = false;
					
					radiate = Radiate.getInstance();
					isMac = Platform.isMac;
					
					applicationDescriptor 	= NativeApplication.nativeApplication.applicationDescriptor;
					appNamespace 			= applicationDescriptor.namespace();
					version 				= applicationDescriptor.versionNumber;
					version 				= applicationDescriptor.appNamespace::versionNumber;
					
					radiate.versionNumber 	= version;
					radiate.updater			= updateApplication;
					
					setupNativeMenus();
				}
				
			]]>
		</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<!-- Was getting multiple errors with JPEGENCODER classes
		they require 11.5 or greater. Nothing was working. 
		Finally, I think I found the cause. The playerglobal.swc may be incorrect or not existant. 
		/11.5/playerglobal.swc may be 11.2 playerglobal.swc or IDE was looking for 11.2 and not finding it. 
		
		ALSO put imports and instances in main classes
		
		POSSIBLE CAUSE: 
		Stand alone player in preferences in FB is set to older debug player
		/Applications/Adobe Flash Builder 4.7/player/mac/11.4/Flash Player Debugger.app
		
		Not sure
		Also, I made FCLibrary as external libraries to get rid of defaults.css warning.
		
		What seemed to work is adding -swf-version=16 to the compiler arguments in the main project
		
		On the desktop version using a newer AIR version than AIR 3.6 seemed to work in the library projects
		On the web version using a newer -swf-version=16 or -swf-version=19 and making sure the player global was updated
		in the sdk directory
		
		
		ANOTHER ERROR: 
		Process terminated without establishing connection to debugger.
		
		invalid application descriptor: Unknown namespace: http://ns.adobe.com/air/application/21.0
		
		Launch command details:  "/Applications/Adobe Flash Builder 4.7/sdks/4.9.1 AIR 19/bin/adl" -runtime 
		"/Applications/Adobe Flash Builder 4.7/sdks/4.9.1 AIR 19/runtimes/air/mac" 
		/Users/me/Documents/ProjectsGithub/Radii8/Radii8Desktop/bin-debug/Radii8Desktop-app.xml /Users/me/Documents/ProjectsGithub/Radii8/Radii8Desktop/bin-debug 
		- /Users/me/Desktop/mxml_complex.mxml 
		
		Problem and Solution: 
		Had an argument in the launch configuration
		-->
		
		<handlers:EventHandler eventName="initialize" enabled="true">
			
			<local:UpdateApplication id="updateApplication"
									 traceEvents="false" 
									 useUI="true"
									 isCheckForUpdateVisible="false"
									 updateURL="http://www.radii8.com/updates/UpdateDescriptor.xml" 
									 error="updateApplication_errorHandler(event)"
									 firstRun="updateApplication_firstRunHandler(event)"
									 >

				<local:updateAvailableEffect>
					<s:Parallel>
						<core:CallMethod method="orderUpdateWindowToFront"/>
					</s:Parallel>
				</local:updateAvailableEffect>
			</local:UpdateApplication>
		</handlers:EventHandler>
		
		<mx:FlexNativeMenu 
			id="mainViewMenu"
			dataProvider="{mainView.rootMenu}" 
			labelField="label" 
			showRoot="false"
			itemClick="nativeMenuCommand(event)"
			keyEquivalentModifiersFunction="keyEquivalentModifiersFunction"
			/>
		
		<!--<s:Resize id="resizeEffect" target="{this}" widthBy="100" heightBy="100"
				  />-->
				  
		
		<!--<mx:FlexNativeMenu 
				id="nativeMenu"
				dataProvider="{mainView.rootMenu}" 
				labelField="@label" 
				keyEquivalentField="@key"
				keyEquivalentModifiersFunction="standardOSModifier" 
				showRoot="false"
				itemClick="nativeMenuCommand(event)"/>-->
		<utils:MiniInspector enabled="false"/>
		
	</fx:Declarations>
	
	<fx:Style source="fonts.css" />
	<fx:Style source="styles.css" />
	
	<views:MainView id="mainView" 
					top="0" right="0" bottom="0" left="0"/>
	
</s:WindowedApplication>