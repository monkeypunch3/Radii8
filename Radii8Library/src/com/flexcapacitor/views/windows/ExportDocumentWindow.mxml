<?xml version="1.0" encoding="utf-8"?>
<windows:AnimatedPanelWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:handlers="com.flexcapacitor.handlers.*" 
			   xmlns:fc="com.flexcapacitor.effects.popup.*"
			   xmlns:fce="com.flexcapacitor.effects.file.*"
			   xmlns:fcb="com.flexcapacitor.effects.core.*"
			   xmlns:flexcapacitor="flexcapacitor.*"
			   xmlns:windows="com.flexcapacitor.views.windows.*" 
			   xmlns:controls="com.flexcapacitor.controls.*" 

			   title="Export release..."
			   remove="clearFilesList()"
			   creationComplete="creationCompleteHandler(event)" 
			   >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.CodeManager;
			import com.flexcapacitor.managers.FileManager;
			import com.flexcapacitor.managers.ImageManager;
			import com.flexcapacitor.model.ExportOptions;
			import com.flexcapacitor.model.FileInfo;
			import com.flexcapacitor.model.HTMLExportOptions;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.SourceData;
			import com.flexcapacitor.model.TranscoderDescription;
			import com.flexcapacitor.utils.ArrayUtils;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.utils.Platform;
			
			import spark.events.IndexChangeEvent;
			
			
			
			
			private var htmlOptions:HTMLExportOptions;
			 
			private var options:ExportOptions;
			
			public var sourceData:SourceData;
			
			[Bindable]
			public var isHTML:Boolean;
			
			public var iDocument:IDocument;
			public var browserFiles:Array = [];
			public var browserFileIndex:int;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				var exporters:Array = CodeManager.getAllExporters();
				radiate = Radiate.instance;
				iDocument = Radiate.selectedDocument;
				languageTypes.source = exporters;
				languageTypeButtons.dataProvider = languageTypes;
				isHTML = TranscoderDescription(exporters[0]).type==CodeManager.HTML.toLowerCase();
				
				if (radiate.exportFileLocation) {
					updateDirectoryLabel();
				}
				
				// disable in browser
				if (ExternalInterface.available) {
					browseForOutputDirectoryButton.enabled = false;
					browseForOutputDirectoryButton.label = "Disabled in browser edition";
				}
				
				saveNextButton.visible = false;
				saveNextButton.includeInLayout = false;
				navigateButton.visible = false;
				navigateButton.includeInLayout = false;
				openDirectoryButton.visible = false;
				openDirectoryButton.includeInLayout = false;
				
				if (iDocument && iDocument.instance) {
					thumbnailImage.source = ImageManager.getSnapshot(iDocument.instance);
				}
			}
			
			protected function eventhandler1_effectEndHandler(event:EffectEvent):void {
				clearFilesList();
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void {
				var transcoderDescription:TranscoderDescription;
				var language:String;
				var extension:String;
				var overwriteFiles:Boolean;
				var outputFolder:FileReference;
				var templateName:String;
				var filesCreated:Boolean;
				var template:String;
				var exportProject:Boolean;
				var sources:Array;
				var files:Array;
				var messages:String = "";
				var templateFileName:String;
				
				transcoderDescription = getSelectedTranscoder();
				language = transcoderDescription.label;
				extension = (language==CodeManager.HTML) ? "html" : (language==CodeManager.MXML) ? "mxml" : "xml";
				overwriteFiles = true; //overwriteFilesCheckbox.selected;
				outputFolder = browseForFolder.file as FileReference;
				templateName = templatesDropDownList.selectedItem;
				
				if (iDocument==null) {
					Radiate.error("No document open. Open a document before attempting to export.");
					return;
				}
				
				filesCreatedLabel.text = "";
				
				extension = extensionsCombox.selectedItem;
				
				// templates
				template = getSelectedTemplate(language);
				
				exportProject = allDocumentsButton.selected ? true : false;
				
				// options
				if (language == CodeManager.HTML) {
					htmlOptions = CodeManager.getExportOptions(language) as HTMLExportOptions;
					htmlOptions.useInlineStyles = setStylesInline.selected;
					htmlOptions.useExternalStylesheet = useExternalStylesheetCheckbox.selected;
					htmlOptions.embedImages = embedLocalImagesCheckbox.selected;
					htmlOptions.createFiles = true;
					htmlOptions.showBorders = false;
					htmlOptions.disableTabs = false;

					if (extension=="auto") {
						if (templateName=="external") {
							templateFileName = templateFile.currentFileReference.name;
							extension = templateFileName.substr(String(templateFileName).lastIndexOf(".")+1);
							if (extension=="") {
								extension = "html";
							}
						}
						else {
							extension = "html";
						}
					}
					
					htmlOptions.fileExtension = extension;
					htmlOptions.template = template;
					options = htmlOptions;
				}
				else if (language == CodeManager.MXML) {
					options = CodeManager.getExportOptions(language);
					options.useInlineStyles = setStylesInline.selected;
					
					if (extension=="auto") {
						extension = transcoderDescription.extension;
					}
					
					options.embedImages = embedLocalImagesCheckbox.selected;
					options.template = template;
					options.fileExtension = extension;
					options.createFiles = true;//options.embedImages = embed;
				}
				else if (language == CodeManager.ANDROID) {
					options = CodeManager.getExportOptions(language);
					
					if (extension=="auto") {
						extension = transcoderDescription.extension;
					}
					
					options.embedImages = embedLocalImagesCheckbox.selected;
					options.useInlineStyles = setStylesInline.selected;
					options.template = template;
					options.fileExtension = extension;
					options.createFiles = true;
				}
				
				
				if (exportProject) {
					sources = CodeManager.getProjectData(iDocument.project, language, options);
					
					for (var i:int = 0; i < sources.length; i++) {
						sourceData = sources[i];
						files = ArrayUtils.add(files, sourceData.files);
					}
					
					sourceData = new SourceData();
					sourceData.files = files;
				}
				else {
					sourceData = CodeManager.getSourceData(iDocument.instance, iDocument, language, options); 
				}
				
				if (sourceData.files && sourceData.files.length<=1) {
					
					if (outputFolder) {
						filesCreated = FileManager.saveFiles(sourceData, outputFolder, overwriteFiles);
					}
					else {
						radiate.addEventListener(RadiateEvent.DOCUMENT_SAVE_COMPLETE, completeHandler, false, 0, true);
						radiate.addEventListener(RadiateEvent.DOCUMENT_SAVE_AS_CANCEL, cancelHandler, false, 0, true);
						FileManager.saveFileAs(sourceData.source, Radiate.selectedDocument.name, extension);
					}
				}
				else {
					
					// more than one file
					if (Platform.isAir && outputFolder==null) {
						//warningLabel.text = warningLabel.toolTip = "Please select an output folder";
						//return;
					}
					
					if (outputFolder) {
						filesCreated = FileManager.saveFiles(sourceData, outputFolder, overwriteFiles);
						completeHandler();
					}
					else if (sourceData.files) {
						browserFiles = sourceData.files;
						browserFileIndex = 0;
						
						//thumbnailImage.visible = false;
						fileList.visible = true;
						fileList.dataProvider = new ArrayCollection(browserFiles);
						
						//radiate.addEventListener(RadiateEvent.DOCUMENT_SAVE_COMPLETE, completeHandler, false, 0, true);
						//radiate.addEventListener(RadiateEvent.DOCUMENT_SAVE_AS_CANCEL, cancelHandler, false, 0, true);
						//FileManager.saveFileAs(sourceData.files[browserFileIndex], Radiate.selectedDocument.name);
						//browserFileIndex = browserFileIndex + 1;
						completeHandler();
					}
					else {
						outputDirectoryLabel.setStyle("color", "red");
					}
				}
				
				if (sourceData.errors && sourceData.errors.length) {
					messages = "Warning - There are " + sourceData.errors.length +  " errors. ";
				}
				
				if (sourceData.warnings && sourceData.warnings.length) {
					messages += "There are " + sourceData.warnings.length +  " warnings. ";
				}
				
				if (messages) {
					warningLabel.text = warningLabel.toolTip = messages + "Check the issues panel for more information.";
					warningLabelContent.text = sourceData.warnings.join("\n") + "\n" + sourceData.errors.join("\n");
				}
				else {
					warningLabel.text = "";
					warningLabelContent.text = "";
				}
				
				if (filesCreated) {
					afterFilesSaved();
					filesCreatedLabel.text = sourceData.files.length + " files created! You can close the export window.";
				}
				
				cancelButton.label = "Close";
			}
			
			protected function afterFilesSaved():void {
				
				if (Radiate.isDesktop) {
					navigateButton.visible = true;
					navigateButton.includeInLayout = true;
					openDirectoryButton.visible = true;
					openDirectoryButton.includeInLayout= true;
				}
				
				clearFilesLabelEffect.end();
				clearFilesLabelEffect.play([filesCreatedLabel]);
				cancelButton.label = "Close";
			}
			
			protected function completeHandler(event:Event = null):void {
				var transcoderDescription:TranscoderDescription = getSelectedTranscoder();
				var language:String = transcoderDescription.label;
				
				
				if (browserFileIndex!=-1 && browserFileIndex<browserFiles.length) {
					// can't save two files in a row in FP bc need to be invoked by mouse click
					// Error: Error #2176: Certain actions, such as those that display a pop-up window, may only be invoked upon user interaction, for example by a mouse click or button press.
					// 	at flash.net::FileReference/_save()
					saveNextButton.visible = true;
					saveNextButton.includeInLayout = true;
					filesCreatedLabel.text = browserFiles.length + " files created. You need to click Save Next to each file.";
					
					saveNextButton.label = "Save Next (" + (browserFiles.length - browserFileIndex) + ")";
					
					radiate.addEventListener(RadiateEvent.DOCUMENT_SAVE_COMPLETE, completeHandler, false, 0, true);
					radiate.addEventListener(RadiateEvent.DOCUMENT_SAVE_AS_CANCEL, cancelHandler, false, 0, true);
					return;
				}
				
				if (browseForFolder.file) {
					afterFilesSaved();
				}
				
				saveNextButton.visible = false;
				saveNextButton.includeInLayout = false;
				filesCreatedLabel.text = sourceData.files.length + " files created. You can close the export window.";
				
				radiate.removeEventListener(RadiateEvent.DOCUMENT_SAVE_COMPLETE, completeHandler);
				radiate.removeEventListener(RadiateEvent.DOCUMENT_SAVE_AS_CANCEL, cancelHandler);
			}
			
			protected function cancelHandler(event:Event):void {
				//Radiate.info("Canceled Save");
				clearFilesList();
				radiate.removeEventListener(RadiateEvent.DOCUMENT_SAVE_COMPLETE, completeHandler);
				radiate.removeEventListener(RadiateEvent.DOCUMENT_SAVE_AS_CANCEL, cancelHandler);
			}
			
			/**
			 * Updates the code to reflect the selected language 
			 * */
			protected function languageType_changeHandler(event:IndexChangeEvent):void {
				var selectedLanguage:TranscoderDescription = getSelectedTranscoder();
				
				isHTML = selectedLanguage.type==CodeManager.HTML.toLowerCase();
				
				useExternalStylesheetCheckbox.visible = isHTML;
				setStylesInline.visible = isHTML;
				filesCreatedLabel.text = "";
				navigateButton.visible = false;
				navigateButton.includeInLayout = false;
				openDirectoryButton.visible = false;
				openDirectoryButton.includeInLayout = false;
			}
			
			private function getSelectedTranscoder():TranscoderDescription
			{
				//return languageTypes.getItemAt(languageTypeButtons.selectedIndex) as String;
				var item:TranscoderDescription = languageTypeButtons.selectedItem;
				return item;
			}
			
			private function updateDirectoryLabel():void {
				
				if (browseForFolder.file) {
					radiate.exportFileLocation = browseForFolder.file as File;
				}
				
				if (radiate.exportFileLocation) {
					outputDirectoryLabel.text = outputDirectoryLabel.toolTip = File(radiate.exportFileLocation).nativePath;
					outputDirectoryLabel.clearStyle("color");
				}
			}
			
			private function updateTemplateLabel():void {
				templateFileLabel.text = templateFileLabel.toolTip = browseForTemplate.fileNativePath;
				templateFileLabel.clearStyle("color");
			}
			
			private var request:URLRequest;
			
			protected function navigateButton_clickHandler(event:MouseEvent):void {
				var files:Array = sourceData.files;
				request = new URLRequest();
				
				for (var i:int;i<files.length;i++) {
					var fileInfo:FileInfo = files[i] as FileInfo;
					
					if (fileInfo.fileExtension=="html" && fileInfo.created) {
						request.url = fileInfo.url;
						navigateToURL(request, "previewInBrowser");
						break;
					}
				}
				
				
				//navigateButton.visible = false;
			}
			
			protected function openDirectoryButton_clickHandler(event:MouseEvent):void {
				var outputFolder:FileReference = browseForFolder.file as FileReference;
				
				try {
					Object(outputFolder).openWithDefaultApplication();
				}
				catch (error:Error) {
					filesCreatedLabel.text = "Can't open the directory";
				}
			}
			
			private function clearFilesList():void {
				var files:Array;
				var fileInfo:FileInfo;
				
				files = sourceData && sourceData.files ? sourceData.files : [];
				
				for (var i:int;i<files.length;i++) {
					fileInfo = files[i] as FileInfo;
					fileInfo.filePath = "";
				}
				
				browserFileIndex = -1;
			}
			
			private function getSelectedTemplate(language:String = ""):String {
				var templateName:String = templatesDropDownList.selectedItem;
				var output:String;
				
				if (templateName=="auto" || templateName=="custom") {
					if (iDocument.template==null && templateName!="custom" && language==CodeManager.HTML) {
						output = new Radii8LibraryTranscodersAssets.basicHTMLDocument();
					}
					else if (language==CodeManager.MXML) {
						output = "";
					}
					else {
						output = iDocument.template;
					}
				}
				else if (templateName=="external") {
					
					if (browseForTemplate.file==null) {
						templateFileLabel.text = "Please select a template";
						templateFileLabel.setStyle("color", "red");
					}
					else {
						templateFileLabel.text = browseForTemplate.fileNativePath;
						templateFileLabel.clearStyle("color");
						output = templateFile.dataAsString;
					}
				}
				else if (templateName=="html") {
					
					output = new Radii8LibraryTranscodersAssets.basicHTMLDocument();
				}
				else if (templateName=="html2") {
					
					output = new Radii8LibraryTranscodersAssets.basicHTMLDocumentReusable();
				}
				else if (templateName=="none") {
					output = "";
				}
				
				return output;
			}
			
			protected function templatesDropDownList_changeHandler(event:IndexChangeEvent):void
			{
				if (templatesDropDownList.selectedItem!="external") {
					templateFileLabel.text = "";
				}
				else {
					templateFileLabel.text = templateFileLabel.toolTip = browseForTemplate.fileNativePath;
				}
			}
			
			protected function closeButton_clickHandler(event:MouseEvent):void {
				//Radiate.info("Canceled Save");
				clearFilesList();
				radiate.removeEventListener(RadiateEvent.DOCUMENT_SAVE_COMPLETE, completeHandler);
				radiate.removeEventListener(RadiateEvent.DOCUMENT_SAVE_AS_CANCEL, cancelHandler);
				close();
			}
			
			protected function saveNextButton_clickHandler(event:MouseEvent):void {
				
				if (browserFileIndex!=-1 && browserFileIndex<browserFiles.length) {
					// can't save two files in a row in FP bc need to be invoked by mouse click
					// Error: Error #2176: Certain actions, such as those that display a pop-up window, may only be invoked upon user interaction, for example by a mouse click or button press.
					// 	at flash.net::FileReference/_save()
					FileManager.saveFileAs(sourceData.files[browserFileIndex], Radiate.selectedDocument.name);
					browserFileIndex = browserFileIndex + 1;
					return;
				}
				else {
					saveNextButton.visible = false;
					saveNextButton.includeInLayout = false;
					afterFilesSaved();
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!--- hide about popup -->
		<handlers:EventHandler targets="{cancelButton}" eventName="click" >
			<s:SetAction property="action" target="{this}" value="cancel"/>
			<fc:ClosePopUp id="closePopUp" popUp="{this}" effectEnd="eventhandler1_effectEndHandler(event)"/>
		</handlers:EventHandler>
		
		<!--- browse for directory -->
		<handlers:EventHandler targets="{browseForOutputDirectoryButton}" eventName="click" >
			<fce:BrowseForFile id="browseForFolder" browseForFolder="true" targetAncestor="{this}">
				<fce:selectionEffect>
					<s:Sequence>
						<fcb:CallMethod method="updateDirectoryLabel"/>
					</s:Sequence>
				</fce:selectionEffect>
			</fce:BrowseForFile>
		</handlers:EventHandler>
		
		<!--- browse for template -->
		<handlers:EventHandler targets="{templateSelectFileButton}" eventName="click" >
			<fce:BrowseForFile id="browseForTemplate" browseForFolder="false" targetAncestor="{this}">
				<fce:selectionEffect>
					<s:Sequence>
						<fce:LoadFile id="templateFile" fileReference="{browseForTemplate.fileReference}" />
						<fcb:CallMethod method="updateTemplateLabel"/>
					</s:Sequence>
				</fce:selectionEffect>
			</fce:BrowseForFile>
		</handlers:EventHandler>
		
		<fcb:SetAction id="clearFilesLabelEffect" startDelay="5000" property="text" value=""/>
		
		<!--- hide about popup -->
		<!--<handlers:EventHandler targets="{saveButton}" eventName="click" >
			<s:SetAction property="action" target="{this}" value="save"/>
		</handlers:EventHandler>-->
		
		<fx:String id="action"></fx:String>
		
		<s:ArrayList id="languageTypes">
			<fx:String>auto</fx:String>
		</s:ArrayList>
		
		<s:ArrayList id="extensionsList">
			<fx:String>auto</fx:String>
			<fx:String>html</fx:String>
			<fx:String>mxml</fx:String>
			<fx:String>xml</fx:String>
			<fx:String>php</fx:String>
		</s:ArrayList>
		
		<s:ArrayList id="templatesList">
			<fx:String>auto</fx:String>
			<fx:String>html</fx:String>
			<fx:String>html2</fx:String>
			<fx:String>external</fx:String>
			<fx:String>custom</fx:String>
			<fx:String>none</fx:String>
		</s:ArrayList>
		
		
	</fx:Declarations>
	
	
	<s:VGroup left="15" gap="10"
				 top="20" 
				 right="20"
				 bottom="20">
		
		
		<s:HGroup width="100%" verticalAlign="middle">
			
			<s:Label id="formatLabel" 
					 text="Format:" 
					 fontWeight="bold" 
					 color="black"
					 minWidth="120"/>
			
			<s:ButtonBar id="languageTypeButtons" 
						 requireSelection="true"
						 selectedIndex="0"
						 click="languageType_changeHandler(null)">
				<s:ArrayList >
					<fx:String>auto</fx:String>
				</s:ArrayList>
			</s:ButtonBar>
		</s:HGroup>
		
		<!--<controls:HorizontalLine width="100%" alpha="1" shadowAngle="90"/>-->
		
		<s:HGroup width="100%" verticalAlign="baseline" visible="false" includeInLayout="false">
			
			<s:Label text="Template:" 
					 color="black"
					 fontWeight="bold"
					 minWidth="120"/>
			
			<s:DropDownList id="templatesDropDownList" 
							minWidth="170"
							requireSelection="true"
							selectedIndex="0"
							toolTip="Template to use to if one is not set"
							dataProvider="{templatesList}"
							change="templatesDropDownList_changeHandler(event)"/>
			
			<s:Button id="templateSelectFileButton" 
					  label="Select Template" 
					  visible="{templatesDropDownList.selectedItem=='external'}"
					  includeInLayout="{templatesDropDownList.selectedItem=='external'}"
					  />
			
			<s:Label id="templateFileLabel" 
					 width="100%"
					 maxDisplayedLines="1"
					 text="" 
					 />
		</s:HGroup>
		
		<!--<controls:HorizontalLine width="100%" alpha="1" shadowAngle="90"/>-->
		
		<s:HGroup width="100%" verticalAlign="middle">
			
			<s:Label id="extensionLabel" 
					 text="Extension:" 
					 fontWeight="bold" 
					 minWidth="120"/>
			
			<s:ComboBox id="extensionsCombox" 
							width="120"
							selectedIndex="0"
							toolTip="Set the extension of the exported file. If not set then the extension will be automatically determined."
							dataProvider="{extensionsList}"/>
			
		</s:HGroup>
		
		<s:HGroup width="100%" verticalAlign="middle">
			
			<s:Label id="optionsLabel" 
					 text="Options:" 
					 fontWeight="bold" 
					 minWidth="120"/>
			
			<s:CheckBox id="embedLocalImagesCheckbox" 
						selected="true"
						toolTip="Embed images that are not uploaded"
						label="Embed Local Images"/>
			
			<s:CheckBox id="setStylesInline" 
						selected="false"
						toolTip="Element styles are declared inline in a style attribute instead of inside a style declaration"
						label="Styles inline"/>
			
			<s:CheckBox id="useExternalStylesheetCheckbox" 
						selected="true"
						toolTip="Instead of styles being declared in the head of the template document they are declared in a separate CSS file."
						label="External Stylesheet"/>
			
		</s:HGroup>
		
		<!--<controls:HorizontalLine width="100%" alpha="1" shadowAngle="90"/>-->
		
		<s:HGroup width="100%" verticalAlign="middle">
			
			<s:Label text="Output Directory:" 
					 color="black"
					 fontWeight="bold"
					 minWidth="120"/>
			
			<s:Button id="browseForOutputDirectoryButton" 
					 label="Browse" 
					 minWidth="120"/>
			
			<s:Label id="outputDirectoryLabel" 
					 text="Select a directory" 
					 color="black"
					 width="100%"
					 maxDisplayedLines="1"/>
		</s:HGroup>
		
		<!--<controls:HorizontalLine width="100%" alpha="1" shadowAngle="90"/>-->
		
		<s:HGroup width="100%" verticalAlign="baseline">
			
			<s:Label text="Export:" 
					 color="black"
					 fontWeight="bold"
					 minWidth="120"/>
			
			<s:RadioButton id="selectedDocumentButton" 
					 label="Selected Document" 
					 color="black"
					 selected="true"
					 groupName="amountOfDocuments"/>
			
			<s:RadioButton id="allDocumentsButton" 
					 label="All documents in project (experimental)" 
					 minWidth="120"
					 groupName="amountOfDocuments"
					 visible="false"/>
			
		</s:HGroup>
		
		<!--controls:HorizontalLine width="100%" alpha="1" angle="90"/>
		
		<s:HGroup width="100%" >
			
			<s:CheckBox id="overwriteFilesCheckbox" 
						selected="true"
						label="Overwrite existing files"/>
			
			
		</s:HGroup>-->
		
		<!--<controls:HorizontalLine width="100%" alpha="1" shadowAngle="90"/>-->
		
		<s:Label id="warningLabel" 
				 text="" 
				 width="100%"/>
		
		<controls:RichDisplayText id="warningLabelContent" 
				 text="" 
				 lineHeight="150%"
				 width="100%"/>
		
		<s:Label id="spacerLabel" 
				 text=" " />
		
		
		<s:HGroup width="100%" verticalAlign="baseline">
			<s:Button id="navigateButton" label="Navigate" visible="false"
					  click="navigateButton_clickHandler(event)"/>
			<s:Button id="openDirectoryButton" label="Open Directory" visible="false"
					  click="openDirectoryButton_clickHandler(event)"/>
			<s:Label id="filesCreatedLabel" 
					 text="" />
			<s:Spacer width="100%"/>
			<s:Button id="saveNextButton" label="Save Next" toolTip="Save next file in list" click="saveNextButton_clickHandler(event)"/>
			<s:Button id="cancelButton" label="Cancel" />
			<s:Button id="saveButton" label="Export" click="saveButton_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
	
	<s:Image id="thumbnailImage" right="20" top="20"
			 width="200" height="140"
			 smooth="true" smoothingQuality="high">
		
	</s:Image>
	
	<s:List id="fileList" right="20" top="20"
			width="200" height="140"
			borderColor="#D8D8D8"
			labelField="fileName"
			itemRenderer="com.flexcapacitor.views.renderers.ExportDocumentRenderer"
			visible="false">
		
	</s:List>
		
	
</windows:AnimatedPanelWindow>
