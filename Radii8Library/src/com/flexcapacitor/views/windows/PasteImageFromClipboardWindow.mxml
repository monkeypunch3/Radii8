<?xml version="1.0" encoding="utf-8"?>
<windows:AnimatedPanelWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:flexcapacitor="flexcapacitor.*"
		 xmlns:fc="com.flexcapacitor.effects.popup.*"
		 xmlns:windows="com.flexcapacitor.views.windows.*"
		 xmlns:flexiframe="com.google.code.flexiframe.*"
		 xmlns:utils="com.flexcapacitor.utils.*"
		 
		 title="Paste image from clipboard"
		 width="600"
		 height="450"
		 removedFromStage="animatedpanelwindow1_removedHandler(event)"
		 creationComplete="panel1_creationCompleteHandler(event)" 
		 openAnimationEnd="animatedpanelwindow1_openAnimationEndHandler(event)"
		 >
	
		<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace c "com.flexcapacitor.controls.*";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace handlers "com.flexcapacitor.handlers.*";
		@namespace fc "com.flexcapacitor.effects.popup.*";
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Console;
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.HTMLClipboardEvent;
			import com.flexcapacitor.managers.DeferManager;
			import com.flexcapacitor.managers.LibraryManager;
			import com.flexcapacitor.model.HTMLClipboardData;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			
			import mx.events.FlexEvent;
			import mx.utils.NameUtil;
			
			public static var debug:Boolean;
			public var htmlData:HTMLClipboardData;
			public var bitmapData:BitmapData;
			public var extension:String;
			
			public var updateElementDelay:int = 500;
			public var closeDelay:int = 250;
			
			public var byteArray:ByteArray;
			
			public var closedProperly:Boolean;
			public var numberOfPasteEvents:int;
			
			protected function panel1_creationCompleteHandler(event:FlexEvent):void
			{
				elementIdentity = NameUtil.createUniqueName(this);
				
				// when not running on a server you may get the following error
				// SecurityError (DOM Exception 18): The operation is insecure.
				if (debug) {
					HTMLClipboardManager.debug = true;
				}
			}
			
			protected function animatedpanelwindow1_openAnimationEndHandler(event:Event):void {
				radiate = Radiate.instance;
				
				if (Radiate.selectedDocument) {
					createPasteZone();
					// occasionally element is created with odd position values
					// check for page zoom level and wait until animation is complete
					DeferManager.callAfter(updateElementDelay, updatePosition);
				}
				
			}
			
			override public function close():void {
				
				if (ExternalInterface.available) {
					htmlClipboardManager.removeElement(elementIdentity);
					htmlClipboardManager.disableElement(elementIdentity);
				}
				
				if (debug) {
					HTMLClipboardManager.debug = false;
					Console.log("Closing paste image window");
				}
				
				closedProperly = true;
				
				super.close();
			}
			
			protected function insertButton_clickHandler():void {
				//createImage(source, image);
				
				if (htmlData && bitmapData) {
					radiate = Radiate.instance;
					LibraryManager.dropInBitmapData(bitmapData, false, true);
					DeferManager.callAfter(closeDelay, close);
				}
			}
			
			protected var elementIdentity:String;
			
			public function createPasteZone():void {
				var rectangle:Rectangle;
				
				if (elementIdentity==null) {
					elementIdentity = NameUtil.createUniqueName(this);
				}
				
				if (debug) {
					ExternalInterface.marshallExceptions = false;
					ExternalInterface.marshallExceptions = true;
					Console.log("Creating paste zone");
				}
				
				// create content editable area to paste images into
				if (ExternalInterface.available) {
					rectangle = DisplayObjectUtils.getBounds(dropZoneArea, dropZoneArea.parent);
					
					if (debug) {
						Console.log("Element position:" + rectangle.toString());
					}
					htmlClipboardManager.addElement(elementIdentity, rectangle);
					// listen for paste event on content editable area
					htmlClipboardManager.enableElement(elementIdentity);
				}
				
			}
			
			/**
			 * Updates position of content area
			 **/
			public function updatePosition():void {
				var rectangle:Rectangle;
				
				// create content editable area to paste images into
				if (ExternalInterface.available) {
					rectangle = DisplayObjectUtils.getBounds(dropZoneArea, dropZoneArea.parent);
					
					htmlClipboardManager.updateElement(elementIdentity, rectangle);
				}
				
			}
			
			protected function htmlClipboardManager_beforePasteHandler(event:HTMLClipboardEvent):void {
				var clipboardData:HTMLClipboardData = event.data;
				var types:Array = clipboardData.types;
				
				numberOfPasteEvents = 0;
				
				if (debug) {
					trace("Before Paste Event");
					trace(event.data.originalData);
					trace(event.data);
					trace("number of clipboard items: " + clipboardData.numberOfItems);// clipboard items
					trace("number of html elements: " + clipboardData.numberOfNodes);// html elements
					trace("number of files: " + clipboardData.numberOfFiles);// clipboard items
					trace("has image/tiff: " + types.indexOf("image/tiff"));// in safari
					trace("has image/png: " + types.indexOf("image/png"));// in safari
					trace("has file type: " + types.indexOf("files")); // files in Firefox
				}
			}
			
			protected function htmlClipboardManager_pasteHandler(event:HTMLClipboardEvent):void {
				var data:HTMLClipboardData = event.data;
				var error:Object;
				
				numberOfPasteEvents++;
				
				if (debug) {
					trace("Paste Event");
					trace("Invalid:" + data.invalid);
					trace("Mime type:" + data.mimeType);
					trace("Origin:" + data.origin);
					trace("Index in loop:" + data.index);
					trace("Number of paste events:" + numberOfPasteEvents);
				}
				
				htmlData = data;
				infoLabel.toolTip = "";
				
				if (data.invalid || data.mimeType==HTMLClipboardManager.INVALID || data.error) {
					if (data.error) {
						error = data.error;
						infoLabel.text = "Invalid data";
						infoLabel.text += "name" in error ? ". " + error.name : "";
						infoLabel.text += "code" in error ? " " + error.code : "";
						infoLabel.text += "message" in error ? ". " + error.message : "";
						infoLabel.toolTip = infoLabel.text;
					}
					else {
						infoLabel.text = "Invalid data";
					}
				}
				else {
					infoLabel.text = "Pasted type:" + data.mimeType;
					
					if (data.mimeType!=HTMLClipboardManager.INVALID && data.hasMimeType("image")) {
						if (data.mimeType==HTMLClipboardManager.IMAGE_PNG) {
							bitmapData = DisplayObjectUtils.getBitmapDataFromBase64(data.dataURI, null, true, DisplayObjectUtils.PNG);
							thumbnail.toolTip = "Thumbnail of PNG image.";
							extension = "." + DisplayObjectUtils.PNG;
						}
						if (data.mimeType==HTMLClipboardManager.IMAGE_JPEG) {
							bitmapData = DisplayObjectUtils.getBitmapDataFromBase64(data.dataURI, null, true, DisplayObjectUtils.JPEG);
							thumbnail.toolTip = "Thumbnail of JPEG image.";
							extension = "." + DisplayObjectUtils.JPEG;
						}
						
						thumbnail.source = bitmapData;
						
						insertButton.enabled = true;
						saveButton.enabled = true;
					}
				}
			}
			
			private function saveButton_clickHandler():void {
				var file:FileReference = new FileReference();
				
				if (htmlData && htmlData.hasMimeType("image") && !htmlData.invalid && htmlData.error==null) {
					byteArray = htmlData.getByteArray();
					file.save(byteArray, extension);
				}
			}
			
			protected function animatedpanelwindow1_removedHandler(event:Event):void {
				if (!closedProperly && event.type==Event.REMOVED_FROM_STAGE && event.target==this) {
					close();
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<fx:String id="action"></fx:String>
		
		<fc:ClosePopUp id="closePopUp" popUp="{this}" />
		
		<utils:HTMLClipboardManager id="htmlClipboardManager" 
									beforePaste="htmlClipboardManager_beforePasteHandler(event)"
									paste="htmlClipboardManager_pasteHandler(event)"/>
	</fx:Declarations>
	
	
	<fx:Declarations>

	</fx:Declarations>
	
	
	<s:VGroup left="20" 
			  top="20" 
			  right="20"
			  bottom="20"
			  gap="10"
			  >
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  >
			
			<s:Label text="Click on the box below and then paste image (Right click > Paste or CTRL + V)"/>
			
			<s:Spacer width="100%"/>
			
		</s:HGroup>
		
		<s:HGroup width="100%" height="100%"
				  verticalAlign="middle"
				  >
			
			<s:BorderContainer id="dropZoneArea" width="100%" height="100%"
							   borderWeight="0"
							   >
				<s:backgroundFill>
					<s:SolidColor color="#f7f7f7"/>
				</s:backgroundFill>
				<s:borderStroke>
					<s:SolidColorStroke alpha="0" color="#0088FF" joints="miter"/>
				</s:borderStroke>
			</s:BorderContainer>
			
		</s:HGroup>
		
		<s:HGroup width="100%" verticalAlign="baseline">
			<s:Button id="saveButton" label="Save" click="saveButton_clickHandler()" enabled="false"/>
			<s:Label id="infoLabel" text="" />
			<s:Spacer width="100%"/>
			
			<s:Image id="thumbnail" height="30" width="100%" baseline="-12" smooth="true"/>
			<s:Button id="cancelButton" label="Cancel" click="close()" />
			<s:Button id="insertButton" label="Insert" click="insertButton_clickHandler()" enabled="false"/>
		</s:HGroup>
		
	</s:VGroup>
	
	
</windows:AnimatedPanelWindow>