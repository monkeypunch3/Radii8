<?xml version="1.0" encoding="utf-8"?>
<w:AnimatedPanelWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:c="com.flexcapacitor.views.*"
			   xmlns:handlers="com.flexcapacitor.handlers.*"
			   xmlns:fc="com.flexcapacitor.effects.popup.*"
			   xmlns:w="com.flexcapacitor.views.windows.*"

			   title="Import MXML"
			   title.revisions="Select Revision"
			   creationComplete="animatedpanelwindow1_creationCompleteHandler(event)"
			   >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.model.DocumentRevision;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.utils.AceEditorUtils;
			import com.flexcapacitor.utils.XMLUtils;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			public static const NEW_DOCUMENT:String = "newDocument";
			public static const CURRENT_DOCUMENT:String = "currentDocument";
			public static const CURRENT_SELECTION:String = "currentSelection";
			public static const IMPORT:String = "import";
			
			private var _code:String;

			public function get code():String {
				var text:String;
				
				if (aceEditor) {
					text = aceEditor.text;
				}
				else {
					return _code;
				}
				return text;
			}

			public function set code(value:String):void {
				_code = value;
				if (aceEditor) {
					aceEditor.text = value;
				}
			}

			public var warningMessage:String = "Warning: XML is invalid and may not import correctly.";
			
			
			public var aceEditor:*;
			public var aceCSSEditor:*;
			public var templateEditor:*;
			
			public var editorMargin:String = "4px 0 8px 0px";
			public var aceEditorCreated:Boolean;
			
			public var showRevisions:Boolean = false;
			
			private function createEditors():void {
				// 1067: Implicit coercion of a value of type com.flexcapacitor.controls:AceEditor to an unrelated type Object
				
				aceEditor = AceEditorUtils.createInstance();
				UIComponent(aceEditor).percentWidth = 100;
				UIComponent(aceEditor).percentHeight = 100;
				aceEditor.top = 0;
				aceEditor.left = 0;
				editorGroup.addElementAt(aceEditor, 1);
				aceEditor.mode = "ace/mode/xml";
				aceEditor.showFoldWidgets = true;
				aceEditor.margin = editorMargin;
				aceEditor.useWordWrap = true;
				aceEditor.addEventListener(FocusEvent.FOCUS_IN, editorFocusInHandler, false, 0, true);
				aceEditor.addEventListener(Event.CHANGE, changeHandler, false, 0, true);
				aceEditorCreated = true;
				aceEditor.scrollSpeed = .5;
				
			}
			
			private var lastFocusedEditor:Object;
			
			private function editorFocusInHandler(event:FocusEvent):void
			{
				lastFocusedEditor = event.currentTarget;
				//searchInput.aceEditor = lastFocusedEditor;
				
				//if (wordwrapButton) {
					//wordwrapButton.selected = !lastFocusedEditor.useWordWrap;
				//}
			}
			
			protected function changeHandler(event:Event = null):void {
				
				/*
				if (!syntaxHighlighter) {
					syntaxHighlighter = new SyntaxHighlighter(mxTextArea);
					syntaxHighlighter.timerInterval = 20;
					syntaxHighlighter.cssString = SyntaxHighlighter.CRIMSON_EDITOR_CSS;
				}
				
				syntaxHighlighter.highlightCode();
				*/
				
				var isValid:Boolean = XMLUtils.isValidXML(code);
				
				if (!isValid && code!="") {
					var message:String = XMLUtils.validationError ? "Warning:" +  XMLUtils.validationError.message : warningMessage;
					warningLabel_Ha.text = message;
					warningLabel_Ha.visible = true;
					warningLabel_Ha.includeInLayout = true;
				}
				else {
					warningLabel_Ha.visible = false;
					warningLabel_Ha.includeInLayout = false;
				}
				
			}
			
			
			/**
			 * Import 
			 * */
			protected function importPopUp_closeHandler(event:Event):void {
				var radiate:Radiate = Radiate.getInstance();
				var selectedDocument:IDocument = radiate.selectedDocument;
				var type:String = importLocation.selectedValue as String;
				
				if (action==ImportWindow.IMPORT) {
					if (type==ImportWindow.NEW_DOCUMENT) {
						radiate.importMXMLDocument(radiate.selectedProject, null, null, code);
					}
					else if (type==ImportWindow.CURRENT_DOCUMENT && selectedDocument) {
						radiate.importMXMLDocument(radiate.selectedProject, selectedDocument, null, code);
					}
					else if (type==ImportWindow.CURRENT_SELECTION && radiate.target is IVisualElement) {
						if (radiate.target is IVisualElement) {
							radiate.importMXMLDocument(radiate.selectedProject, selectedDocument, IVisualElement(radiate.target), code);
						}
						Alert.show("Please select a visual element");
					}
					else {
						Alert.show("Please select a document");
					}
				}
				
				closePopUp.startDelay = 500;
				closePopUp.play();
			}
			
			protected function animatedpanelwindow1_hideHandler(event:Event):void {
				radiate = null;
				code = null;
				if (revisionsCollection) revisionsCollection.removeAll();
				documentRevisions = null;
			}
			
			protected function animatedpanelwindow1_creationCompleteHandler(event:FlexEvent):void {
				radiate = Radiate.instance;
				var selectedDocument:IDocument = radiate.selectedDocument;
				
				Radiate.callAfter(200, afterCompleteTasks);
				
				if (showRevisions) {
					currentState = REVISIONS;
					validateNow();
					documentRevisions = selectedDocument.revisions.slice();
					revisionsCollection = new ArrayCollection(documentRevisions);
					revisionsList.dataProvider = revisionsCollection;
				}
				else {
					currentState = NORMAL;
				}
				
			}
			
			public var documentRevisions:Array;
			public var revisionsCollection:ArrayCollection;
			
			public function afterCompleteTasks():void {
				createEditors();
				
				if (_code && aceEditor) {
					if (aceEditor.text!=_code) {
						aceEditor.text = _code;
						changeHandler();
					}
				}
			}
			
			protected function revisions_clickHandler(event:MouseEvent):void
			{
				var selectedItem:DocumentRevision = revisionsList.selectedItem as DocumentRevision;
				
				if (selectedItem) {
					code = selectedItem.code;
				}
			}
			
			protected function showRevisionsButton_clickHandler(event:MouseEvent):void {
				var selectedDocument:IDocument = radiate.selectedDocument;
				
				if (currentState == REVISIONS) {
					currentState = NORMAL;
				}
				else {
					currentState = REVISIONS;
					validateNow();
					
					if (selectedDocument) {
						documentRevisions = selectedDocument.revisions.slice();
						revisionsCollection = new ArrayCollection(documentRevisions);
						revisionsList.dataProvider = revisionsCollection;
					}
				}
			}
			public static const NORMAL:String = "normal";
			public static const REVISIONS:String = "revisions";
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!--- hide about popup -->
		<handlers:EventHandler targets="{cancelButton}" eventName="click" setTriggerEvent="true">
			<s:SetAction property="action" target="{this}" value="cancel"/>
			<fc:ClosePopUp popUp="{this}"  />
		</handlers:EventHandler>
		
		<!--- hide about popup -->
		<handlers:EventHandler targets="{importButton}" eventName="click" setTriggerEvent="true">
			<s:SetAction property="action" target="{this}" value="import"/>
			<fc:ClosePopUp id="closePopUp" popUp="{this}"  />
		</handlers:EventHandler>
		
		<fx:String id="action"></fx:String>
		
		<s:RadioButtonGroup id="importLocation"  />
	</fx:Declarations>
	
	<w:states>
		<s:State name="normal"/>
		<s:State name="revisions"/>
	</w:states>
	
	<mx:HDividedBox left="15" 
			  top="20" 
			  right="20"
			  bottom="20">
		
		<s:VGroup height="100%" includeIn="revisions">
			<s:Label x="15" y="65" text="Revisions:" fontWeight="bold"/>
			<s:List id="revisionsList" 
					width="100%"
					height="100%" 
					minWidth="200"
					labelField="name" 
					borderAlpha=".5"
					click="revisions_clickHandler(event)"/>
		</s:VGroup>
		
		<s:VGroup id="editorGroup" 
				  left="15" 
				  top="20" 
				  right="20"
				  bottom="20"
				  width="100%"
				  height="100%">
			
			<s:Label x="15" y="65" text="MXML code:" fontWeight="bold"/>
			
			<s:HGroup x="14" y="31" width="100%" horizontalAlign="right">
				<s:Label x="15" y="15" text="Import to:" fontWeight="bold"/>
				<s:Spacer width="100%"/>
				<s:RadioButton x="91" 
							   y="128" 
							   label="New Document" 
							   selected="false" 
							   group="{importLocation}"
							   value="{NEW_DOCUMENT}"
							   />
				<s:RadioButton x="190" 
							   y="130" 
							   selected="true"
							   label="Current Document" 
							   group="{importLocation}"
							   value="{CURRENT_DOCUMENT}"
							   />
				<s:RadioButton x="190" 
							   y="130" 
							   label="Selected Component" 
							   group="{importLocation}"
							   value="{CURRENT_SELECTION}"
							   />
			</s:HGroup>
			
			<s:Label id="warningLabel_Ha" 
					 x="15" y="15" 
					 text="Warning: XML is invalid" 
					 fontWeight="bold" 
					 color="red"
					 includeInLayout="false"
					 visible="false"
					 width="100%"/>
			
			<s:HGroup width="100%" right="10" bottom="10" verticalAlign="baseline">
				<s:Button id="showRevisionsButton" label.normal="Show Revisions"
						  label.revisions="Hide Revisions"
						  click="showRevisionsButton_clickHandler(event)"/>
				<s:Spacer width="100%"/>
				<s:Button id="cancelButton" label="Cancel" />
				<s:Button id="importButton" label="Import" />
			</s:HGroup>
		</s:VGroup>
	</mx:HDividedBox>
	
</w:AnimatedPanelWindow>
