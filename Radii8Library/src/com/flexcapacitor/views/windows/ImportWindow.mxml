<?xml version="1.0" encoding="utf-8"?>
<w:AnimatedPanelWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:flexcapacitor="flexcapacitor.*"
			   xmlns:fc="com.flexcapacitor.effects.popup.*"
			   xmlns:w="com.flexcapacitor.views.windows.*"
			   xmlns:controls="com.flexcapacitor.controls.*"

			   title="Import MXML"
			   title.revisions="Select Revision"
			   initialize="animatedpanelwindow1_initializeHandler(event)"
			   creationComplete="animatedpanelwindow1_creationCompleteHandler(event)" 
			   openAnimationEnd="openAnimationEffectEndHandler(event)"
			   resize="animatedpanelwindow1_resizeHandler(event)"
			   updateComplete="animatedpanelwindow1_updateCompleteHandler(event)" xmlns:filters="com.flexcapacitor.filters.*"
			   >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.CodeManager;
			import com.flexcapacitor.managers.ImportManager;
			import com.flexcapacitor.managers.SnippetManager;
			import com.flexcapacitor.model.DocumentRevision;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.IProject;
			import com.flexcapacitor.model.SourceData;
			import com.flexcapacitor.model.TranscoderDescription;
			import com.flexcapacitor.services.ServiceEvent;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			import com.flexcapacitor.utils.DocumentTranscoder;
			import com.flexcapacitor.utils.MXMLDocumentConstants;
			import com.flexcapacitor.utils.MXMLDocumentImporter;
			import com.flexcapacitor.utils.XMLUtils;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			import com.flexcapacitor.utils.supportClasses.XMLValidationInfo;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.utils.Platform;
			
			public static const NEW_DOCUMENT:String = "newDocument";
			public static const CURRENT_DOCUMENT:String = "currentDocument";
			public static const CURRENT_SELECTION:String = "currentSelection";
			public static const IMPORT:String = "import";
			
			public static const NORMAL:String = "normal";
			public static const REVISIONS:String = "revisions";
			
			private var _code:String;

			public function get code():String {
				var text:String;
				
				if (aceEditor) {
					text = aceEditor.text;
				}
				else {
					return _code;
				}
				return text;
			}

			public function set code(value:String):void {
				_code = value;
				if (aceEditor) {
					aceEditor.text = value;
				}
			}
			
			public var snippetID:String;

			public var warningMessage:String = "Warning: XML is invalid and may not import correctly.";
			
			[Bindable]
			public var editorMargin:String = "4px 0 8px 0px";
			
			public var showRevisions:Boolean = false;
			
			private function createEditors():void {
				// 1067: Implicit coercion of a value of type com.flexcapacitor.controls:AceEditor to an unrelated type Object
				
			}
			
			private var lastFocusedEditor:Object;
			
			private function editorFocusInHandler(event:FocusEvent):void {
				lastFocusedEditor = event.currentTarget;
			}
			
			protected function changeHandler(event:Event = null):void {
				var validationInfo:XMLValidationInfo;
				var errorLocation:String;
				var isValid:Boolean;
				var message:String;
				var error:Object;
				var root:String;
				var updatedCode:String;
				var codeToParse:String = aceEditor.text;
				var rootNodeName:String = MXMLDocumentConstants.ROOT_NODE_NAME;
				var namespaces:Object;
				var namespacesString:String;
				var stringMethod:Boolean;
				
				isValid = XMLUtils.isValidXML(codeToParse);
				//error = XMLUtils.validationError;
				
				if (!isValid && codeToParse!="") {
					validationInfo = XMLUtils.validateXML(codeToParse);
					error = validationInfo.error;
					
					if (error is TypeError && error.errorID==1083) {
						namespaces = MXMLDocumentConstants.getNamespaces();
						namespacesString = MXMLDocumentConstants.getDefaultNamespaceDeclarations();
						
						if (stringMethod) {
							updatedCode = XMLUtils.addNamespacesToXMLString(codeToParse, namespaces);
						}
						else {
							root = '<'+rootNodeName + " " + namespacesString +'>';
							updatedCode = root + codeToParse + "</"+rootNodeName+">";
						}
						
						isValid = XMLUtils.isValidXML(updatedCode);
						
						if (isValid) {
							hideMessage();
						}
					}
					
					if (!isValid) {
						message = XMLUtils.validationError ? "" +  validationInfo.errorMessage : warningMessage;
						
						errorLocation = "At line " + (validationInfo.row) + " column " + validationInfo.column+ ":";
						showMessage(errorLocation, message, validationInfo.row-1, validationInfo.column);
					}
				}
				else {
					hideMessage();
				}
				
			}
			
			public function showMessage(firstMessage:String, secondMessage:String = null, row:int = -1, column:int = 0):void {
				lineError.text = firstMessage;
				warningLabel.text = secondMessage;
				errorGroup.visible = true;
				errorGroup.includeInLayout = true;
				aceEditor.clearAnnotations();
				aceEditor.setAnnotation(row, column, secondMessage, "error");
			}
			
			public function hideMessage():void {
				errorGroup.visible = false;
				errorGroup.includeInLayout = false;
				lineError.text = "";
				warningLabel.text = "";
				
				if (aceEditor.aceFound) {
					aceEditor.clearAnnotations();
				}
			}
			
			public function showImportedMessage(warnings:Boolean = false, errors:Boolean = false):void {
				hideMessage();
				
				notesGroup.visible = true;
				notesGroup.includeInLayout = true;
				
				if (warnings && errors) { 
					messageLabel.text = "Import successful with errors and warnings. See console";
				}
				else if (warnings) {
					messageLabel.text = "Import successful with warnings. See console";
				}
				else if (errors) {
					messageLabel.text = "Import successful with errors. See console";
				}
				else {
					messageLabel.text = "Import successful";
				}
				
				if (aceEditor.aceFound) {
					aceEditor.clearAnnotations();
				}
			}
			
			public function showImportingMessage():void {
				hideMessage();
				
				notesGroup.visible = true;
				notesGroup.includeInLayout = true;
				messageLabel.text = "Importing";
				
				if (aceEditor.aceFound) {
					aceEditor.clearAnnotations();
				}
			}
			
			public function showLoadingMessage():void {
				hideMessage();
				
				notesGroup.visible = true;
				notesGroup.includeInLayout = true;
				messageLabel.text = "Loading";
				
				if (aceEditor.aceFound) {
					aceEditor.clearAnnotations();
				}
			}
			
			/**
			 * Import 
			 * */
			public function importPopUp_closeHandler(event:Event):void {
				var radiate:Radiate = Radiate.instance;
				var selectedDocument:IDocument = Radiate.selectedDocument;
				var selectedProject:IProject = Radiate.selectedProject;
				var type:String = importLocation.selectedValue as String;
				var target:IVisualElement = radiate.target as IVisualElement;
				var result:SourceData;
				
				if (type==ImportWindow.NEW_DOCUMENT) {
					result = ImportManager.importMXMLDocument(selectedProject, null, code);
					
					if (result) {
						showImportedMessage();
						closeWindow();
						return;
					}
					else {
						radiate.addEventListener(RadiateEvent.DOCUMENT_OPEN, newDocumentOpened, false, 0, true);
						showImportingMessage();
						return;
					}
				}
				else if (type==ImportWindow.CURRENT_DOCUMENT && selectedDocument) {
					result = ImportManager.importMXMLDocument(selectedProject, selectedDocument, code);
					
					if (result) {
						showImportedMessage();
						closeWindow();
						return;
					}
				}
				else if (type==ImportWindow.CURRENT_SELECTION) {
					if (target is IVisualElement) {
						result = ImportManager.importMXMLDocument(selectedProject, selectedDocument, code, target);
						
						if (result) {
							showImportedMessage();
							closeWindow();
							return;
						}
					}
					else {
						showMessage("Please select a visual element");
						return;
					}
				}
				else {
					showMessage("Please select a document");
					return;
				}
				
				if (result) {
					showImportedMessage();
				}
				else {
					showMessage("Did not import successfully");
				}
				
			}
			
			protected function animatedpanelwindow1_hideHandler(event:Event):void {
				radiate = null;
				code = null;
				if (revisionsCollection) revisionsCollection.removeAll();
				documentRevisions = null;
			}
			
			protected function animatedpanelwindow1_creationCompleteHandler(event:FlexEvent):void {
				radiate = Radiate.instance;
				var selectedDocument:IDocument = Radiate.selectedDocument;
				
				//DeferManager.callAfter(200, afterCompleteTasks);
				
				if (showRevisions) {
					currentState = REVISIONS;
					validateNow();
					documentRevisions = selectedDocument.revisions.slice();
					revisionsCollection = new ArrayCollection(documentRevisions);
					revisionsList.dataProvider = revisionsCollection;
				}
				else {
					currentState = NORMAL;
				}
				
			}
			
			public var documentRevisions:Array;
			public var revisionsCollection:ArrayCollection;
			
			public function afterCompleteTasks():void {
				createEditors();
				var snippetMessage:String;
				
				if (_code && aceEditor) {
					if (aceEditor.text!=_code) {
						aceEditor.text = _code;
						changeHandler();
						aceEditor.invalidateDisplayList();
					}
				}
				
				if (snippetID) {
					snippetTextInput.text = snippetID;
					snippetMessage = "Press the get snippet button to load the snippet";
					
					if (!Radiate.isDesktop) {
						snippetMessage += " mentioned in the URL";
					}
					
					snippetMessage += ". You can preview before importing";
					aceEditor.text = snippetMessage;
					
					getSnippet();
				}
			}
			
			protected function revisions_clickHandler(event:MouseEvent):void {
				var selectedItem:DocumentRevision = revisionsList.selectedItem as DocumentRevision;
				
				if (selectedItem) {
					code = selectedItem.code;
				}
			}
			
			protected function showRevisionsButton_clickHandler(event:MouseEvent):void {
				var selectedDocument:IDocument = Radiate.selectedDocument;
				
				if (currentState == REVISIONS) {
					currentState = NORMAL;
				}
				else {
					currentState = REVISIONS;
					validateNow();
					
					if (selectedDocument) {
						documentRevisions = selectedDocument.revisions.slice();
						revisionsCollection = new ArrayCollection(documentRevisions);
						revisionsList.dataProvider = revisionsCollection;
					}
				}
			}
			
			protected function showOriginalSourceButton_clickHandler(event:MouseEvent):void {
				var selectedDocument:IDocument = Radiate.selectedDocument;
				
				if (selectedDocument) {
					if (selectedDocument.originalSource) {
						aceEditor.text = selectedDocument.originalSource;
					}
					else {
						Radiate.warn("No source in document.");
					}
				}
				else {
					Radiate.warn("No document is selected.");
				}
			}
			
			protected function showCurrentSourceButton_clickHandler(event:MouseEvent):void {
				var selectedDocument:IDocument = Radiate.selectedDocument;
				
				if (selectedDocument) {
					var source:String =  selectedDocument.getSource();
					aceEditor.text = source;
				}
				else {
					Radiate.warn("No source to show. No document is selected.");
				}
			}
			
			public var magicNumber:int = 250;
			
			protected function cancelButton_clickHandler(event:MouseEvent):void {
				action = null;
				code = null;
				
				aceEditor.visible = false;
				aceEditor.validateNow();
				closePopUp.startDelay = magicNumber;
				closePopUp.play();
			}
			
			public function closeWindow(updatedAction:String = null, updatedCode:String = null):void {
				action = updatedAction;
				code = updatedCode;
				
				aceEditor.visible = false;
				aceEditor.validateNow();
				closePopUp.startDelay = magicNumber;
				closePopUp.play();
			}
			
			protected function addNamespaces_clickHandler(event:MouseEvent):void {
				var xml:XML;
				var root:String;
				var isValid:Boolean;
				var rootNodeName:String = MXMLDocumentConstants.ROOT_NODE_NAME;
				var updatedCode:String;
				var mxmlDocumentImporter:MXMLDocumentImporter;
				var componentDescription:ComponentDescription;
				var sourceDataLocal:SourceData;
				var codeToParse:String = aceEditor.text;
				
				var transcoder:TranscoderDescription = CodeManager.getImporter(CodeManager.MXML);
				var importer:DocumentTranscoder = transcoder.importer;
				
				isValid = XMLUtils.isValidXML(codeToParse);
				
				if (!isValid) {
					root = '<'+rootNodeName + " " + MXMLDocumentConstants.getDefaultNamespaceDeclarations() +'>';
					updatedCode = root + codeToParse + "</"+rootNodeName+">";
				}
				else {
					// add missing namespaces here - NOT Finished
					root = '<'+rootNodeName + " " + MXMLDocumentConstants.getDefaultNamespaceDeclarations() +'>';
					updatedCode = root + codeToParse + "</"+rootNodeName+">";
				}
				
				aceEditor.text = updatedCode;
				
			}
			
			protected function newDocumentOpened(event:RadiateEvent):void
			{
				var iDocument:IDocument = event.selectedItem as IDocument;
				var sourceData:SourceData = iDocument ? iDocument.sourceData : null;
				
				if (sourceData) {
					if (sourceData.warnings || sourceData.errors) {
						showImportedMessage(sourceData.warnings.length>0, sourceData.errors.length>0);
					}
					else {
						showImportedMessage();
					}
				}
				else {
					showMessage("Did not import successfully");
				}
				
				radiate.removeEventListener(RadiateEvent.DOCUMENT_OPEN, newDocumentOpened);
			}
			
			protected function animatedpanelwindow1_initializeHandler(event:FlexEvent):void
			{
				if (Platform.isBrowser==true) {
					editorMargin = "0";
				}
			}
			
			protected function openAnimationEffectEndHandler(event:Event):void
			{
				//trace("open animation finished");
				aceEditor.visible = true;
				callLater(updateAceEditor);
				callLater(afterCompleteTasks);
			}
			
			protected function animatedpanelwindow1_resizeHandler(event:ResizeEvent):void
			{
				//trace("resizing complete");
				callLater(updateAceEditor);
			}
			
			protected function animatedpanelwindow1_updateCompleteHandler(event:FlexEvent):void
			{
				//trace("Update complete");
				updateAceEditor();
			}
			
			public function updateAceEditor():void {
				// we are creating multiple instances everytime the window is opened
				// at this time we aren't reusing ace editors instances
				// hopefully this will be fixed in the future
				// we could also defer creating the editor until the pop up has finished
				// animating
				if (aceEditor.visible) {
					aceEditor.invalidateDisplayList();
					aceEditor.invalidateSize();
					aceEditor.validateNow();
				}
			}
			
			private var snippetManager:SnippetManager;
			
			protected function getURL_clickHandler(event:Event):void {
				
				getSnippet();
			}
			
			public function getSnippet():void {
				
				if (snippetManager==null) {
					snippetManager = SnippetManager.getInstance();
				}
				
				snippetID = snippetTextInput.text;
				
				if (snippetID!=null && snippetID!="") {
					snippetManager.addEventListener(SnippetManager.RETRIEVED_RESULTS, getSnippetResultsHandler, false, 0, true);
					snippetManager.getSnippetByFragment(snippetID);
					snippetProgressBar.visible = true;
					snippetGroup.includeInLayout = true;
					snippetGroup.visible = true;
					mxmlCodeLabel.text = "Loading Snippet...";
					//showLoadingMessage();
				}
			}
			
			public var thumbnailBitmapData:BitmapData;
			
			protected function getSnippetResultsHandler(event:ServiceEvent):void {
				var serviceEvent:ServiceEvent;
				var message:String;
				var data:Object;
				var post:Object;
				var status:String;
				var customFields:Object;
				var source:String;
				var uri:String;
				var thumbnail:XML;
				var thumbnailBase64Data:String;
				var thumbnailQName:QName;
				var thumbnailList:XMLList;
				
				mxmlCodeLabel.text = "Snippet";
				snippetProgressBar.visible = false;
				snippetManager.removeEventListener(SnippetManager.RETRIEVED_RESULTS, getSnippetResultsHandler);
				
				if (event.hasError) {
					message = Object(event.faultEvent).text;
					warningLabel.text = message;
					
					if (event.data && event.data.error) {
						aceEditor.text = event.data.error;
					}
					else {
						aceEditor.text = message;
					}
				}
				else {
					data = Object(event.resultEvent).data;
					post = data ? data.post : null;
					
					if (post) {
						uri = post.url;
						status = post.status;
						customFields = post.custom_fields;
						source = customFields.source;
						thumbnailBase64Data = customFields.thumbnail;
						aceEditor.text = source;
						
						snippetTitle.text = post.title;
						snippetTitle.toolTip = "Title of snippet";
						snippetDescription.text = post.content.replace(/<\/?p>/g,"");
						snippetGroup.includeInLayout = true;
						snippetGroup.visible = true;
						importButton.label = "Import";
					}
					else if (data && data.error) {
						source = data.error;
						aceEditor.text = source;
					}
					

					if (XMLUtils.isValidXML(source)) {
						try {
							thumbnail = new XML(source);
							thumbnailQName = new QName(MXMLDocumentConstants.fcNamespaceURI, MXMLDocumentConstants.THUMBNAIL_DATA);
							////thumbnailList = thumbnail.descendants(MXMLDocumentConstants.THUMBNAIL_DATA);
							thumbnailList = thumbnail.child(thumbnailQName);
							
							if (thumbnailList.length()>0) {
								thumbnailBase64Data =  thumbnailList.toString();
							}
						}
						catch (error:Error) {
							Radiate.warn(error.toString());
						}
						
						rollOverAnimation.play(null, false);
					}
					
					
					if (thumbnailBase64Data) {
						DisplayObjectUtils.getBitmapDataFromBase64(thumbnailBase64Data, null, false, "png", thumbnailImage);
						//thumbnailImage.source = thumbnailBitmapData;
						//thumbnailImage.width = 100;
					}
					
				}
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--- hide about popup -->
		<fc:ClosePopUp id="closePopUp" popUp="{this}"  />
		
		<fx:String id="action"></fx:String>
		
		<s:RadioButtonGroup id="importLocation"  />
		
		<s:Linear id="easer" easeInFraction="0" easeOutFraction="0"/>
		<fx:int id="duration">1000</fx:int>
		<fx:Number id="borderWeight">3</fx:Number>
		<fx:Number id="borderColor">0x00FF00</fx:Number>
		
		<filters:BorderStrokeFilter id="borderStrokeFilter"
									color="{borderColor}"
									weight="0"/>
		
		<s:GlowFilter id="glowFilter"
					  color="{borderColor}"
					  strength="0"/>
		
		<fx:Vector id="rollOverMotionPathsBorder" 
				   type="spark.effects.animation.MotionPath">
			<s:SimpleMotionPath property="weight" 
								valueFrom="0" 
								valueTo="{borderWeight}"/>
			<s:SimpleMotionPath property="weight" 
								valueTo="0" 
								valueFrom="{borderWeight}"/>
		</fx:Vector>
		
		<fx:Vector id="rollOverMotionPathsGlow" 
				   type="spark.effects.animation.MotionPath">
			<s:SimpleMotionPath property="strength" 
								valueFrom="0" 
								valueTo="{borderWeight}"
								/>
			<s:SimpleMotionPath property="strength" 
								valueFrom="{borderWeight}"
								valueTo="0" 
								/>
		</fx:Vector>
		
		
		<s:Animate id="rollOverAnimation" 
				   easer="{easer}"
				   duration="{duration}" 
				   target="{glowFilter}"
				   motionPaths="{rollOverMotionPathsGlow}"
				   >
			
		</s:Animate>
	</fx:Declarations>
	
	<w:states>
		<s:State name="normal"/>
		<s:State name="editor"/>
		<s:State name="revisions"/>
	</w:states>
	
	<mx:HDividedBox left="15" liveDragging="true"
			  top="20" 
			  right="20"
			  bottom="20">
		
		<s:VGroup height="100%" includeIn="revisions">
			<s:Label x="15" y="65" text="Revisions:" fontWeight="bold"/>
			<s:List id="revisionsList" 
					width="100%"
					height="100%" 
					minWidth="200"
					labelField="name" 
					borderAlpha=".5"
					click="revisions_clickHandler(event)"/>
		</s:VGroup>
		
		<s:VGroup id="editorGroup" 
				  left="15" 
				  top="20" 
				  right="20"
				  bottom="20"
				  width="100%"
				  height="100%">
			
			<s:HGroup width="100%" >
				<s:Label id="mxmlCodeLabel" 
						 x="15" y="65" 
						 text="MXML code:" 
						 fontWeight="bold"
						 paddingBottom="10"/>
				
				<s:Label id="snippetTitle" width="100%" text=""
						 toolTip=""/>
			</s:HGroup>
			
			<mx:HDividedBox width="100%" height="100%" liveDragging="true">
				<s:VGroup id="snippetGroup" 
						  visible="false"
						  includeInLayout="false"
						  gap="10"
						  width="150"
						  height="100%"
						  minWidth="100">
					
					<s:Label id="snippetTitleLabel" width="100%" text="Description:"
							 fontWeight="bold"/>
					<s:Label id="snippetDescription" width="100%" 
							 maxDisplayedLines="5" text="Description"
							 toolTip="Description of snippet"/>
					<s:Label id="snippetThumbnailLabel" width="100%" text="Thumbnail:"
							 fontWeight="bold"/>
					<s:Image id="thumbnailImage" 
							 width="100" height="100"
							 smooth="true"
							 smoothingQuality="high"
							 toolTip="Thumbnail of snippet"/>
					<s:Spacer height="100%"/>
					
					<s:Button id="importSnippetButton" label="Import Snippet" 
							  click="importPopUp_closeHandler(event)" 
							  filters="{[glowFilter]}"/>
				</s:VGroup>
				
				<controls:AceEditor id="aceEditor" 
									top="0" left="0"
									width="100%" height="100%"
									mode="ace/mode/xml"
									showFoldWidgets="true"
									useWordWrap="true"
									scrollSpeed=".5"
									margin="{editorMargin}"
									focusIn="editorFocusInHandler(event)"
									change="changeHandler(event)"
									visible="true"
									/>
			</mx:HDividedBox>
			
			<s:HGroup x="14" y="31" width="100%" height="22" 
					  horizontalAlign="right" 
					  verticalAlign="middle">
				<s:Label x="15" y="15" text="Import to:" 
						 fontWeight="bold" paddingTop="3" paddingRight="10"/>
				<s:RadioButton x="91" 
							   y="128" 
							   label="New Document" 
							   selected="false" 
							   group="{importLocation}"
							   value="{NEW_DOCUMENT}"
							   />
				<s:RadioButton x="190" 
							   y="130" 
							   selected="true"
							   label="Current Document" 
							   group="{importLocation}"
							   value="{CURRENT_DOCUMENT}"
							   />
				<s:RadioButton x="190" 
							   y="130" 
							   label="Selected Component" 
							   group="{importLocation}"
							   value="{CURRENT_SELECTION}"
							   />
				<s:Spacer width="100%"/>
				
				<mx:ProgressBar id="snippetProgressBar" 
								label="" 
								height="8"
								visible="false"
								indeterminate="true" 
								width="100%"/>
				<s:Label x="15" y="15" text="Snippet ID or URL:" 
						 fontWeight="bold" paddingTop="3" paddingRight="10"/>
				<s:TextInput id="snippetTextInput" prompt="ID or URL of snippet" width="200" 
							 enter="getURL_clickHandler(event)"/>
				<s:Button label="Get" click="getURL_clickHandler(event)"/>
			</s:HGroup>
			
			<s:HGroup id="notesGroup" width="100%" verticalAlign="middle" 
					  includeInLayout="false" visible="false">
				<s:Label id="messageLabel"
						 fontWeight="bold" 
						 color="green"/>
				
			</s:HGroup>
			
			<s:HGroup id="errorGroup" width="100%" verticalAlign="middle" 
					  includeInLayout="false" visible="false">
				<s:Label id="lineError" 
						 x="15" y="15" 
						 text="" 
						 fontWeight="bold" 
						 color="red"/>
				
				<s:Label id="warningLabel" 
						 x="15" y="15" 
						 text="" 
						 fontWeight="bold" 
						 color="red"
						 width="100%"/>
			</s:HGroup>
			
			<s:HGroup width="100%" right="10" bottom="10" verticalAlign="baseline">
				<s:Button id="showRevisionsButton" label.normal="Show Revisions"
						  label.revisions="Hide Revisions"
						  click="showRevisionsButton_clickHandler(event)"/>
				<s:Button id="showOriginalSourceButton" 
						  label="Show Original Source"
						  click="showOriginalSourceButton_clickHandler(event)"/>
				<s:Button id="showCurrentSourceButton" 
						  label="Show Current Source"
						  click="showCurrentSourceButton_clickHandler(event)"/>
				<controls:VerticalLine baseline="-5"/>
				<s:Button label="Add namespaces" click="addNamespaces_clickHandler(event)"/>
				<s:Spacer width="100%"/>
				
				<s:Button id="cancelButton" label="Close" click="cancelButton_clickHandler(event)"/>
				<s:Button id="importButton" label="Import" click="importPopUp_closeHandler(event)" 
						  filters="{[glowFilter]}"/>
			</s:HGroup>
		</s:VGroup>
	</mx:HDividedBox>
	
</w:AnimatedPanelWindow>
