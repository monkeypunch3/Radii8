<?xml version="1.0" encoding="utf-8"?>
<windows:AnimatedPanelWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:flexcapacitor="flexcapacitor.*"
			   xmlns:handlers="com.flexcapacitor.handlers.*"
			   xmlns:fc="com.flexcapacitor.effects.popup.*"
			   xmlns:windows="com.flexcapacitor.views.windows.*"
			   xmlns:controls="com.flexcapacitor.controls.*"

			   title="Settings" 
			   creationComplete="window1_creationCompleteHandler(event)" 
			   >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.ServicesManager;
			import com.flexcapacitor.model.Settings;
			import com.flexcapacitor.utils.PersistentStorage;
			import com.flexcapacitor.utils.StoreLogin;
			
			import flash.utils.setTimeout;
			
			import mx.events.FlexEvent;
			import mx.utils.Platform;
			
			public var NONE:String = "none";
			public var CONNECTED:String = "connected";
			public var DISCONNECTED:String = "disconnected";
			
			public var clickedOnce:Boolean;
			
			private var host:String;
			private var path:String;
			private var screenshotPath:String;
			private var siteScannerPath:String;
			
			protected function window1_creationCompleteHandler(event:FlexEvent):void {
				var settings:Settings;
				var object:Object;
				
				settings = Radiate.settings;
				
				autoSaveCheckbox.selected = settings.enableAutoSave;
				wordWrapCheckbox.selected = settings.enableWordWrap;
				embedImagesCheckbox.selected = settings.embedImages;
				startInDesignViewCheckbox.selected = settings.startInDesignView
				
				hostInput.text = Radiate.WP_HOST;
				pathInput.text = Radiate.WP_PATH;
				
				host = Radiate.WP_HOST;
				path = Radiate.WP_PATH;
				
				screenshotPath = Radiate.SCREENSHOT_PATH;
				siteScannerPath = Radiate.SITE_SCANNER_PATH;
				
				screenshotPathInput.text = screenshotPath
				siteScannerPathInput.text = siteScannerPath;
				
				if (PersistentStorage.isSupported) {
					object = PersistentStorage.read(Radiate.USER_STORE);
				}
				else if (Platform.isBrowser) {
					savePassword = new StoreLogin();
					savePasswordCreated = savePassword.initialize(); // places our javascript onto the page
					//savePassword.getFormValues();
					//savePassword.clearFormValues();
				}
				
				// login saved
				if (object!=null) {
					saveLoginCheckbox.selected = true;
				}
				else {
					saveLoginCheckbox.selected = false;
				}
				
				
			}
			
			public var savePassword:StoreLogin;
			public var savePasswordCreated:Boolean;
			
			protected function applyButton_clickHandler(event:MouseEvent):void {
				var changed:Boolean;
				var settings:Settings;
				
				// save settings
				settings = Radiate.settings;
				
				settings.enableAutoSave = autoSaveCheckbox.selected;
				settings.enableWordWrap = wordWrapCheckbox.selected;
				settings.embedImages = embedImagesCheckbox.selected;
				settings.startInDesignView = startInDesignViewCheckbox.selected;
				
				// clear logins
				if (!saveLoginCheckbox.selected) {
					if (PersistentStorage.isSupported) {
						PersistentStorage.remove(Radiate.USER_STORE);
					}
					else if (savePassword) {
						savePassword.clearFormValues();
					}
				}
				
				// set autosave - we need to move this to an apply settings method
				Radiate.saveSettings();
				Radiate.applySettings();
				
				// update screenshot path
				if (screenshotPathInput.text) {
					
					if (screenshotPath!=screenshotPathInput.text) {
						PersistentStorage.write(Radiate.SCREENSHOT_PATH_NAME, screenshotPathInput.text);
					}
					
					Radiate.SCREENSHOT_PATH = screenshotPathInput.text;
				}
				
				// update site scanner path
				if (siteScannerPathInput.text) {
					
					if (siteScannerPath!=siteScannerPathInput.text) {
						PersistentStorage.write(Radiate.SITE_SCANNER_PATH_NAME, siteScannerPathInput.text);
					}
					
					Radiate.SITE_SCANNER_PATH = siteScannerPathInput.text;
				}
				
				// update host
				if (hostInput.text || pathInput.text) {
					
					if (host != hostInput.text || path != pathInput.text) {
						changed = true;
					}
					
					if (changed) {
						PersistentStorage.write(Radiate.WP_HOST_NAME, hostInput.text);
						PersistentStorage.write(Radiate.WP_PATH_NAME, pathInput.text);
						ServicesManager.instance.logout();
					}
					
					
					Radiate.WP_HOST = hostInput.text;
					Radiate.WP_PATH = pathInput.text;
					
					closePopUp.play();
				}
				
			}
			
			protected function clearPathButton_clickHandler(event:MouseEvent):void {
				pathInput.text = Radiate.defaultPath;
			}
			
			protected function clearHostButton_clickHandler(event:MouseEvent):void {
				hostInput.text = Radiate.defaultHost;
			}
			
			protected function verifyButton_clickHandler(event:MouseEvent):void {
				currentState = NONE;
				
				Radiate.WP_HOST = hostInput.text;
				Radiate.WP_PATH = pathInput.text;
				ServicesManager.instance.addEventListener(RadiateEvent.LOGGED_IN_STATUS, loggedInStatusHandler, false, 0, true);
				ServicesManager.instance.getLoggedInStatus();
				busyIndicator.visible = true;
				busyIndicator.includeInLayout = true;
			}
			
			/**
			 * Handle when getting result of call that checks if user is logged in
			 * */
			protected function loggedInStatusHandler(event:RadiateEvent):void {
				
				if (Radiate.instance.isUserConnected) {
					currentState = CONNECTED;
				}
				else {
					currentState = DISCONNECTED;
				}
				
				
				busyIndicator.visible = false;
				busyIndicator.includeInLayout = false;
			}
			
			protected function clearAllLoginsButton_clickHandler(event:MouseEvent):void {
				if (!clickedOnce) {
					warning.text = "This will erase all logins. Click to continue";
					clickedOnce = true;
				}
				else {
					PersistentStorage.removeAllFromStorage(Radiate.USER_STORE);
					warning.text = "All logins erased.";
					setTimeout(removedNotes, 3000);
				}
			}
			
			protected function removedNotes():void {
				if (warning) {
					warning.text = "";
				}
				
				if (warningLabel_Ha) {
					warningLabel_Ha.text = "";
				}
				
				if (connectedLabel.text) {
					connectedLabel.text = "";
				}
				
				currentState = NONE;
			}
			
			protected function clearBrowserScreenshotSite_clickHandler(event:MouseEvent):void {
				screenshotPathInput.text = Radiate.defaultScreenshotPath;
			}
			
			protected function clearBrowserSiteScannerSite_clickHandler(event:MouseEvent):void {
				siteScannerPathInput.text = Radiate.defaultSiteScannerPath;
			}
			
			protected function wordWrapCheckbox_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function startInDesignViewCheckbox_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function autoSaveCheckbox_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function embedImagesCheckbox_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function uploadLibraryItemsCheckbox_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!--- hide about popup -->
		<handlers:EventHandler targets="{cancelButton}" eventName="click" setTriggerEvent="true">
			<s:SetAction property="action" target="{this}" value="cancel"/>
			<fc:ClosePopUp popUp="{this}"  />
		</handlers:EventHandler>
		
		<!--- close popup -->
		<fc:ClosePopUp id="closePopUp" popUp="{this}"  />
		
		<fx:String id="action"></fx:String>
		
	</fx:Declarations>
	
	<windows:states>
		<s:State name="none"/>
		<s:State name="connected"/>
		<s:State name="disconnected"/>
	</windows:states>
	
	<s:VGroup id="editorGroup" left="15" 
				 top="20" 
				 right="20"
				 bottom="20">
		
		<s:TileGroup id="tileGroup" 
					 top="0" left="0" right="0" bottom="0"
					 width="100%" height="100%" 
					 horizontalGap="10" verticalGap="10" 
					 paddingLeft="10" paddingTop="10"
					 requestedColumnCount="2" columnWidth="200"
					 verticalAlign="middle">
			
			<s:Label text="Host" />
			<s:HGroup width="100%">
				<s:TextInput id="hostInput" 
							 width="100%"
							 minWidth="360"
							 focusAlpha="0" 
							 styleName="textInputStyles"/>
				<controls:ClearButton click="clearHostButton_clickHandler(event)"/>
			</s:HGroup>
			
			<s:Label text="Path" />
			<s:HGroup width="100%">
				<s:TextInput id="pathInput" width="100%" focusAlpha="0" styleName="textInputStyles"/>
				<controls:ClearButton click="clearPathButton_clickHandler(event)"/>
			</s:HGroup>
			
			<s:Label text="" />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Button label="Verify Connection" click="verifyButton_clickHandler(event)"/>
				<mx:ProgressBar id="busyIndicator" 
								indeterminate="true" 
								label=""
								height="10"
								includeInLayout="false" visible="false"/>
				<s:Label id="connectedLabel" 
						 text="" 
						 text.connected="Connected" 
						 fontWeight="bold" 
						 color.connected="green"
						 includeInLayout="false"
						 visible="false"
						 includeInLayout.connected="true"
						 visible.connected="true"
						 minWidth="120"
						 width="100%"/>
			</s:HGroup>
			
			<s:Label text="Browser Screenshot Site" />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:TextInput id="screenshotPathInput" 
							 width="100%" 
							 minWidth="360"
							 focusAlpha="0" 
							 styleName="textInputStyles"/>
				<controls:ClearButton click="clearBrowserScreenshotSite_clickHandler(event)" 
									  toolTip="Reset to the default browser screenshot site"/>
			</s:HGroup>
			
			<s:Label text="Site Scanner Site" />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:TextInput id="siteScannerPathInput" 
							 width="100%" 
							 minWidth="360"
							 focusAlpha="0" 
							 styleName="textInputStyles"/>
				<controls:ClearButton click="clearBrowserSiteScannerSite_clickHandler(event)" 
									  toolTip="Reset to the default site scanner site"/>
			</s:HGroup>
			
			<s:Label text="Word wrap in editor" />
			<s:CheckBox id="wordWrapCheckbox" click="wordWrapCheckbox_clickHandler(event)"/>
			
			<s:Label text="Automatically upload media" />
			<s:CheckBox id="uploadLibraryItemsCheckbox" />
			
			<s:Label text="Embed images" toolTip="Embeds the image into the MXML document using Base64 data"/>
			<s:CheckBox id="embedImagesCheckbox" />
			
			<s:Label text="Auto-Save" />
			<s:CheckBox id="autoSaveCheckbox" toolTip="If you enable auto save do NOT edit the document in the browser and RADIATE at the same time" />
			
			<s:Label text="Save logins" toolTip="Save logins when logging in" />
			<s:CheckBox id="saveLoginCheckbox" />
			
			<s:Label text="Start in Design View" toolTip="Start in the design view" />
			<s:CheckBox id="startInDesignViewCheckbox" click="startInDesignViewCheckbox_clickHandler(event)"/>
			
			<s:Label text="Remove all logins" />
			<s:HGroup width="100%" verticalAlign="middle">
				<controls:ClearButton click="clearAllLoginsButton_clickHandler(event)" 
									  toolTip="Clicking this will remove all logins across all domains. Click twice to continue."/>
				<s:Label id="warning" paddingLeft="10" text="" color="red" fontWeight="bold" />
			</s:HGroup>
		</s:TileGroup>
		
		<s:HGroup width="100%" right="10" bottom="10" minHeight="32" paddingLeft="10" verticalAlign="bottom">
			
			<s:Label id="warningLabel_Ha" 
					 x="15" y="15" 
					 text="" 
					 text.disconnected="Service not found. Is the service plugin turned on?" 
					 fontWeight="bold" 
					 color="red"
					 color.disconnected="red"
					 includeInLayout="false"
					 visible="false"
					 includeInLayout.disconnected="true"
					 visible.disconnected="true"
					 width="100%"/>
			<s:Spacer width="100%"/>
			<s:Button id="cancelButton" label="Cancel" />
			<s:Button id="applyButton" label="OK" click="applyButton_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
	
</windows:AnimatedPanelWindow>
