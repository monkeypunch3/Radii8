<?xml version="1.0" encoding="utf-8"?>
<windows:AnimatedPanelWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:handlers="com.flexcapacitor.handlers.*" 
			   xmlns:fc="com.flexcapacitor.effects.popup.*"
			   xmlns:controls="com.flexcapacitor.controls.*"
			   xmlns:c="com.flexcapacitor.views.windows.*"
			   xmlns:core="com.flexcapacitor.effects.core.*"
			   xmlns:windows="com.flexcapacitor.views.windows.*"
			   
			   title.login="Login"
			   title.logout="Logout"
			   title.register="Register"
			   title.registrationWithSite="Register"
			   title.lostPassword="Lost Password"
			   title.lostPasswordConfirmation="Change Password"
			   title.loginAfterPasswordChanged="Login"
			   title.changePassword="Change Password"
			   
			   creationComplete="creationCompleteHandler(event)"
			   stateChangeComplete="stateChangeCompleteHandler(event)"
			   >
	
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.ServicesManager;
			import com.flexcapacitor.utils.PersistentStorage;
			import com.flexcapacitor.utils.StoreLogin;
			
			import flash.net.navigateToURL;
			
			import mx.core.Singleton;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpData;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerImpl;
			
			use namespace mx_internal;
			
			private var username:String;
			public var openingState:String;
			
			public static const REGISTER:String = "register";
			public static const LOGIN:String = "login";
			public static const LOGOUT:String = "logout";
			public static const LOST_PASSWORD:String = "lostPassword";
			public static const LOST_PASSWORD_CONFIRMATION:String = "lostPasswordConfirmation";
			public static const LOGIN_AFTER_PASSWORD_CHANGED:String = "loginAfterPasswordChanged";
			public static const LOGIN_AFTER_REGISTRATION:String = "loginAfterRegistration";
			public static const REGISTRATION_WITH_SITE:String = "registrationWithSite";
			
			// There should be a form on our HTML page. 
			// The browser will fill the form with values if the user logged in before
			// If there are multiple users it will fill it with the last user
			// Or if it's blank it will autofill the password when a username is entered into the form
			// 
			// What we do is this:
			// 
			// 1. add scripts to the page when the application loads
			// 2. check for existing form values set by the browser
			// 3. fill in our Flash form with those values
			protected function creationCompleteHandler(event:FlexEvent):void {
				var savePassword:StoreLogin = new StoreLogin();
				var savePasswordCreated:Boolean;
				
				
				if (!Radiate.isDesktop) {
					savePasswordCreated = savePassword.initialize(); // places our javascript onto the page
				}
				
				// todo: Check if user has remember login checked
				
				checkForLoginValues();
				
				radiate = Radiate.getInstance();
				
				serviceManager = ServicesManager.getInstance();
				
				//trace("creation");
				// apply after opened
				//setStyle("moveEffect", moveEffect);
			}
			
			/**
			 * Gets form values from page
			 * */
			protected function checkForLoginValues():void {
				var savePassword:StoreLogin = new StoreLogin();
				var loginItems:Array = [];
				
				if (!Radiate.isDesktop) {
					loginItems = savePassword.getFormValues(); // gets existing form values
					
					if (loginItems.length>0) {
						if (currentState=="login") {
							usernameTextInput.text = loginItems[0];
							passwordTextInput.text = loginItems[1];
						}
					}
				}
				else {
					if (currentState=="login") {
						if (usernameTextInput) {
							var value:Object = PersistentStorage.read(Radiate.USER_STORE);
							
							if (value!=null) {
								usernameTextInput.text = value.u;
								passwordTextInput.text = value.p;
							}
						}
					}
				}
			}
			
			/**
			 * To get the browser to save our login we need to submit the form. 
			 * 
			 * 4. Copy our login information to the form on the HTML page
			 * 5. Submit the form - the form is benign (it doesn't go anywhere). 
			 * this causes the browser to display a save password dialog
			 * 6. After calling submit form continue to handle the login procedure as 
			 * you normally would. IE Continue to use HTTPService, URLRequest, etc
			 **/
			protected function login():void {
				var savePassword:StoreLogin = new StoreLogin();
				var setValues:Boolean;
				var results:Boolean;
				
				
				if (!Radiate.isDesktop) {
					setValues = savePassword.setFormValues(usernameTextInput.text, passwordTextInput.text);
					
					if (rememberLoginCheckbox.selected) {
						results = savePassword.submitForm();
					}
					
				}
				else {
					if (PersistentStorage.isSupported) {
						var user:Object = {};
						user.u = usernameTextInput.text;
						user.p = passwordTextInput.text;
						
						PersistentStorage.write(Radiate.USER_STORE, user);
					}
				}
				
				loginWarningsLabel.text = "";
				serviceManager.login(usernameTextInput.text, passwordTextInput.text);
				serviceManager.addEventListener(RadiateEvent.LOGIN_RESULTS, loginResultsHandler, false, 0, true);
				inProgress = true;
			}
			
			
			// OPTIONAL - support multiple accounts or username required to autofill browsers
			// - does not work in chrome. the only solution so far is to login with a user 
			//   for that user to be remembered the next time
			// 
			// If the form is blank then it may be because we have multiple accounts
			// Let the user type in a name / username and then when they tab to password
			// 7. check if the browser has filled in the password after username is entered
			// 8. fill in our password field with the password
			protected function username_focusOutHandler(event:FocusEvent = null):void {
				var savePassword:StoreLogin = new StoreLogin();
				var results:Object;
				var value:String;
				
				if (!Radiate.isDesktop) {
					// if username or password is blank check for password after supplying username
					value = savePassword.checkForPassword(usernameTextInput.text);
				}
				
				if (value) {
					passwordTextInput.text = value;
					passwordTextInput.selectAll();
				}
				
				// set focus on our text field
				passwordTextInput.setFocus();
				
				if (!Radiate.isDesktop) {
					// we have to focus back on flash because of the javascript we use
					results = savePassword.setFocusOnFlash();
				}
				
			}
			
			private function logout():void {
				PersistentStorage.remove(Radiate.USER_STORE);
				logoutWarningsLabel.text = "";
				serviceManager.addEventListener(RadiateEvent.LOGOUT_RESULTS, logoutResultsHandler, false, 0, true);
				serviceManager.logout();
				inProgress = true;
			}
			
			private function register():void {
				registrationWarningsLabel.text = "";
				serviceManager.addEventListener(RadiateEvent.REGISTER_RESULTS, registerResultsHandler, false, 0, true);
				serviceManager.register(newUsernameTextInput.text, emailTextInput.text);
				inProgress = true;
			}
			
			private function registerUserAndSite():void {
				registrationWarningsLabel.text = "";
				serviceManager.addEventListener(RadiateEvent.REGISTER_RESULTS, registerResultsHandler, false, 0, true);
				serviceManager.registerUserAndSite(newUsernameTextInput.text, emailTextInput.text, newSiteTextInput.text, newSiteTitleTextInput.text);
				inProgress = true;
			}
			
			protected function goToLoginAfterRegistrationState():void {
				currentState = LOGIN_AFTER_REGISTRATION;
			}
			
			protected function goToRegistrationWithSiteState():void {
				currentState = REGISTRATION_WITH_SITE;
			}
			
			protected function goToRegistrationState():void {
				currentState = REGISTER;
			}
			
			protected function goToLogoutState():void {
				currentState = LOGOUT;
			}
			
			protected function goToLoginState():void {
				currentState = LOGIN;
				checkForLoginValues();
			}
			
			protected function goToLostPasswordState():void {
				currentState = LOST_PASSWORD;
			}
			
			protected function goToLostPasswordConfirmationState():void {
				currentState = LOST_PASSWORD_CONFIRMATION;
			}
			
			
			private function createRandomPassword(hashLen:uint, 
												  includeLowercase:Boolean = true, 
												  includeUppercase:Boolean = true, 
												  includeNumbers:Boolean = true, 
												  includeCharacters:Boolean = true):String {
				var strHash:String = "";
				if (includeLowercase) strHash += "abchefghjkmnpqrstuvwxyz";
				if (includeNumbers) strHash += "0123456789";
				if (includeUppercase) strHash += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
				if (includeCharacters) strHash += "~!@#$%^&*()-_=+[{]}\|;:/?.>,<";
				
				var maskPick:Number;
				var passwordStr:String = "";
				var maskLen:uint = strHash.length;
				
				for (var i:uint = 0; i < hashLen; i++) {
					maskPick = Math.floor(Math.random() * maskLen);
					passwordStr += strHash.charAt(maskPick);
				}
				
				return passwordStr;
			}
			
			///////////////////////////////////////////////////////////
			//
			//  HANDLERS
			// 
			///////////////////////////////////////////////////////////
			
			
			protected function getNewPasswordButton_clickHandler(event:MouseEvent = null):void {
				inProgress = true;
				lostPasswordWarningsLabel.text = "";
				username = usernameOrEmailTextInput.text;
				
				if (username=="") {
					lostPasswordWarningsLabel.text = "Please enter your username or email address.";
					return;
				}
				serviceManager.addEventListener(RadiateEvent.LOST_PASSWORD_RESULTS, onLostPasswordResults, false, 0, true);
				serviceManager.lostPassword(usernameOrEmailTextInput.text);
			}
			
			protected function changePasswordButton_clickHandler(event:MouseEvent):void {
				inProgress = true;
				changePasswordWarningsLabel.text = "";
				serviceManager.addEventListener(RadiateEvent.CHANGE_PASSWORD_RESULTS, onChangePasswordResults, false, 0, true);
				serviceManager.changePassword(confirmationCodeTextInput.text, username, newPasswordTextInput.text, newPasswordTextInput2.text);
			}
			
			protected function generatePasswordButton_clickHandler(event:MouseEvent):void {
				var password:String = createRandomPassword(14, true, true, true, false);
				newPasswordTextInput.text = password;
				newPasswordTextInput2.text = password;
			}
			
			protected function panel1_resizeHandler(event:ResizeEvent):void {
				if (stage && !addedEffect.isPlaying) {
					// to fix bug on line 505 of PopUpManagerImpl
					var popUpImp:PopUpManagerImpl = PopUpManagerImpl(Singleton.getInstance("mx.managers::IPopUpManager"));
					var popupInfo:Array = popUpImp.popupInfo;
					
					const n:int = popupInfo.length;
					var instanceIndex:int = -1;
					
					for (var i:int = 0; i < n; i++) {
						var o:PopUpData = popupInfo[i];
						if (o.owner == this) {
							instanceIndex = i;
						}
					}
					
					if (instanceIndex!=-1) {
						PopUpManager.centerPopUp(this);
					}
				}
			}
			
			protected function cancelButton_clickHandler(event:MouseEvent=null):void {
				callLater(PopUpManager.removePopUp, [this]);
			}
			
			
			protected function usernameOrEmailTextInput_keyUpHandler(event:KeyboardEvent):void {
				if (event.keyCode==Keyboard.ENTER) {
					getNewPasswordButton_clickHandler(null);
				}
			}
			
			/**
			 * Handle logout 
			 * */
			protected function logoutResultsHandler(event:RadiateEvent):void {
				var data:Object = event.data;
				var error:String;
				var label:Label;
				var message:String = "";
				
				serviceManager.removeEventListener(RadiateEvent.LOGOUT_RESULTS, logoutResultsHandler);
				
				logoutWarningsLabel.text = "";

				if (data && data is Object) {
					for each (error in data.errors) {
						message += error + " ";
					}
				}
				
				inProgress = false;
			
				if (event.faultEvent is IOErrorEvent) {
				
					message = "Are you connected to the internet? ";
					
					if (event.faultEvent is IOErrorEvent) {
						message = IOErrorEvent(event.faultEvent).text;
					}
					else if (event.faultEvent is SecurityErrorEvent) {
						
						if (SecurityErrorEvent(event.faultEvent).errorID==2048) {
							
						}
						
						message += SecurityErrorEvent(event.faultEvent).text;
					}
				}
				
				if (data && data is Object && data.loggedIn==false) {
					closePopUp.startDelay = closePanelDelay;
					closePopUp.play();
					action = LOGOUT;
					return;
				}
				
				logoutWarningsLabel.text = message;
			}
			
			/**
			 * Handle register 
			 * */
			protected function registerResultsHandler(event:RadiateEvent):void {
				var data:Object = event.data;
				var error:String;
				var label:Label;
				var message:String = "";
				var successful:Boolean = event.successful;
				var errors:Array;
				
				serviceManager.removeEventListener(RadiateEvent.REGISTER_RESULTS, registerResultsHandler);
				
				registrationWarningsLabel.text = "";
		
				for (error in data.errors) {
					// user_email, user_name
					if (error=="incorrect_password") {
						message += "The password you entered is incorrect. "
					}
					else if (error=="invalid_username") {
						message += "The username you entered is not found. "
					}
					else if (data.errors[error] is Array) {
						errors = data.errors[error] as Array;
						
						if (error=="blogname" && errors.indexOf("Only lowercase letters")!=-1) {
							message += "Only lowercase letters (a-z) and numbers are allowed in the site name.";
						}
						else {
							message += errors.join(" ") + " ";
						}
					}
					else {
						message += error + " ";
					}
					
				}
				
				inProgress = false;
				
				message = message.replace(/<strong>ERROR<\/strong>: /i, "");
	
				if (event.faultEvent is IOErrorEvent) {
				
					message = "Are you connected to the internet? ";
					
					if (event.faultEvent is IOErrorEvent) {
						message = IOErrorEvent(event.faultEvent).text;
					}
					else if (event.faultEvent is SecurityErrorEvent) {
						
						if (SecurityErrorEvent(event.faultEvent).errorID==2048) {
							
						}
						
						message += SecurityErrorEvent(event.faultEvent).text;
					}
				}
				
				if (data && data is Object && successful) {
					goToLoginAfterRegistrationState();
					validateNow();
					
					if (usernameTextInput) {
						usernameTextInput.text = newUsernameTextInput.text;
					}
					
					if (data.site) {
						message = data.site.message;
						message = message ? message.replace(/site/g, "account") : null;
					}
					else {
						message = "You have successfully registered your username.";
					}
					
					if (message.indexOf("Congratulations")!=-1) {
						
					}
					
					// old message
					// Congratulations! Your account is almost ready. 
					
					// But, before you can start using it, you must activate it. Check your inbox at testuser@mail.com and click the link given. 
					// If you do not activate your account within two days, you will have to sign up again.
					
					//	Still waiting for your email? If you haven't received your email yet, there are a number of things you can do: 
					// Wait a little longer. Sometimes delivery of email can be delayed by processes outside of our control. 
					// Check the junk or spam folder of your email client. 
					// Sometime emails wind up there by mistake. Have you entered your email correctly? 
					// You have entered testuser52@mailinator.com, if it's incorrect, 
					// you will not receive your email.
					
					// copy the password and paste it into the login 
					
					registrationWarningsLabel.text = "Wait! You must activate your account through your email and then login here.";
					loginAfterRegistrationLabel.text = "";
					return;
				}
				
				registrationWarningsLabel.text = message;
			}
			
			/**
			 * Login results handler
			 * */
			protected function loginResultsHandler(event:RadiateEvent):void {
				var data:Object = event.data;
				var error:String;
				var label:Label;
				var message:String = "";
				var successful:Boolean = event.successful;

				serviceManager.removeEventListener(RadiateEvent.LOGIN_RESULTS, loginResultsHandler);
				
				if (!successful && !data) {
					loginWarningsLabel.text = "An unknown error has occured. Try again?";
					return;
				}
				
				loginWarningsLabel.text = "";
				
				for (error in data.errors) {
					
					if (error=="incorrect_password") {
						message += "The password you entered is incorrect. "
					}
					else if (error=="invalid_username") {
						message += "The username you entered is not found. "
					}
					else {
						error = data.errors[error][0].replace(/<strong>ERROR<\/strong>: /i, "");
						message += error + " ";
					}
				}
				
				inProgress = false;
			
				if (event.faultEvent is IOErrorEvent) {
					message = "Are you connected to the internet? ";
					
					if (event.faultEvent is IOErrorEvent) {
						message = IOErrorEvent(event.faultEvent).text;
					}
					else if (event.faultEvent is SecurityErrorEvent) {
						
						if (SecurityErrorEvent(event.faultEvent).errorID==2048) {
							
						}
						
						message += SecurityErrorEvent(event.faultEvent).text;
					}
				}
				
				
				if (data && data is Object && successful) {
					dispatchEvent(new Event(LOGIN));
					closePopUp.startDelay = 0;
					closePopUp.play();
					
					setTimeout(Radiate.info, 1000, ["Login successful. Save any new projects you have started."]);
				}
				
				
				loginWarningsLabel.text = message;
			}
			
			protected function onLostPasswordResults(event:RadiateEvent):void {
				var data:Object = event.data;
				var error:String;
				var message:String = "";
				inProgress = false;
			
				if (data && data is Object && data.sent==true) {
					loginWarningsLabel.text = "";
					currentState = LOST_PASSWORD_CONFIRMATION;
					//logoutWarningsLabel.text = "";
					//closePopUp.startDelay = 250;
					//closePopUp.play();
					return;
				}
				
				lostPasswordWarningsLabel.text = "";
				
				for (error in data.errors) {
					
					if (error=="incorrect_password") {
						lostPasswordWarningsLabel.text += "The password you entered is incorrect."
					}
					else if (error=="invalid_username") {
						lostPasswordWarningsLabel.text += "The username you entered is not found."
					}
					else {
						error = data.errors[error][0].replace(/<strong>ERROR<\/strong>: /i, "");
						lostPasswordWarningsLabel.text += error;
					}
				}
				
				serviceManager.removeEventListener(RadiateEvent.LOST_PASSWORD_RESULTS, onLostPasswordResults);
			}
			
			protected function onChangePasswordResults(event:RadiateEvent):void {
				var data:Object = event.data;
				var error:String;
				var message:String = "";
				inProgress = false;
				
	
				if (data && data is Object && data.reset==true) {
					currentState = LOGIN_AFTER_PASSWORD_CHANGED;
					usernameTextInput.text = username;
					passwordTextInput.text = newPasswordTextInput.text;
					//logoutWarningsLabel.text = "";
					//closePopUp.startDelay = 250;
					//closePopUp.play();
					return;
				}
				
				changePasswordWarningsLabel.text = "";
				
				for (error in data.errors) {
					
					if (error=="invalid_key") {
						changePasswordWarningsLabel.text += "The key you entered is invalid."
					}
					else if (error=="expired_key") {
						changePasswordWarningsLabel.text += "The key you entered has expired."
					}
					else if (error=="invalid_login") {
						changePasswordWarningsLabel.text += "The username is invalid."
					}
					else if (error=="password_not_set") {
						changePasswordWarningsLabel.text += "The password is not set."
					}
					else if (error=="password_reset_mismatch") {
						changePasswordWarningsLabel.text += "The passwords do not match."
					}
					else {
						error = data.errors[error][0].replace(/<strong>ERROR<\/strong>: /i, "");
						changePasswordWarningsLabel.text += error;
					}
				}
				
				serviceManager.removeEventListener(RadiateEvent.CHANGE_PASSWORD_RESULTS, onChangePasswordResults);
			}
			
			protected function stateChangeCompleteHandler(event:FlexEvent):void {
				
				addMoveEffect();
				PopUpManager.centerPopUp(this);
				
				checkForLoginValues()
			}
			
			protected function loginAtWebsiteLabel_clickHandler(event:MouseEvent):void {
				var loginURL:String = Radiate.getWPLoginURL();
				var urlRequest:URLRequest = new URLRequest(loginURL);
				navigateToURL(urlRequest);
				addEventListener(Event.ACTIVATE, activateHandler, false, 0, true);
			}
			
			protected function activateHandler(event:Event):void {
				serviceManager.getLoggedInStatus();
			}
			
			
			protected function lostPasswordCancelButton_clickHandler(event:MouseEvent):void
			{
				if (openingState==LOST_PASSWORD) {
					closePopUp.play();
					return;
				}
				
				currentState = LOGIN;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!--- hide about popup -->
		<handlers:EventHandler targets="{cancelButton}" eventName="clickNOT">
			<fc:ClosePopUp id="closePopUp" popUp="{this}" />
		</handlers:EventHandler>

		
		<!--- hide about popup -->
		<!--<handlers:EventHandler targets="{importButton}" eventName="click">
			<s:SetAction property="action" target="{this}" value="import"/>
			<fc:ClosePopUp popUp="{this}"  />
		</handlers:EventHandler>-->
		
		<fx:String id="action"></fx:String>
		
	</fx:Declarations>
	
	
	<c:states>
		<s:State name="login" />
		<s:State name="logout" />
		<s:State name="loginAfterPasswordChanged" basedOn="login" />
		<s:State name="loginAfterRegistration" basedOn="login" />
		<s:State name="register" />
		<s:State name="registrationWithSite" basedOn="register"/>
		<s:State name="lostPassword" />
		<s:State name="lostPasswordConfirmation" />
		<s:State name="changePassword" />
	</c:states>
	
	
	<!-- REGISTRATION -->
	<s:Label text.register="Please enter a user name and email."
			 text.registrationWithSite="Please enter a user name, email, site name and title. If you leave the site name and site title blank your username will be used. "
			 
			 top="70"
			 right="20"
			 width="45%"
			 includeIn="register,registrationWithSite" />
	
	<controls:VerticalLine height="60%" horizontalCenter="0" top="20" includeIn="register,registrationWithSite"/>
	
	<s:VGroup left="15" 
				 top="20" 
				 right="20" 
				 bottom="20"
				 gap="10"
				 includeIn="register, registrationWithSite"
				 >
		
		<s:Label text="Username"  styleName="textInputStyles"/>
		<s:TextInput id="newUsernameTextInput" 
					 text="" 
					 prompt="Username"
					 minWidth="220"
					 styleName="textInputStyles"
					 />
		<s:Label text="E-mail"  styleName="textInputStyles"/>
		<s:TextInput id="emailTextInput" 
					 text="" 
					 prompt="Email"
					 minWidth="220"
					 styleName="textInputStyles"
					 />
		
		<!-- registration of site -->
		<s:Label text="Site Name" 
				 styleName="textInputStyles"
				 includeIn="registrationWithSite"/>
		<s:TextInput id="newSiteTextInput" 
					 text="" 
					 prompt="Site name"
					 minWidth="220"
					 styleName="textInputStyles"
					 includeIn="registrationWithSite"
					 />
		<s:Label text="Site Title" 
				 styleName="textInputStyles"
				 includeIn="registrationWithSite"/>
		<s:TextInput id="newSiteTitleTextInput" 
					 text="" 
					 prompt="Title"
					 minWidth="220"
					 styleName="textInputStyles"
					 includeIn="registrationWithSite"
					 />
		
		
		<s:Label id="registrationWarningsLabel" 
				 x="15" y="15" 
				 text="" 
				 fontWeight="bold" 
				 color="red"
				 width="50%"/>
		
		<s:HGroup width="100%" horizontalAlign="right" verticalAlign="baseline">
			<s:Label text="Login" 
					 styleName="stateLabel" 
					 click="goToLoginState()"
					 useHandCursor="true"
					 buttonMode="true"/>
			<s:Label text="Please wait..." 
					 visible="{inProgress}"
					 />
			<s:Spacer width="100%"/>
			<s:Button label="Cancel" 
					  click="cancelButton_clickHandler()"/>
			<s:Button label="Register" 
					  click.register="register()" 
					  click.registrationWithSite="registerUserAndSite()"/>
		</s:HGroup>
		
	</s:VGroup>

	<!-- LOGIN AFTER REGISTRATION -->
	<s:TextArea id="loginAfterRegistrationLabel" 
			 text="A password will be emailed to you. Check your email for login information. If you don't see the email check your spam folder. " 
			 
			 top="30"
			 right="20"
			 width="45%"
			 height="110"
			 includeIn="loginAfterRegistration"
			 editable="false"
			 borderVisible="false"/>

	<!-- LOGIN AT WEBSITE -->
	<s:TextArea id="loginAtWebsiteLabel" 
			 text="You can login using your browser. Click here to continue. When you have logged in switch back to this application." 
			 
			 top="30"
			 right="18"
			 width="330"
			 height="115"
			 focusAlpha="0"
			 includeIn="login"
			 editable="false"
			 click="loginAtWebsiteLabel_clickHandler(event)"
			 borderVisible="false"
			 visible="false"
			 includeInLayout="false"/>
	
	<controls:VerticalLine height="60%" right="360" top="30" includeIn="loginAfterRegistration"/>
	
	<!-- LOGIN -->
	<s:VGroup left="15" 
				 top="20" 
				 right="20"
				 bottom="20"
				 gap="10"
				 includeIn="login"
				 >
		
		<s:Label text="Username" />
		<s:TextInput id="usernameTextInput" 
					 minWidth="200"
					 focusOut="username_focusOutHandler(event)" 
					 prompt="Username"
					 styleName="textInputStyles"
					 />
		<s:Label text="Password"  />
		<s:TextInput id="passwordTextInput"
					 minWidth="200"
					 displayAsPassword="true" 
					 prompt="Password"
					 styleName="textInputStyles"
					 enter="login()"
					 />
		
		<s:Label id="loginWarningsLabel" 
				 x="15" y="15" 
				 text="" 
				 fontWeight="bold" 
				 color="red"
				 width="100%"/>
		
		<s:HGroup width="100%" horizontalAlign="right" verticalAlign="baseline">
			<s:Label text="Register" 
					 styleName="stateLabel" 
					 click="goToRegistrationWithSiteState()"
					 useHandCursor="true"
					 buttonMode="true"/>
			<controls:VerticalLine />
			<s:Label text="Lost Password" 
					 styleName="stateLabel" 
					 click="goToLostPasswordState()"
					 useHandCursor="true"
					 buttonMode="true"/>
			<s:Label text="Logging in..." 
					 visible="{inProgress}"
					 />
			<s:Spacer width="100%"/>
			<s:CheckBox id="rememberLoginCheckbox" label="Remember Me" selected="true" />
			<s:Button id="cancelButton" label="Cancel" click="cancelButton_clickHandler(event)" />
			<s:Button label="Login" click="login()" />
		</s:HGroup>
		
	</s:VGroup>
	
	<!-- LOST PASSWORD -->
	<s:Label text="Please enter your username or email address. You will receive a passkey to create a new password via email." 
			 
			 top="30"
			 right="20"
			 width="45%"
			 includeIn="lostPassword"/>
	
	<controls:VerticalLine height="60%" horizontalCenter="-20" top="20" includeIn="lostPassword"/>
	
	<!-- LOST PASSWORD -->
	<s:VGroup left="15" 
				 top="20" 
				 right="20"
				 bottom="20"
				 gap="10"
				 includeIn="lostPassword"
				 >
		
		<s:Label text="Username or email"  />
		<s:TextInput id="usernameOrEmailTextInput" 
					 text="" 
					 prompt="Username or email"
					  styleName="textInputStyles"
					 width="240" 
					 keyUp="usernameOrEmailTextInput_keyUpHandler(event)"
					 />
		
		
		<s:Label id="lostPasswordWarningsLabel" 
				 x="15" y="15" 
				 text="" 
				 fontWeight="bold" 
				 color="red"
				 width="100%"/>
		
		<s:HGroup width="100%" horizontalAlign="right" verticalAlign="baseline">
			<s:Label text="Login" 
					 styleName="stateLabel" 
					 click="goToLoginState()"
					 useHandCursor="true"
					 buttonMode="true"/>
			<s:Label text="Please wait..." 
					 visible="{inProgress}"
					 />
			<s:Spacer width="100%"/>
			<s:Button id="lostPasswordCancelButton" label="Cancel" click="lostPasswordCancelButton_clickHandler(event)" />
			<s:Button id="lostPasswordButton" label="Get New Password" click="getNewPasswordButton_clickHandler(event)" />
		</s:HGroup>
		
	</s:VGroup>
	
	<!-- LOST PASSWORD CONFIRMATION -->
	
	<s:Label text="Check your email.&#xd;&#xd;A message was sent containing a confirmation code. Enter the code here and choose a new password." 
			 
			 top="70"
			 right="20"
			 width="45%"
			 includeIn="lostPasswordConfirmation"/>
	
	<controls:VerticalLine height="75%" horizontalCenter="-10" top="20" includeIn="lostPasswordConfirmation"/>
	
	<s:VGroup left="15" 
				 top="20" 
				 right="20"
				 bottom="20"
				 gap="10"
				 includeIn="lostPasswordConfirmation"
				 >
		
		<s:Label text="Confirmation Code"  />
		<s:TextInput id="confirmationCodeTextInput" 
					 text="" 
					  styleName="textInputStyles"
					 width="240"
					 />
		<s:Label text="New Password"  />
		<s:TextInput id="newPasswordTextInput" 
					 text="" 
					  styleName="textInputStyles"
					 width="240"
					 displayAsPassword="true"
					 />
		<s:Label text="Confirm Password"  />
		<s:TextInput id="newPasswordTextInput2" 
					 text="" 
					  styleName="textInputStyles"
					 width="240"
					 displayAsPassword="true"
					 />
		
		<s:Button id="generatePasswordButton" 
				  label="Generate Password For Me" 
				  toolTip="It is recommended that you create a random password and not use a password you use regularly"
				  click="generatePasswordButton_clickHandler(event)" />
		
		<s:Label id="changePasswordWarningsLabel" 
				 x="15" y="15" 
				 text="" 
				 fontWeight="bold" 
				 color="red"
				 width="100%"/>
		
		<s:HGroup width="100%" horizontalAlign="right" verticalAlign="baseline">
			<s:Label text="Lost Password" 
					 styleName="stateLabel" 
					 click="goToLostPasswordState()"
					 useHandCursor="true"
					 buttonMode="true"/>
			<s:Label text="Please wait..." 
					 visible="{inProgress}"
					 />
			<s:Spacer width="100%"/>
			<s:Button id="changePasswordButton" label="Change Password" click="changePasswordButton_clickHandler(event)" />
		</s:HGroup>
		
	</s:VGroup>
	
	
	<!-- PASSWORD CHANGED -->
	<s:Label text="Your password has been changed!&#xd;&#xd;Please store it in a safe place. Your password has been filled in for you. You may now login. " 
			 
			 top="50"
			 right="20"
			 width="45%"
			 includeIn="loginAfterPasswordChanged"/>
	
	<controls:VerticalLine height="60%" horizontalCenter="0" top="20" includeIn="loginAfterPasswordChanged"/>
	
	
	
	<!-- LOGOUT -->
	
	<s:VGroup left="15" 
				 top="20" 
				 right="20"
				 bottom="20"
				 gap="10"
				 includeIn="logout"
				 >
		
		<s:Label text="Are you sure you want to logout?"  />
		
		<s:Spacer height="100%"/>
		
		<s:HGroup width="100%" horizontalAlign="right" verticalAlign="baseline">
			
			<s:Label text="Logging out..." 
					 visible="{inProgress}"
					 includeInLayout="{inProgress}"
					 />
			<s:Label id="logoutWarningsLabel" 
					 x="15" y="15" 
					 text="" 
					 fontWeight="bold" 
					 color="red"
					 width="100%"/>
			<s:Spacer width="100%"/>
			<s:Button id="cancelLogoutButton" label="Cancel" click="cancelButton_clickHandler(event)" />
			<s:Button label="Logout" click="logout()" />
		</s:HGroup>
		
	</s:VGroup>
</windows:AnimatedPanelWindow>
