<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fc="com.flexcapacitor.controls.*"
		 xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:utils="com.flexcapacitor.utils.*" 
		 xmlns:handlers="com.flexcapacitor.handlers.*"
		 xmlns:supportClasses="com.flexcapacitor.effects.supportClasses.*"
		 xmlns:local="*"
		 
		 width="100%" 
		 creationComplete="group1_creationCompleteHandler(event)"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.utils.ArrayUtils;
			
			import mx.core.IVisualElementContainer;
			import mx.events.FlexEvent;
			
			import spark.components.Group;
			import spark.events.IndexChangeEvent;
			import spark.primitives.supportClasses.GraphicElement;
			
			private var radiate:Radiate = Radiate.getInstance();
			private var _target:Object;
			private static const BLEND_MODE:String = "blendMode";
			
			public function get target():Object {
				return _target;
			}

			public function set target(value:Object):void {
				if (_target == value) return;
				
				if (value is DisplayObject || value is GraphicElement) {
					_target = value;
					updateSelectedBlendMode();
				}
				else {
					_target = null;
					blendModeCombo.selectedIndex = -1;
				}
			}

			protected function applyPropertiesToTargetHandler(event:IndexChangeEvent = null):void {
				
				if (target) {
					var value:String = blendModeCombo.selectedItem.value;
					if (value=="auto" && !(target is IVisualElementContainer)) {
						// trying to assign a display object to "auto" causes error
						// ArgumentError: Error #2008: Parameter blendMode must be one of the accepted values.
						// group and graphic element allows "auto", display object does not
					}
					Radiate.setProperty(target, BLEND_MODE, value);
				}
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
				
				if (radiate.target) {
					target = radiate.target;
				}
			}
			
			protected function targetChangeHandler(event:RadiateEvent):void {
				target = event.selectedItem;
			}
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				var displayObject:DisplayObject = event.selectedItem as DisplayObject;
				var currentBlendMode:String;
				var currentIndex:int;
				
				var properties:Array = event.properties || event.styles;
				
				for (var i:int;i<properties.length;i++) {
					if (properties && properties[i]==BLEND_MODE) {
						updateSelectedBlendMode();
						break;
					}
				}
			}
			
			
			/**
			 * Updates the list to reflect the current blend mode of the target
			 * */
			private function updateSelectedBlendMode():void {
				var displayObject:DisplayObject = target as DisplayObject;
				var groupObject:Group = target as Group;
				var graphicElement:GraphicElement = target as GraphicElement;
				var currentBlendMode:String;
				var currentIndex:int;
				var changed:Boolean;
				
				if (graphicElement || groupObject) {
					if (blendModesCollection.getItemAt(0)!=firstItem) {
						blendModesCollection.addItemAt(firstItem, 0);
						changed = true;
					}
				}
				else {
					if (blendModesCollection.getItemAt(0)==firstItem) {
						blendModesCollection.removeItemAt(0);
						changed = true;
					}
				}
				
				if (changed) {
					blendModesCollection.refresh();
				}
				
				if (displayObject || groupObject) {
					currentBlendMode = displayObject.blendMode;
					currentIndex = ArrayUtils.getItemIndex(blendModesCollection, currentBlendMode, "value") as int;
					blendModeCombo.selectedIndex = currentIndex;
				}
				else if (graphicElement) {
					currentBlendMode = graphicElement.blendMode;
					currentIndex = ArrayUtils.getItemIndex(blendModesCollection, currentBlendMode, "value") as int;
					blendModeCombo.selectedIndex = currentIndex;
				}
				
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!--
		
		// If one of the non-native Flash blendModes is set, 
		// record the new value and set the appropriate 
		// blendShader on the display object.
		
		value =="colordodge" 
		value =="colorburn" 
		value =="exclusion" 
		value =="softlight" 
		value =="hue"
		value =="saturation" 
		value =="color"
		value =="luminosity"
		
		There is no "auto" blendMode. But it is available on Groups.
		Should remove and add it if Group or not group.
		
		UIComponent:
		add,alpha,darken,difference,erase,hardlight,invert,layer,lighten,multiply,normal,subtract,screen,
		overlay,colordodge,colorburn,exclusion,softlight,hue,saturation,color,luminosity
		
		Group: 
		auto,add,alpha,darken,difference,erase,hardlight,invert,layer,lighten,multiply,normal,subtract,screen,
		overlay,colordodge,colorburn,exclusion,softlight,hue,saturation,color,luminosity
		
		From Group.as: 
		
		*  A value from the BlendMode class that specifies which blend mode to use. 
		*  A bitmap can be drawn internally in two ways. 
		*  If you have a blend mode enabled or an external clipping mask, the bitmap is drawn 
		*  by adding a bitmap-filled square shape to the vector render. 
		*  If you attempt to set this property to an invalid value, 
		*  Flash Player or Adobe AIR sets the value to <code>BlendMode.NORMAL</code>. 
		*
		*  <p>A value of "auto" (the default) is specific to Group's use of 
		*  blendMode and indicates that the underlying blendMode should be 
		*  <code>BlendMode.NORMAL</code> except when <code>alpha</code> is not
		*  equal to either 0 or 1, when it is set to <code>BlendMode.LAYER</code>. 
		*  This behavior ensures that groups have correct
		*  compositing of their graphic objects when the group is translucent.</p>
		* 
		-->
		
		<fx:Array id="blendModes">
			<fx:Object id="firstItem" label="Auto" value="auto"/>
			<fx:Object label="Add" value="add"/>
			<fx:Object label="Alpha" value="alpha"/>
			<fx:Object label="Color" value="color"/>
			<fx:Object label="Color Burn" value="colorburn"/>
			<fx:Object label="Color Dodge" value="colordodge"/>
			<fx:Object label="Darken" value="darken"/>
			<fx:Object label="Difference" value="difference"/>
			<fx:Object label="Erase" value="erase"/>
			<fx:Object label="Exclusion" value="exclusion"/>
			<fx:Object label="Hardlight" value="hardlight"/>
			<fx:Object label="Hue" value="hue"/>
			<fx:Object label="Invert" value="invert"/>
			<fx:Object label="Layer" value="layer"/>
			<fx:Object label="Lighten" value="lighten"/>
			<fx:Object label="Luminosity" value="luminosity"/>
			<fx:Object label="Multiply" value="multiply"/>
			<fx:Object label="Normal" value="normal"/>
			<fx:Object label="Overlay" value="overlay"/>
			<fx:Object label="Saturation" value="saturation"/>
			<fx:Object label="Screen" value="screen"/>
			<fx:Object label="Softlight" value="softlight"/>
			<fx:Object label="Subtract" value="subtract"/>
		</fx:Array>
		
		<s:ArrayCollection id="blendModesCollection" source="{blendModes}"/>
	</fx:Declarations>

	<s:DropDownList id="blendModeCombo"
					interactionMode="mouse"
					width="100%"
					left="4"
					change="applyPropertiesToTargetHandler(event)"
					focusOut="applyPropertiesToTargetHandler()"
					dataProvider="{blendModesCollection}">
	</s:DropDownList>

</s:Group>
