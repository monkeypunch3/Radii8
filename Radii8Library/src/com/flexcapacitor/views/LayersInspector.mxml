<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:views="com.flexcapacitor.views.*"
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:core="com.flexcapacitor.effects.core.*" 
		 
		 width="220" 
		 height="100%"
		 implements="com.flexcapacitor.views.IInspector" 
		 >
	
	<!-- 
	
	UPDATE OCT 2015 
	- might not be as buggy since refactoring the document.componentDescription getter 
	- that function was recreating instances of the componentDescriptions. it no longer recreates them
	
	
	THIS LAYERS TREE DRAGGING AND DROPPING IS REALLY BUGGY 
	- the branch nodes don't accept items being dragged into them for the most part 
	unless they are open already or have items already in them
	- once an item is added it shows up double. only by switching tabs does the
	layers get back to the right order and right count. UPDATE: Fixed by using call later
	or timeout, don't remember, but still hacky
	Added a hgroup to a bordercontainer and this error: 
	
	Error: Unknown Property: '-1'.
	at mx.collections::ListCollectionView/http://www.adobe.com/2006/actionscript/flash/proxy::getProperty()[E:\dev\4.y\frameworks\projects\framework\src\mx\collections\ListCollectionView.as:870]
	at mx.controls.treeClasses::HierarchicalViewCursor/get current()[E:\dev\4.y\frameworks\projects\mx\src\mx\controls\treeClasses\HierarchicalViewCursor.as:212]
	at mx.controls.treeClasses::HierarchicalViewCursor/collectionChangeHandler()[E:\dev\4.y\frameworks\projects\mx\src\mx\controls\treeClasses\HierarchicalViewCursor.as:869]
	at flash.events::EventDispatcher/dispatchEventFunction()
	-->
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.model.AccessorMetaData;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			import com.flexcapacitor.views.supportClasses.LayersDataDescriptor;
			
			import mx.collections.ArrayCollection;
			import mx.core.mx_internal;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import mx.states.AddItems;
			
			import spark.components.Application;
			
			private var rootDisplayObject:DisplayObject;
			private var displayList:Array = [];
			private var radiate:Radiate;
			private var designDocument:IEventDispatcher;
			
			protected var isBranchDescriptor:LayersDataDescriptor;
			
			[Bindable]
			public var components:ArrayCollection = new ArrayCollection();
			
			private var _target:*;
			
			public function get target():* {
				return _target;
			}
			
			[Bindable]
			public function set target(value:*):void {
				_target = value;
			}
			
			public function activate():void {
				radiate = Radiate.instance;
				
				if (!isBranchDescriptor) {
					isBranchDescriptor = new LayersDataDescriptor();
					componentListTree.dataDescriptor = isBranchDescriptor;
				} 
				
				updateComponentDisplayList();
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_REVERTED, documentChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.ADD_ITEM, addItemChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.MOVE_ITEM, addItemChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.REMOVE_ITEM, addItemChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler, false, 0, true);
				
				if (radiate.target) {
					updateTarget(radiate.target);
				}
			}
			
			public function deactivate():void {
				if (radiate) {
					
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChangeHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_REVERTED, documentChangeHandler);
					radiate.removeEventListener(RadiateEvent.ADD_ITEM, addItemChangeHandler);
					radiate.removeEventListener(RadiateEvent.MOVE_ITEM, addItemChangeHandler);
					radiate.removeEventListener(RadiateEvent.REMOVE_ITEM, addItemChangeHandler);
					radiate.removeEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
					
					target = null;
				}
			}
			
			/**
			 * Found on blog by Flex SDK developer (source).
			 * Not used. For reference.
			 */
			public function sortDisplayByDepth(item:Object, parentItem:Object = null, depth:int = 0):void {
				
				
				if (displayList.length <= depth) {
					displayList.push(new ArrayCollection());
				}
				
				
				if ("numElements" in item) {
					for (var i:int = 0; i < item.numElements; i++) {
						var child:Object = item.getElementAt(i);
						sortDisplayByDepth(child, parentItem, depth + 1);
						displayList[depth].push(child);
					}
				}
				
			}
			
			
			private function labelFunction(data:Object):String {
				var identity:String =  ClassUtils.getIdentifier(data.instance);
				
				if (identity) {
					return data.name + " (" + identity + ")";
				}
				return data.name;
			}
			
			/**
			 * When the target changes reselect it 
			 * */
			protected function targetChangeHandler(event:RadiateEvent):void {
				updateTarget(event.selectedItem);
			}
			
			/**
			 * 
			 * */
			public function updateTarget(selectedItem:Object):void {
				var item:ComponentDescription = componentListTree.selectedItem as ComponentDescription;
				var collection:ArrayCollection = componentListTree.dataProvider as ArrayCollection;
				var rootApplicationDescription:ComponentDescription;
				var targetDescription:ComponentDescription;
				var parent:ComponentDescription;
				
				target = selectedItem;
				
				if (collection.length==0) {
					updateComponentDisplayList();
					collection = componentListTree.dataProvider as ArrayCollection;
				}
				
				if (target && collection.length) {
					rootApplicationDescription = collection.getItemAt(0) as ComponentDescription;
					
					if (rootApplicationDescription) {
						targetDescription = DisplayObjectUtils.getTargetInComponentDisplayList(target, rootApplicationDescription);
						
						if (targetDescription) {
							
							parent = targetDescription.parent;
							
							while (parent) {
								
								// open item if not open
								if (!componentListTree.isItemOpen(parent)) {
									componentListTree.expandItem(parent, true, false, false);
									componentListTree.validateNow();
								}
								
								parent = parent.parent;
							}
							
							
							// NOTE: IMPORTANT: READ: the open items can't be reassigned references. they have to be actual items
							// ALSO we are resetting the dataProvider so it's not going to find the items
							for (var i:int;i<length;i++) {
								//displayListTree.expandItem(openItems[i], true, false, false);
								//trace("expanding");
							}
							
							componentListTree.selectedItem = targetDescription;
						}
					}
				}
				
				//openAllItems();
				updateTreeHeight();
				scrollIntoView();
				
				// update alpha
				updateAlphaProperty();
				updateLockedProperty();
				
			}
			
			/**
			 * Open all items
			 * */
			public function openAllItems():void {
				var item:ComponentDescription = componentListTree.selectedItem as ComponentDescription;
				var collection:ArrayCollection = componentListTree.dataProvider as ArrayCollection;
				var rootApplicationDescription:ComponentDescription;
				var targetDescription:ComponentDescription;
				var parent:ComponentDescription;
				
				if (item && target!=item.instance) {
					//updateComponentDisplayList();
				}
				
				if (collection.length==0) {
					collection = componentListTree.dataProvider as ArrayCollection;
				}
				
				if (collection.length<1) return;
				rootApplicationDescription = collection.getItemAt(0) as ComponentDescription;
				
				for (var i:int;i<rootApplicationDescription.children.length;i++) {
					componentListTree.expandChildrenOf(rootApplicationDescription.children[i], true);
					componentListTree.validateNow();
				}
				
			}
			
			/**
			 * Close all items
			 * */
			public function closeAllItems():void {
				var item:ComponentDescription = componentListTree.selectedItem as ComponentDescription;
				var collection:ArrayCollection = componentListTree.dataProvider as ArrayCollection;
				var rootApplicationDescription:ComponentDescription;
				var targetDescription:ComponentDescription;
				var parent:ComponentDescription;
				
				if (item && target!=item.instance) {
					//updateComponentDisplayList();
				}
				
				if (collection.length==0) {
					collection = componentListTree.dataProvider as ArrayCollection;
				}
				
				if (collection.length<1) return;
				rootApplicationDescription = collection.getItemAt(0) as ComponentDescription;
				
				for (var i:int;i<rootApplicationDescription.children.length;i++) {
					componentListTree.expandChildrenOf(rootApplicationDescription.children[i], false);
					componentListTree.validateNow();
				}
				
			}
			
			/**
			 * 
			 * */
			protected function documentChangeHandler(event:Event):void {
				// commented out the check because of document reverted event (which creates new instances)
				//if (designDocument!=radiate.selectedDocument) {
					updateComponentDisplayList(false);
				//}
				
			}
			
			/**
			 * Select target
			 * */
			protected function displayListTree_changeHandler(event:ListEvent):void {
				var item:ComponentDescription = componentListTree.selectedItem as ComponentDescription;
				
				if (item) {
					radiate.setTarget(item.instance as IEventDispatcher, true);
				}
				
				if (item && !(item.instance is Application)) {
					documentItemRenderer.selected = false;
				}
				
				/* 
				if (!preventChange) {
				}
				else {
					displayListTree.selectable
				}
				
				preventChange = false; */
			}
			
			/**
			 * Recreate the display list and open all items.
			 * */
			private function updateComponentDisplayList(preserveOpenItems:Boolean = true):void {
				var openItems:Object;
				var iDocument:IDocument;
				var display:Object;
				var length:int;
				
				iDocument = radiate.selectedDocument;
				
				if (iDocument) {
					documentItemRenderer.data = iDocument.componentDescription;
				}
				
				if (!iDocument) return;
				
				openItems = componentListTree.openItems;
				
				// we need to create a list of the instances of open items
				// componentDescription.instance not componentDescription
				
				// we could check for the target and update that branch
				display = iDocument.componentDescription;
				componentListTree.dataProvider = display;
				
				// 
				//DisplayObjectUtils.walkDownTree(application as IVisualElement, traceTree);
				
				
				if (preserveOpenItems) {
					componentListTree.validateNow();
					
					/* for each (var item:ComponentDescription in openItems) {
						displayListTree.expandItem(item, true, false, false);
						//trace("expanding");
					}
					 */
					length = openItems.length;
					
					// NOTE: IMPORTANT: READ: the open items can't be reassigned references. they have to be actual items
					// ALSO we are resetting the dataProvider so it's not going to find the items if we do that
					for (var i:int;i<length;i++) {
						if (!componentListTree.isItemOpen(openItems[i])) {
							componentListTree.expandItem(openItems[i], true, false, false);
						}
						//trace("expanding");
					}
				}
			}
			
			public function traceTree(element:Object):void {
				//trace("element="+NameUtil.getUnqualifiedClassName(element));
			}
			
			/**
			 * 
			 * */
			private function findTargetInDisplayList1(target:Object, parentItem:ComponentDescription, depth:int = 0):ComponentDescription {
				var length:int = parentItem.children ? parentItem.children.length : 0;
				var possibleItem:ComponentDescription;
				var item:ComponentDescription;
				var itemFound:Boolean;
				
				for (var i:int; i < length; i++) {
					item = parentItem.children.getItemAt(i) as ComponentDescription;
					
					if (item && item.instance==target) {
						itemFound = true;
						break;
					}
					
					if (item.children) {
						possibleItem = findTargetInDisplayList1(target, item, depth + 1);
						
						if (possibleItem) {
							itemFound = true;
							item = possibleItem;
							break;
						}
					}
					
				}
				
				if (itemFound) return item;
				
				return null;
			}
			
			/**
			 * Add item handler
			 * */
			protected function addItemChangeHandler(event:RadiateEvent):void {
				updateComponentDisplayList();
			}
			
			
			/**
			 * Move item handler
			 * */
			protected function moveItemChangeHandler(event:RadiateEvent):void {
				updateComponentDisplayList();
			}
			
			/**
			 * Item open handler
			 * */
			protected function displayListTree_itemOpenHandler(event:TreeEvent):void {
				updateTreeHeight()
			}
			
			/**
			 * 
			 * */
			public function getTotalRowCount(item:ComponentDescription, count:int = 0):int {
				
				if (item.children && item.children.length>0) {
				// NOTE: IMPORTANT: READ: the open items can't be reassigned references. they have to be actual items
				// ALSO we are resetting the dataProvider so it's not going to find the items if we do that
				for (var i:int;i<item.children.length;i++) {
					count++;
					if (componentListTree.isItemOpen(item.children[i])) {
						count = getTotalRowCount(item.children[i] as ComponentDescription, count);
					}
				}
				}
				return count;
			}
			
			/**
			 * Resize the tree to be as high as all open items
			 * */
			public function updateTreeHeight():void {
				var newHeight:int = componentListTree.rowCount * componentListTree.rowHeight;
				var numChildren:int = componentListTree.numChildren;
				var openItems:Object = componentListTree.openItems;
				var openItemsLength:int = componentListTree.openItems.length;
				var dataProvider:Object = componentListTree.dataProvider;
				var dataProviderLength:int = componentListTree.dataProvider.length;
				var item:ComponentDescription;
				var count:int = 2; // application plus one for easier drop on last row
				
				var newCount:int = getTotalRowCount(dataProvider[0] as ComponentDescription, count);
				
				newHeight = newCount * componentListTree.rowHeight;
				// ArgumentError: Error #2004: One of the parameters is invalid.
				//	at flash.display::Graphics/drawRect()
				//displayListTree.setActualSize(NaN, newHeight);
				//displayListTree.height = newHeight;
				componentListTree.explicitHeight = newHeight;
			}
			
			// THIS IS ALL TO HANDLE SCROLLING INSIDE ANOTHER SCROLLER THAT HAS TOUCH INTERACTION
			// SPARK COMPONENTS DON'T HAVE THIS PROBLEM
			private var mouseDownLocation:int;
			public var preventChange:Boolean;
			
			protected function displayListTree_mouseDownHandler(event:MouseEvent):void {
				mouseDownLocation = event.stageY;
				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler, false, 0, true);
				stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);
			}
			
			protected function mouseMoveHandler(event:MouseEvent):void {
				
				var diff:int = Math.abs(event.stageY - mouseDownLocation);
				
				if (diff>10) {
					componentListTree.selectable = false;
				}
			}
			
			protected function mouseUpHandler(event:MouseEvent):void {
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				componentListTree.selectable = true;
			}
			
			protected function displayListTree_itemCloseHandler(event:TreeEvent):void {
				updateTreeHeight();
			}
			
			private function scrollIntoView():void {
				
				if (componentListTree.selectedIndex>-1) {
					componentListTree.scrollToIndex(componentListTree.selectedIndex);
				}
			}
			
			/**
			 * 
			 * */
			protected function displayListTree_dragDropHandler(event:DragEvent):void {
				//Radiate.info("Drag drop handler");
				event.draggedItem;
				event.target;
				event.relatedObject;
				
				/*
	            Pay attention at mx_internal namespace :
	            Behaviour could change in the next flex version.
	            Drop data structure.
	            _dropData = { 
	                parent: parent, 
	                index: index, 
	                localX: event.localX, 
	                localY: event.localY, 
	                emptyFolder: emptyFolder, 
	                rowHeight: rowHeight, 
	                rowIndex: rowNum };
	            */
	            var dropData:Object = componentListTree.mx_internal::_dropData;
	            var dropParent:Object = dropData.parent;
	            var dropIndex:int = dropData.index;
	            var rowIndex:int = dropData.rowIndex;
	            var draggedElement:Object = (event.dragSource.dataForFormat("treeItems") as Array)[0];
				var draggedElementParent:Object = draggedElement.parent;
				var canDragOutOfParent:Boolean = !componentListTree.showRoot;
				var currentIndex:int;
				
	            if (!canDragOutOfParent && 
					draggedElementParent != dropParent) {
					
	                // element is an item and parent is different => can not drop                                        
	                event.preventDefault();
	                componentListTree.hideDropFeedback(event);
					return;
	            }

	            // you can also play with
	            //var dropIndex:int = displayListTree.calculateDropIndex(event);
	            //var itemIndex:int = displayListTree.getItemIndex(dropIndex);
				
	            // but it is a little more complicated to find 
	            // the real parent because we haven't drop indicator 
	            // information (child or parent position).
	
	            // I did not use xml element id but it is also possible
	            // parent.id != draggedElement.parent().id
				
				// some reason there is a bug when on the application
				// we have to subtract one from the drop index if it's lower than it's current index
				if (dropParent && 
					draggedElement.parent == dropParent && 
					dropParent.instance is Application) {
					currentIndex = ComponentDescription(dropParent).children.getItemIndex(draggedElement);
					
					// when dragging to an index after our index we have to subtract one
					if (currentIndex<dropIndex) {
						dropIndex--;
						//Radiate.info("Lowering index");
					}
				}
				
				
				// make sure application can't be dropped into itself
				if (draggedElement.instance is Application) {
	                event.preventDefault();
	                componentListTree.hideDropFeedback(event);
					return;
				}
				
				// make sure container can't be dropped into child container
				if (draggedElement.instance is DisplayObjectContainer &&
					dropParent && 
					dropParent.instance is DisplayObjectContainer &&
					DisplayObjectContainer(draggedElement.instance).contains(dropParent.instance)) {
					
	                event.preventDefault();
	                componentListTree.hideDropFeedback(event);
					return;
				}
				
				if (dropParent) {
					/*
					Radiate.info("drop index:"+ dropIndex);
					Radiate.info("row  index:" + rowIndex);
					Radiate.info("item index:" + droppingIndex);*/
					
					Radiate.moveElement(draggedElement.instance, dropParent.instance, [], [], null, 
										RadiateEvent.MOVE_ITEM, AddItems.LAST, null, dropIndex);
					
					radiate.setTarget(draggedElement.instance);
				}
				else {
					
					// if not showing root then allow drop
					if (canDragOutOfParent && dropParent==null) {
						dropParent = ArrayCollection(componentListTree.dataProvider).getItemAt(0);
						currentIndex = ComponentDescription(dropParent).children.getItemIndex(draggedElement);
						
						// when dragging to an index after our index we have to subtract one
						if (currentIndex<dropIndex && dropParent.instance==draggedElement.parent.instance) {
							dropIndex--;
							//Radiate.info("Lowering index");
						}
						
						Radiate.moveElement(draggedElement.instance, dropParent.instance, [], [], null, 
										RadiateEvent.MOVE_ITEM, AddItems.LAST, null, dropIndex);
					}
					else {
							
		                // element is an item and parent is different => can not drop                                        
		                event.preventDefault();
		                componentListTree.hideDropFeedback(event);
					}
				}
				
				doThingsLater.play();
				
			}
			
			protected function displayListTree_dragCompleteHandler(event:DragEvent):void {
				
			}
			
			/**
			 * Handle when dragging just outside of tree
			 * */
			protected function displayListTree_dragOverHandler(event:DragEvent):void {
				
	            var dropData:Object = componentListTree.mx_internal::_dropData;
				
				// TypeError: Error #1009: Cannot access a property or method of a null object reference.
				// we dragged outside of the design area so dropdata is null
	            var dropParent:Object = dropData ? dropData.parent : null;
				
                // dragging outside of tree                                      
	            if (dropParent==null) {
					// prevents dragging from working after this point
					//event.preventDefault(); 
					//displayListTree.hideDropFeedback(event);
	            }
			}
			
			protected function expandAllNodes_clickHandler(event:MouseEvent):void {
				openAllItems();
			}
			
			protected function closeAllNodes_clickHandler(event:MouseEvent):void {
				closeAllItems();
			}
			
			protected function removeItem_clickHandler(event:MouseEvent):void {
				if (componentListTree.selectedItem) {
					var componentDescription:ComponentDescription = componentListTree.selectedItem as ComponentDescription;
					Radiate.removeElement(componentDescription.instance);
				}
			}
			
			public function updateAlphaProperty():void {
				var textAccessor:AccessorMetaData = ClassUtils.getMetaDataOfProperty(target, "alpha");

				alphaRenderer.data = textAccessor;
			}
			
			public function updateLockedProperty():void {
				var document:IDocument = radiate.selectedDocument;
				var componentDescription:ComponentDescription = document.getItemDescription(target);
				lockedItem.selected = componentDescription ? componentDescription.locked : false;
			}
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				callLater(updateAlphaProperty);
			}
			
			protected function lockItem_clickHandler(event:MouseEvent):void {
				
				var result:Boolean = Radiate.lockComponent(target, lockedItem.selected);
				
				if (!result) {
					Radiate.info("Unable to lock the selected item");
				}
			}
			
			protected function documentItemRenderer_clickHandler(event:MouseEvent):void
			{
				componentListTree.selectedIndex = -1;
				componentListTree.validateProperties();
				documentItemRenderer.selected = true;
				radiate.setTarget(radiate.selectedDocument.instance);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<core:CallMethod id="doThingsLater" method="activate" startDelay="50"/>
	</fx:Declarations>
	
	
	<renderers:LayersRenderer id="documentItemRenderer" 
							  click="documentItemRenderer_clickHandler(event)" 
							  autoDrawBackground="true"
							  height="20"/>
	
	<c:HorizontalLine  />
	
	<s:Scroller id="scroller" width="100%" height="100%"
				top="0"
				bottom="0">
		<s:Group width="100%" height="100%">
			<mx:Tree id="componentListTree" 
					 width="100%"
					 focusAlpha="0"
					 minHeight="50"
					 itemOpen="displayListTree_itemOpenHandler(event)"
					 itemClose="displayListTree_itemCloseHandler(event)"
					 change="displayListTree_changeHandler(event)"
					 showRoot="false"
					 dataProvider="{components}"
					 labelFunction="labelFunction"
					 verticalScrollPolicy="off"
					 horizontalScrollPolicy="auto"
					 rollOverColor="#ffffff"
					 selectionColor="#d8d8d8"
					 useRollOver="false"
					 borderVisible="false"
					 indentation="16"
					 dragEnabled="true"
					 dropEnabled="true"
					 dragMoveEnabled="true"
					 itemRenderer="com.flexcapacitor.views.renderers.LayersRenderer"
					 mouseDown="displayListTree_mouseDownHandler(event)"
					 dragOver="displayListTree_dragOverHandler(event)"
					 dragDrop="displayListTree_dragDropHandler(event)"
					 dragComplete="displayListTree_dragCompleteHandler(event)"
					 >

				
			</mx:Tree>
		</s:Group>
	</s:Scroller>
	
	
	<s:HGroup width="100%"
			 height="32"
			 minHeight="28"
			 verticalAlign="middle"
			 paddingRight="8"
			 paddingLeft="8"
			 paddingBottom="8"
			 paddingTop="8"
			 >
		<renderers:NumberRenderer id="alphaRenderer" 
								  width="54" 
								  showClearButton="false" 
								  snapInterval="0"
								  toolTip="Alpha"
								  focusAlpha="0"/>
		<c:SolidFillToggleButton id="lockedItem" 
								 toolTip="Lock position and prevent selection"
								 click="lockItem_clickHandler(event)"
								 label="Locked"
								 />
		<!--							  source="{Radii8LibraryAssets.locked}" -->
		<views:BlendMode id="blendModeGroup" minWidth="100" toolTip="Blend mode"/>
		<s:Spacer width="100%"/>
		<c:BeveledImageButton id="closeAllNodes" 
					   source="{Radii8LibraryAssets.treeViewClosed}" 
					   toolTip="Close All Layers"
					   click="closeAllNodes_clickHandler(event)"
					   />
		<c:BeveledImageButton id="expandAllNodes" 
					   source="{Radii8LibraryAssets.treeViewOpen}" 
					   toolTip="Expand All Layers"
					   click="expandAllNodes_clickHandler(event)"
					   />
		<c:BeveledImageButton id="removeItem" 
							  source="{Radii8LibraryAssets.trashCan}" 
							  toolTip="Remove"
							  click="removeItem_clickHandler(event)"
							  />
	</s:HGroup>
	
</s:VGroup>
