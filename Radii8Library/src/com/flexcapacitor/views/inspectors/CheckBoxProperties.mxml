<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="com.flexcapacitor.views.IInspector" 
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 styleName="inspectablePanel"
		 width="100%">
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.utils.ClassUtils;
			
			import org.as3commons.lang.ArrayUtils;
			
			public var radiate:Radiate;
			public var target:Object;
			public var data:Object;
			
			
			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.instance;
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, propertyChangeHandler, false, 0, true);
				
				if (radiate.target) {
					target = radiate.target;
				}
				
				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange);
					radiate.removeEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
					radiate.removeEventListener(RadiateEvent.HISTORY_CHANGE, propertyChangeHandler);
				}
			}
			
			protected function handleTargetChange(event:RadiateEvent):void {
				if (target!=event.selectedItem) {
					target = event.selectedItem;
					update();
				}
			}
			
			public function update():void {
				labelRenderer.data = ClassUtils.getMetaDataOfProperty(target, "label");
				labelPlacementRenderer.data = ClassUtils.getMetaDataOfStyle(target, "labelPlacement");
				gapRenderer.data = ClassUtils.getMetaDataOfProperty(target, "gap");
				selectedRenderer.data = ClassUtils.getMetaDataOfProperty(target, "selected");
			}
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				if (event.type==RadiateEvent.PROPERTY_CHANGED) {
					if (ArrayUtils.containsAny(relevantProperties, event.propertiesAndStyles)) {
						callLater(update);
					}
					else {
						return;
					}
				}
				callLater(update);
				
			}
			
			
			public var relevantProperties:Array = ["label", "labelPlacement", "gap", "selected"];
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:TileGroup width="100%" columnAlign="left" columnWidth="118" verticalAlign="middle" requestedColumnCount="2">
		<s:Label text="Label" styleName="inspectablePanelLabel" />
		<renderers:TextRenderer id="labelRenderer" height="24" width="100%"/>
		
		<s:Label text="Gap" styleName="inspectablePanelLabel"/>
		<renderers:NumberRenderer id="gapRenderer" height="24" stepSize="1" />
		
		<s:Label text="Label Placement" styleName="inspectablePanelLabel"/>
		<renderers:DropDownListRenderer id="labelPlacementRenderer" height="24" minWidth="160"/>
		
		<s:Label text="Selected" styleName="inspectablePanelLabel"/>
		<renderers:BooleanRenderer id="selectedRenderer" height="24" minWidth="132" />
	</s:TileGroup>
</s:Group>
