<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="com.flexcapacitor.views.IInspector" 
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 
		 styleName="inspectablePanel"
		 width="100%">
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.utils.ClassUtils;
			
			import org.as3commons.lang.ArrayUtils;
			
			public var radiate:Radiate;
			public var target:Object;
			public var data:Object;
			
			public var fonts:Array;
			
			public function activate():void {
				radiate = Radiate.getInstance();
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, propertyChangeHandler, false, 0, true);
				
				if (radiate.target) {
					target = radiate.target;
				}
				
				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange);
					radiate.removeEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
					radiate.removeEventListener(RadiateEvent.HISTORY_CHANGE, propertyChangeHandler);
				}
			}
			
			protected function handleTargetChange(event:RadiateEvent):void {
				if (target!=event.selectedItem) {
					target = event.selectedItem;
					update();
				}
			}
			
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				if (event.type==RadiateEvent.PROPERTY_CHANGED) {
					if (ArrayUtils.containsAny(relevantProperties, event.propertiesAndStyles)) {
						callLater(update);
					}
					else {
						return;
					}
				}
				
				callLater(update);
			}
			
			public function update():void {
				textRenderer.data = ClassUtils.getMetaDataOfProperty(target, "text");
				promptRenderer.data = ClassUtils.getMetaDataOfProperty(target, "prompt");
				heightInLinesRenderer.data = ClassUtils.getMetaDataOfProperty(target, "heightInLines");
				widthInCharsRenderer.data = ClassUtils.getMetaDataOfProperty(target, "widthInChars");
				horizontalScrollPolicyRenderer.data = ClassUtils.getMetaDataOfStyle(target, "horizontalScrollPolicy");
				verticalScrollPolicyRenderer.data = ClassUtils.getMetaDataOfStyle(target, "verticalScrollPolicy");
			}
			
			public var relevantProperties:Array = ["text", "prompt", "heightInLines", "widthInChars", 
													"horizontalScrollPolicy", "verticalScrollPolicy"];
			
		]]>
	</fx:Script>
	
	<s:TileGroup width="100%" columnAlign="left" columnWidth="120" verticalAlign="middle" requestedColumnCount="2">
		
		<s:Label text="Text" styleName="inspectablePanelLabel"/>
		<renderers:TextRenderer id="textRenderer"  height="24"/>
		
		<s:Label text="Prompt" styleName="inspectablePanelLabel" />
		<renderers:TextRenderer id="promptRenderer" height="24" />
	
		<s:Label text="Height in lines" styleName="inspectablePanelLabel"/>
		<renderers:NumberRenderer id="heightInLinesRenderer" stepSize="1"/>
	
		<s:Label text="Width in characters" styleName="inspectablePanelLabel"/>
		<renderers:NumberRenderer id="widthInCharsRenderer" stepSize="1"/>
	
		<s:Label text="Horizontal Scroll Policy" styleName="inspectablePanelLabel"/>
		<renderers:DropDownListRenderer id="horizontalScrollPolicyRenderer" />
	
		<s:Label text="Vertical Scroll Policy" styleName="inspectablePanelLabel"/>
		<renderers:DropDownListRenderer id="verticalScrollPolicyRenderer" />
	</s:TileGroup>
</s:Group>
