<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 xmlns:local="*"
		 
		 show="group1_showHandler(event)"
		 creationComplete="group1_showHandler(event)"
		 implements="com.flexcapacitor.views.IInspector" 
		 styleName="inspectablePanel"
		 >
	<!--
	
		ArgumentError: Error #2004: One of the parameters is invalid.
		be sure to add the style styleName="inspectablePanel"
	
	-->
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			
			import flash.filters.DisplacementMapFilterMode;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import org.as3commons.lang.ArrayUtils;

			public var radiate:Radiate;
			public var target:Object;
			public var data:Object;
			
			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.getInstance();
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler, false, 0, true);
				
				if (selectedTarget) {
					target = selectedTarget;
				}
				else if (radiate.target) {
					target = radiate.target;
				}
				
				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange);
					radiate.removeEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
				}
			}
			
			protected function handleTargetChange(event:RadiateEvent):void {
				
				if (event.subSelectedItem) {
					target = event.subSelectedItem;
				}
				else if (target!=event.selectedItem) {
					target = event.selectedItem;
					update();
				}
			}
			
			public function update():void {
				
				if (modeRenderer.formatsCollection==null) {
					var formats:Array = [];
					formats.push(DisplacementMapFilterMode.CLAMP);
					formats.push(DisplacementMapFilterMode.COLOR);
					formats.push(DisplacementMapFilterMode.IGNORE);
					formats.push(DisplacementMapFilterMode.WRAP);
					
					modeRenderer.formatsCollection = new ArrayCollection(formats);
				}
				
				if (mapPointRenderer.defaultValue==null) {
					mapPointRenderer.defaultValue = new Point();
				}
				
				if (mapBitmapRenderer.defaultValue==null) {
					mapBitmapRenderer.defaultValue = new BitmapData(100,100,true,0xFFFFFFFF);
				}
				
				alphaRenderer.data 			= 	ClassUtils.getMetaDataOfProperty(	target, "alpha"		);
				componentXRenderer.data 	= 	ClassUtils.getMetaDataOfProperty(	target, "componentX");
				componentYRenderer.data 	= 	ClassUtils.getMetaDataOfProperty(	target, "componentY");
				colorRenderer.data 			= 	ClassUtils.getMetaDataOfProperty(	target, "color"		);
				mapPointRenderer.data 		= 	ClassUtils.getMetaDataOfProperty(	target,	"mapPoint"	);
				mapBitmapRenderer.data 		= 	ClassUtils.getMetaDataOfProperty(	target,	"mapBitmap"	);
				modeRenderer.data 			= 	ClassUtils.getMetaDataOfProperty(	target,	"mode"		);
				scaleXRenderer.data 		= 	ClassUtils.getMetaDataOfProperty(	target,	"scaleX"	);
				scaleYRenderer.data 		= 	ClassUtils.getMetaDataOfProperty(	target,	"scaleY"	);
				
			}

			public var relevantProperties:Array = ["alpha", "mode", "color", "scaleX", "scaleY", 
				"mapPoint", "componentX", "componentY", "mapBitmap"];
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				var relevant:Boolean;
				
				if (ArrayUtils.containsAny(relevantProperties, event.propertiesAndStyles)) {
					relevant = true;
				}
				
				if (relevant) {
					//trace("property changed");
					callLater(update);
				}
			}
			
			protected function group1_showHandler(event:FlexEvent):void {
				var labels:Array = DisplayObjectUtils.getElementsByType(this, Label);
				var hgroups:Array = DisplayObjectUtils.getElementsByType(this, HGroup);
				var length:int = labels.length;
				var gap:int = getStyle("gap");
				var labelWidth:int = getStyle("labelWidth");
				
				for (var i:int;i<length;i++) {
					labels[i].minWidth = labelWidth;
				}
				
				length = hgroups.length;
				
				for (var j:int;j<length;j++) {
					hgroups[j].gap = gap;
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>

	</fx:Declarations>

	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Alpha" toolTip="Specifies the alpha transparency value to use for out-of-bounds displacements." styleName="inspectablePanelLabel" />
		<renderers:NumberRenderer id="alphaRenderer" height="24" />
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Color" toolTip="Specifies what color to use for out-of-bounds displacements." styleName="inspectablePanelLabel" />
		<renderers:ColorPickerRenderer id="colorRenderer" height="24" includeCopyIcon="false" returnType="uint"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Component X" toolTip="Describes which color channel to use in the map image to displace the x result." styleName="inspectablePanelLabel" />
		<renderers:ColorPickerRenderer id="componentXRenderer" height="24" includeCopyIcon="false" returnType="uint"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Component X" toolTip="Describes which color channel to use in the map image to displace the y result." styleName="inspectablePanelLabel" />
		<renderers:ColorPickerRenderer id="componentYRenderer" height="24" includeCopyIcon="false" returnType="uint"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Map Bitmap" toolTip="A BitmapData object containing the displacement map data." styleName="inspectablePanelLabel" />
		<renderers:TextRenderer id="mapBitmapRenderer" />
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Map Point" toolTip="A value that contains the offset of the upper-left corner of the target display object from the upper-left corner of the map image." styleName="inspectablePanelLabel" />
		<renderers:TextRenderer id="mapPointRenderer" />
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Mode" toolTip="The mode for the filter. Possible values are DisplacementMapFilterMode constants" styleName="inspectablePanelLabel" />
		<renderers:DropDownListRenderer id="modeRenderer" height="24" defaultValue="{DisplacementMapFilterMode.WRAP}">
		</renderers:DropDownListRenderer>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Scale X" toolTip="The multiplier to use to scale the x displacement result from the map calculation." styleName="inspectablePanelLabel" />
		<renderers:NumberRenderer id="scaleXRenderer" height="24" stepSize="1"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Scale Y" toolTip="The multiplier to use to scale the y displacement result from the map calculation." styleName="inspectablePanelLabel" />
		<renderers:NumberRenderer id="scaleYRenderer" height="24" stepSize="1"/>
	</s:HGroup>
	
	
</s:VGroup>
