<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="com.flexcapacitor.views.IInspector" 
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 styleName="inspectablePanel"
		 width="100%">
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.MetaData;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			
			import org.as3commons.lang.ArrayUtils;
			
			public var radiate:Radiate;
			public var target:Object;
			public var data:Object;
			
			
			public function activate():void {
				radiate = Radiate.getInstance();
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, propertyChangeHandler, false, 0, true);
				
				if (radiate.target) {
					target = radiate.target;
				}
				
				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange);
					radiate.removeEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
					radiate.removeEventListener(RadiateEvent.HISTORY_CHANGE, propertyChangeHandler);
				}
				
				//target = null;
				//data = null;
			}
			
			protected function handleTargetChange(event:RadiateEvent):void {
				if (target!=event.selectedItem) {
					target = event.selectedItem;
					update();
				}
			}
			
			public function update():void {
				var iDocument:IDocument = radiate.selectedDocument;
				var componentDescription:ComponentDescription = iDocument ? iDocument.getItemDescription(target) : null;
				var sourceData:MetaData;
				
				// item was deleted or wrong type
				if (target==null || componentDescription==null) return;
				
				sourceData = ClassUtils.getMetaDataOfProperty(target, "source");
				sourceRenderer.data = sourceData;
				alphaRenderer.data = ClassUtils.getMetaDataOfProperty(target, "alpha");
				smoothRenderer.data = ClassUtils.getMetaDataOfProperty(target, "smooth");
				smoothingQualityRenderer.data = ClassUtils.getMetaDataOfStyle(target, "smoothingQuality");
				scaleModeRenderer.data = ClassUtils.getMetaDataOfProperty(target, "scaleMode");
				fillModeRenderer.data = ClassUtils.getMetaDataOfProperty(target, "fillMode");
				contentLoaderGroupRenderer.data = ClassUtils.getMetaDataOfProperty(target, "contentLoaderGrouping");
				clearOnLoadRenderer.data = ClassUtils.getMetaDataOfProperty(target, "clearOnLoad");
				
			}
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				if (event.type==RadiateEvent.PROPERTY_CHANGED) {
					if (ArrayUtils.containsAny(relevantProperties, event.propertiesAndStyles)) {
						callLater(update);
					}
					else {
						return;
					}
				}
				callLater(update);
			}
			
			public var relevantProperties:Array = ["source", "alpha", "smooth", "smoothingQuality", 
				"scaleMode", "fillMode", "contentLoaderGrouping", "clearOnLoad"]
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<!--<s:Image scaleMode="" alpha="" smooth="" clearOnLoad="" contentLoader="" fillMode=""
			 enableLoadingState="" backgroundAlpha="" backgroundColor=""
			 smoothingQuality="" skinClass="" />-->
			 
	<s:HGroup width="100%" verticalAlign="baseline" gap="{getStyle('gap')}">
		<s:Label text="Source" styleName="inspectablePanelLabel" width="{getStyle('labelWidth')}"/>
		<renderers:TextRenderer id="sourceRenderer" height="24" width="100%"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="baseline" gap="{getStyle('gap')}">
		<s:Label text="Alpha" styleName="inspectablePanelLabel" width="{getStyle('labelWidth')}"/>
		<renderers:NumberRenderer id="alphaRenderer" height="24" />
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="baseline" gap="{getStyle('gap')}">
		<s:Label text="Smooth" styleName="inspectablePanelLabel" width="{getStyle('labelWidth')}"/>
		<renderers:BooleanRenderer id="smoothRenderer" height="24" showClearButton="true"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="baseline" gap="{getStyle('gap')}">
		<s:Label text="Smooth Quality" styleName="inspectablePanelLabel" width="{getStyle('labelWidth')}"/>
		<renderers:DropDownListRenderer id="smoothingQualityRenderer" height="24" showClearButton="true"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="baseline" gap="{getStyle('gap')}">
		<s:Label text="Scale Mode" styleName="inspectablePanelLabel" width="{getStyle('labelWidth')}"/>
		<renderers:DropDownListRenderer id="scaleModeRenderer" height="24"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="baseline" gap="{getStyle('gap')}">
		<s:Label text="Fill Mode" styleName="inspectablePanelLabel" width="{getStyle('labelWidth')}"/>
		<renderers:DropDownListRenderer id="fillModeRenderer" height="24"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="baseline" gap="{getStyle('gap')}">
		<s:Label text="Content Grouping" styleName="inspectablePanelLabel" width="{getStyle('labelWidth')}"/>
		<renderers:TextRenderer id="contentLoaderGroupRenderer" height="24"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="baseline" gap="{getStyle('gap')}">
		<s:Label text="Clear on Load" styleName="inspectablePanelLabel" width="{getStyle('labelWidth')}"/>
		<renderers:BooleanRenderer id="clearOnLoadRenderer" height="24"/>
	</s:HGroup>
</s:Group>
