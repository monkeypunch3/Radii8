<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="com.flexcapacitor.views.IInspector" 
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 
		 show="group1_showHandler(event)"
		 creationComplete="group1_showHandler(event)"
		 styleName="inspectablePanel"
		 width="100%">
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.ComponentManager;
			import com.flexcapacitor.model.AccessorMetaData;
			import com.flexcapacitor.utils.ArrayUtils;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			import com.flexcapacitor.utils.MXMLDocumentConstants;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.BitmapFill;
			import mx.graphics.GradientBase;
			import mx.graphics.GradientEntry;
			import mx.graphics.IFill;
			import mx.graphics.LinearGradient;
			import mx.graphics.RadialGradient;
			import mx.graphics.SolidColor;
			
			import spark.events.IndexChangeEvent;
			import spark.primitives.supportClasses.FilledElement;
			
			
			public var radiate:Radiate;
			public var target:Object;
			public var data:Object;
			
			public var fillTypes:Array =[	{name:MXMLDocumentConstants.NONE,				label:"None"},
											{name:MXMLDocumentConstants.SOLID_COLOR, 		label:"Solid Color"},
											{name:MXMLDocumentConstants.LINEAR_GRADIENT, 	label:"Linear Gradient"},
											{name:MXMLDocumentConstants.RADIAL_GRADIENT, 	label:"Radial Gradient"},
											{name:MXMLDocumentConstants.BITMAP_FILL, 		label:"Image"}
										];
			
			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.instance;
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler, false, 0, true);
				
				if (radiate.target) {
					target = radiate.target;
				}
				
				if (fillList.dataProvider==null) {
					fillList.dataProvider = new ArrayCollection(fillTypes.slice(0, 4));
				}
				
				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange);
					radiate.removeEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
				}
			}
			
			protected function handleTargetChange(event:RadiateEvent):void {
				if (target!=event.selectedItem) {
					target = event.selectedItem;
					clearFills();
					update();
				}
			}
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				var relevant:Boolean;
				
				if (ArrayUtils.containsAny(relevantProperties, event.propertiesAndStyles)) {
					relevant = true;
				}
				
				if (relevant) {
					//trace("property changed");
					callLater(update);
				}
			}
			
			public function update():void {
				var filledElement:FilledElement 	= target as FilledElement;
				var fill:IFill 						= filledElement ? filledElement.fill : null;
				var solidColor:SolidColor 			= fill as SolidColor;
				var linearGradient:LinearGradient 	= fill as LinearGradient;
				var radialGradient:RadialGradient 	= fill as RadialGradient;
				var bitmapFill:BitmapFill 			= fill as BitmapFill;
				
				if (solidColor) {
					fillList.selectedItem = ArrayUtils.getItem(fillTypes, MXMLDocumentConstants.SOLID_COLOR, "name");
					updateSolidColorFill(solidColor);
				}
				else if (linearGradient) {
					fillList.selectedItem = ArrayUtils.getItem(fillTypes, MXMLDocumentConstants.LINEAR_GRADIENT, "name");
					updateGradientBase(linearGradient);
				}
				else if (radialGradient) {
					fillList.selectedItem = ArrayUtils.getItem(fillTypes, MXMLDocumentConstants.RADIAL_GRADIENT, "name");
					updateGradientBase(radialGradient);
				}
				else if (bitmapFill) {
					fillList.selectedItem = ArrayUtils.getItem(fillTypes, MXMLDocumentConstants.BITMAP_FILL, "name");
					updateBitmapFill(bitmapFill);
				}
				else if (fill==null) {
					fillList.selectedIndex = 0;
					updateNoFill();
				}
				
				
			}
			
			protected function group1_showHandler(event:FlexEvent):void {
				var labels:Array = DisplayObjectUtils.getElementsByType(this, Label);
				var hgroups:Array = DisplayObjectUtils.getElementsByType(this, HGroup);
				var numberOfLabels:int = labels.length;
				var numberOfGroups:int = hgroups.length;
				var gap:int = getStyle("gap");
				var labelWidth:int = getStyle("labelWidth");
				
				for (var i:int;i<numberOfLabels;i++) {
					labels[i].minWidth = labelWidth;
				}
				
				numberOfGroups = hgroups.length;
				
				for (var j:int;j<numberOfGroups;j++) {
					hgroups[j].gap = gap;
				}
			}
			
			
			private function updateSolidColorFill(solidColor:SolidColor):void {
				if (currentState!=MXMLDocumentConstants.SOLID_COLOR) {
					setCurrentState(MXMLDocumentConstants.SOLID_COLOR, false);
					validateNow();
				}
				
				// solid color fill
				var colorStyle:AccessorMetaData 		= ClassUtils.getMetaDataOfProperty(solidColor, "color");
				var alphaStyle:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(solidColor, "alpha");
				
				colorRenderer.data = colorStyle;
				alphaRenderer.data = alphaStyle;
			}
			
			private function updateGradientBase(gradient:GradientBase):void {
				
				if (gradient is LinearGradient) {
					
					if (currentState!=MXMLDocumentConstants.LINEAR_GRADIENT) {
						setCurrentState(MXMLDocumentConstants.LINEAR_GRADIENT, false);
						validateNow();
					}
				}
				else if (gradient is RadialGradient) {
					if (currentState!=MXMLDocumentConstants.RADIAL_GRADIENT) {
						setCurrentState(MXMLDocumentConstants.RADIAL_GRADIENT, false);
						validateNow();
					}
				}
				
				// gradient fill
				var entriesProperty:AccessorMetaData 		= ClassUtils.getMetaDataOfProperty(gradient, "entries");
				var interpolationProperty:AccessorMetaData 	= ClassUtils.getMetaDataOfProperty(gradient, "interpolationMethod");
				var matrixProperty:AccessorMetaData 		= ClassUtils.getMetaDataOfProperty(gradient, "matrix");
				var rotationProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(gradient, "rotation");
				var spreadMethodProperty:AccessorMetaData  	= ClassUtils.getMetaDataOfProperty(gradient, "spreadMethod");
				var xProperty:AccessorMetaData  			= ClassUtils.getMetaDataOfProperty(gradient, "x");
				var yProperty:AccessorMetaData  			= ClassUtils.getMetaDataOfProperty(gradient, "y");
				var angleProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(gradient, "angle");
				var scaleXProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(gradient, "scaleX");
				var scaleYProperty:AccessorMetaData;
				var focalPointProperty:AccessorMetaData;
				
				entriesRenderer.data 		= entriesProperty;
				interpolationRenderer.data 	= interpolationProperty;
				matrixRenderer.data 		= matrixProperty;
				rotationRenderer.data 		= rotationProperty;
				spreadMethodRenderer.data 	= spreadMethodProperty;
				xRenderer.data 				= xProperty;
				yRenderer.data 				= yProperty;
				scaleXRenderer.data 		= scaleXProperty;
				
				if (gradient is RadialGradient) {
					scaleYProperty  	= ClassUtils.getMetaDataOfProperty(gradient, "scaleY");
					focalPointProperty  = ClassUtils.getMetaDataOfProperty(gradient, "focalPointRatio");
					
					focalPointRenderer.data = focalPointProperty;
					angleRenderer.data = angleProperty;
					scaleYRenderer.data = scaleYProperty;
				}
			}
			
			// bitmap fill
			private function updateBitmapFill(bitmapFill:BitmapFill):void {
				if (currentState!=MXMLDocumentConstants.BITMAP_FILL) {
					setCurrentState(MXMLDocumentConstants.BITMAP_FILL, false);
					validateNow();
				}
				
				var alphaProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(bitmapFill, "alpha");
				var fillModeProperty:AccessorMetaData 		= ClassUtils.getMetaDataOfProperty(bitmapFill, "fillMode");
				var matrixProperty:AccessorMetaData 		= ClassUtils.getMetaDataOfProperty(bitmapFill, "matrix");
				var rotationProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(bitmapFill, "rotation");
				var scaleXProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(bitmapFill, "scaleX");
				var scaleYProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(bitmapFill, "scaleY");
				var smoothProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(bitmapFill, "smooth");
				var sourceProperty:AccessorMetaData  		= ClassUtils.getMetaDataOfProperty(bitmapFill, "source");
				var transformXProperty:AccessorMetaData  	= ClassUtils.getMetaDataOfProperty(bitmapFill, "transformX");
				var transformYProperty:AccessorMetaData  	= ClassUtils.getMetaDataOfProperty(bitmapFill, "transformY");
				var xProperty:AccessorMetaData  			= ClassUtils.getMetaDataOfProperty(bitmapFill, "x");
				var yProperty:AccessorMetaData  			= ClassUtils.getMetaDataOfProperty(bitmapFill, "y");
				
				alphaRenderer.data 		= alphaProperty;
				fillModeRenderer.data 	= fillModeProperty;
				matrixRenderer.data 	= matrixProperty;
				rotationRenderer.data 	= rotationProperty;
				scaleXRenderer.data 	= scaleXProperty;
				scaleYRenderer.data 	= scaleYProperty;
				smoothRenderer.data 	= smoothProperty;
				sourceRenderer.data 	= sourceProperty;
				transformXRenderer.data = transformXProperty;
				transformYRenderer.data = transformYProperty;
				xRenderer.data 			= xProperty;
				yRenderer.data 			= yProperty;	
			}
			
			private function updateNoFill():void {
				if (currentState!=MXMLDocumentConstants.NONE) {
					setCurrentState(MXMLDocumentConstants.NONE, false);
					validateNow();
				}
				
			}
			
			
			public var solidColorFillProperties:Array = ["color", "alpha"];
			
			public var linearGradientFillProperties:Array = ["interpolationMethod", "matrix", "rotation", 
				"spreadMethod", "x", "y", "entries", "angle", "focalPointRatio"];
			
			public var bitmapFillProperties:Array = ["alpha", "fillMode", "matrix", "rotation",
				"scaleX", "scaleY", "smooth", "source", "x", "y", "transformX", "transformY"];
			
			public var gradientEntryProperties:Array = ["color", "alpha", "ratio"];
			
			public var relevantProperties:Array = solidColorFillProperties.concat(linearGradientFillProperties).concat(bitmapFillProperties);
			public var previousLinearFill:LinearGradient;
			public var previousBitmapFill:BitmapFill;
			public var previousRadialFill:RadialGradient;
			public var previousSolidFill:SolidColor;
			
			protected function fillList_changeHandler(event:IndexChangeEvent):void {
				var filledElement:FilledElement = target as FilledElement;
				var fill:IFill 					= filledElement ? filledElement.fill : null;
				var fillType:Object 			= fillList.selectedItem;
				
				savePreviousFill(fill);
				
				if (fillType.name == MXMLDocumentConstants.NONE && fill!=null) {
					ComponentManager.clearProperty(filledElement, MXMLDocumentConstants.FILL, null, "Removed fill"); 
				}
				else if (fillType.name == MXMLDocumentConstants.SOLID_COLOR && !(fill is SolidColor)) {
					fill = getPreviousOrNewFill(SolidColor);
					ComponentManager.setProperty(filledElement, MXMLDocumentConstants.FILL, fill, "Set fill"); 
				}
				else if (fillType.name == MXMLDocumentConstants.LINEAR_GRADIENT && !(fill is LinearGradient)) {
					fill = getPreviousOrNewFill(LinearGradient);
					ComponentManager.setProperty(filledElement, MXMLDocumentConstants.FILL, fill, "Set fill"); 
				}
				else if (fillType.name == MXMLDocumentConstants.RADIAL_GRADIENT && !(fill is RadialGradient)) {
					fill = getPreviousOrNewFill(RadialGradient);
					ComponentManager.setProperty(filledElement, MXMLDocumentConstants.FILL, fill, "Set fill"); 
				}
				else if (fillType.name == MXMLDocumentConstants.BITMAP_FILL && !(fill is BitmapFill)) {
					fill = getPreviousOrNewFill(BitmapFill);
					ComponentManager.setProperty(filledElement, MXMLDocumentConstants.FILL, fill, "Set fill"); 
				}
				
				update();
			}
			
			private function savePreviousFill(fill:IFill):void {
				if (fill is LinearGradient) {
					previousLinearFill = fill as LinearGradient;
				}
				else if (fill is RadialGradient) {
					previousRadialFill = fill as RadialGradient;
				}
				else if (fill is BitmapFill) {
					previousBitmapFill = fill as BitmapFill;
				}
				else if (fill is RadialGradient) {
					previousSolidFill = fill as SolidColor;
				}
			}
			
			private function clearFills():void {
				previousBitmapFill = null;
				previousLinearFill = null;
				previousRadialFill = null;
				previousSolidFill = null;
			}
			
			private function getPreviousOrNewFill(fill:Class):IFill {
				var linearGradient:LinearGradient;
				var radialGradient:RadialGradient;
				var instance:Object = fill ? new fill() : null;
				
				if (instance is SolidColor) {
					if (previousSolidFill) {
						return previousSolidFill;
					}
					
					return new SolidColor();
				}
				else if (instance is LinearGradient) {
					if (previousLinearFill) {
						return previousLinearFill;
					}
					
					linearGradient = new LinearGradient();
					if (previousRadialFill && previousRadialFill.entries) {
						linearGradient.entries = previousRadialFill.entries;
					}
					else {
						linearGradient.entries = getDefaultLinearFillEntries();
					}
					return linearGradient;
				}
				else if (instance is RadialGradient) {
					if (previousRadialFill) {
						return previousRadialFill;
					}
					
					radialGradient = new RadialGradient();
					if (previousLinearFill && previousLinearFill.entries) {
						radialGradient.entries = previousLinearFill.entries;
					}
					else {
						radialGradient.entries = getDefaultLinearFillEntries();
					}
					return radialGradient;
				}
				else if (instance is BitmapFill) {
					if (previousBitmapFill) {
						return previousBitmapFill;
					}
					return new BitmapFill();
				}
				
				return null;
			}
			
			public function getDefaultLinearFillEntries():Array {
				var entries:Array = [];
				
				// black to white fill full alpha
				entries[0] = new GradientEntry(0, 0, 1);
				entries[1] = new GradientEntry(0xFFFFFF, 1, 1);
				
				return entries;
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="none"/>
		<s:State name="SolidColor" enterState="group1_showHandler(event)"/>
		<s:State name="LinearGradient" enterState="group1_showHandler(event)"/>
		<s:State name="RadialGradient" enterState="group1_showHandler(event)"/>
		<s:State name="BitmapFill" enterState="group1_showHandler(event)"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Fill Type" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<s:DropDownList id="fillList" height="24" requireSelection="true" 
						minWidth="150" change="fillList_changeHandler(event)"/>
	</s:HGroup>
	
	<!-- SOLID COLOR -->
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="SolidColor" itemCreationPolicy="immediate">
		<s:Label text="Fill Color" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:ColorPickerRenderer id="colorRenderer" height="24" includeCopyIcon="false"
									   returnType="hexidecimalPrefix"
									   subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="SolidColor" itemCreationPolicy="immediate">
		<s:Label text="Alpha" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="alphaRenderer" 
								  snapInterval="0" 
								  stepSize="0.05" 
								  height="24"
								  focusAlpha="0"
								  defaultValue="1"
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<!-- LINEAR GRADIENT -->
	<s:HGroup width="100%" verticalAlign="middle" includeIn="RadialGradient,LinearGradient" itemCreationPolicy="immediate">
		<s:Label text="Gradient" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:RectFillRenderer id="entriesRenderer" height="24" 
										minWidth="180" width="100%"
										subPropertyName="entries"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient,LinearGradient" itemCreationPolicy="immediate">
		<s:Label text="Interpolation" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:DropDownListRenderer id="interpolationRenderer" height="24" 
									minWidth="180" width="100%"
									defaultValue="rgb"
									subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient,LinearGradient" itemCreationPolicy="immediate">
		<s:Label text="Rotation" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="rotationRenderer" height="24" defaultValue="0"
								  stepSize="1" 
								  snapInterval="0" 
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient" itemCreationPolicy="immediate">
		<s:Label text="Angle" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="angleRenderer" height="24" defaultValue="0"
								  stepSize="1" 
								  snapInterval="0" 
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient" itemCreationPolicy="immediate">
		<s:Label text="Focal Point Ratio" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="focalPointRenderer" height="24" 
								  defaultValue="0"
								  minimum="-1" maximum="1"
								  stepSize=".01" 
								  snapInterval="0" 
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient,LinearGradient" itemCreationPolicy="immediate">
		<s:Label text="Spread Method" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:DropDownListRenderer id="spreadMethodRenderer" height="24" 
										subPropertyName="fill" defaultValue="pad"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient,LinearGradient,BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Matrix" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:TextRenderer id="matrixRenderer" height="24"
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Fill Mode" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:DropDownListRenderer id="fillModeRenderer" height="24" 
										minWidth="180" width="100%"
										subPropertyName="fill"/>
	</s:HGroup>
	
	<!-- BITMAP FILL -->
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Smooth" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:BooleanRenderer id="smoothRenderer" height="24"
								   subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Source" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:TextRenderer id="sourceRenderer" height="24" width="100%"
								subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient,LinearGradient,BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="X" toolTip="The distance by which to translate each point along the x axis" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="xRenderer" 
								  height="24" 
								  stepSize="1" 
								  snapInterval="0"
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient,LinearGradient,BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Y" toolTip="The distance by which to translate each point along the y axis" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="yRenderer" 
								  height="24" 
								  stepSize="1" 
								  snapInterval="0"
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient,LinearGradient,BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Scale X" 
				 toolTip.LinearGradient="The horizontal scale of the gradient transform, which defines the width of the (unrotated) gradient" 
				 styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="scaleXRenderer" 
								  height="24" 
								  stepSize="1" 
								  snapInterval="0"
								  defaultValue="{NaN}"
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="RadialGradient,BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Scale Y" toolTip="" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="scaleYRenderer" 
								  height="24" 
								  stepSize="1" 
								  snapInterval="0"
								  defaultValue="{NaN}"
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Transform X" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="transformXRenderer" 
								  height="24" 
								  stepSize="1" 
								  snapInterval="0"
								  subPropertyName="fill"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" includeIn="BitmapFill" itemCreationPolicy="immediate">
		<s:Label text="Transform Y" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="transformYRenderer" 
								  height="24" 
								  stepSize="1" 
								  snapInterval="0"
								  subPropertyName="fill"
								  defaultValue="1"/>
	</s:HGroup>
</s:Group>
