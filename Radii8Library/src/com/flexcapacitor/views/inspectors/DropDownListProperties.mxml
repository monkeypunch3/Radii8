<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="com.flexcapacitor.views.IInspector" 
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 
		 styleName="inspectablePanel"
		 width="100%">
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.utils.ClassUtils;
			
			import org.as3commons.lang.ArrayUtils;
			
			public var radiate:Radiate;
			public var target:Object;
			public var data:Object;
			
			
			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.instance;
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, propertyChangeHandler, false, 0, true);
				
				if (radiate.target) {
					target = radiate.target;
				}
				
				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange);
					radiate.removeEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
					radiate.removeEventListener(RadiateEvent.HISTORY_CHANGE, propertyChangeHandler);
				}
			}
			
			protected function handleTargetChange(event:RadiateEvent):void {
				if (target!=event.selectedItem) {
					target = event.selectedItem;
					update();
				}
			}
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				if (event.type==RadiateEvent.PROPERTY_CHANGED) {
					if (ArrayUtils.containsAny(relevantProperties, event.propertiesAndStyles)) {
						callLater(update);
					}
					else {
						return;
					}
				}
				callLater(update);
				
			}
			
			public function update():void {
				/*
				*    <strong>Properties</strong>
				*    allowMultipleSelection="false"
				*    dragEnabled="false"
				*    dragMoveEnabled="false"
				*    dropEnabled="false"
				*    selectedIndices="null"
				*    selectedItems="null"
				*    useVirtualLayout="true"
				* 
				*    <strong>Styles</strong>
				*    alternatingItemColors="undefined"
				*    borderAlpha="1.0"
				*    borderColor="0#CCCCCC"
				*    borderVisible="true"
				*    contentBackgroundColor="0xFFFFFF"
				*    downColor="0xA8C6EE"
				*    dragIndicator="ListItemDragProxy"
				*    dropIndicatorSkin="ListDropIndicator"
				*    rollOverColor="0xCEDBEF"
				*    selectionColor="0xA8C6EE"
				*    symbolColor="0x000000"
				*/
				
				//promptRenderer.data = ClassUtils.getMetaDataOfStyle(target, "prompt");
				cornerRadiusRenderer.data = ClassUtils.getMetaDataOfStyle(target, "cornerRadius");
				dropShadowVisibleRenderer.data = ClassUtils.getMetaDataOfStyle(target, "dropShadowVisible");
				
			}
			
			public var relevantProperties:Array = ["prompt", "cornerRadius", "dropShadowVisible"];
		]]>
	</fx:Script>
	
	
	<s:TileGroup width="100%" columnAlign="left" columnWidth="120" verticalAlign="middle" requestedColumnCount="2">
		<!--<s:Label text="Prompt" styleName="inspectablePanelLabel" />
		<renderers:TextRenderer id="promptRenderer" height="24" width="100%"/>-->
		
		<s:Label text="Corner Radius" styleName="inspectablePanelLabel"/>
		<renderers:NumberRenderer id="cornerRadiusRenderer" height="24" stepSize="1" />
		
		<s:Label text="Drop Shadow Visible" styleName="inspectablePanelLabel"/>
		<renderers:BooleanRenderer id="dropShadowVisibleRenderer" height="24" minWidth="132"/>
	</s:TileGroup>
</s:Group>
