<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="com.flexcapacitor.views.IInspector" 
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 
		 show="group1_showHandler(event)"
		 creationComplete="group1_showHandler(event)"
		 styleName="inspectablePanel"
		 width="100%">
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.model.StyleMetaData;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			import com.flexcapacitor.utils.FontUtils;
			
			import mx.events.FlexEvent;
			
			import org.as3commons.lang.ArrayUtils;
			
			public var radiate:Radiate;
			public var target:Object;
			public var data:Object;
			
			public var fonts:Array;
			
			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.getInstance();
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler, false, 0, true);
				
				if (radiate.target) {
					target = radiate.target;
				}
				
				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, handleTargetChange);
					radiate.removeEventListener(RadiateEvent.PROPERTY_CHANGED, propertyChangeHandler);
				}
			}
			
			protected function handleTargetChange(event:RadiateEvent):void {
				if (target!=event.selectedItem) {
					target = event.selectedItem;
					update();
				}
			}
			
			protected function propertyChangeHandler(event:RadiateEvent):void {
				var relevant:Boolean;
				
				 if (ArrayUtils.containsAny(relevantProperties, event.propertiesAndStyles)) {
					relevant = true;
				}
				
				if (relevant) {
					//trace("property changed");
					callLater(update);
				}
			}
			
			
			public var relevantProperties:Array = ["lineHeight", "fontFamily", "fontSize", "fontWeight", "fontStyle", 
				"trackingLeft", "trackingRight", "textDecoration", "color", "textAlign", "alignmentBaseline"];
			
			public function update():void {
				var lineHeightStyle:StyleMetaData 		= ClassUtils.getMetaDataOfStyle(target, "lineHeight"); // font line height
				var fontFamilyStyle:StyleMetaData 		= ClassUtils.getMetaDataOfStyle(target, "fontFamily"); // font
				var fontSizeStyle:StyleMetaData  		= ClassUtils.getMetaDataOfStyle(target, "fontSize"); // size
				var fontWeightStyle:StyleMetaData  		= ClassUtils.getMetaDataOfStyle(target, "fontWeight"); // bold
				var fontStyleStyle:StyleMetaData  		= ClassUtils.getMetaDataOfStyle(target, "fontStyle"); // italic
				var trackingLeftStyle:StyleMetaData  	= ClassUtils.getMetaDataOfStyle(target, "trackingLeft"); // tracking
				var trackingRightStyle:StyleMetaData 	= ClassUtils.getMetaDataOfStyle(target, "trackingRight"); // tracking
				var textDecorationStyle:StyleMetaData  	= ClassUtils.getMetaDataOfStyle(target, "textDecoration"); // underline 
				var colorStyle:StyleMetaData 			= ClassUtils.getMetaDataOfStyle(target, "color"); // color
				var textAlignStyle:StyleMetaData 		= ClassUtils.getMetaDataOfStyle(target, "textAlign"); // textAlign
				var alignmentBaselineStyle:StyleMetaData = ClassUtils.getMetaDataOfStyle(target, "alignmentBaseline");
				
				if (fonts==null) {
					fonts = FontUtils.getFontInformationDetails(target);
				}
				
				lineHeightRenderer.data = lineHeightStyle;
				fontFamilyStyle.enumeration = fonts;
				//fontsRenderer.data = data;
				fontFamilyRenderer.data = fontFamilyStyle;
				fontSizeRenderer.data = fontSizeStyle;
				fontWeightRenderer.data = fontWeightStyle;
				fontStyleRenderer.data = fontStyleStyle;
				colorRenderer.data = colorStyle;
				trackingLeftRenderer.data = trackingLeftStyle;
				trackingRightRenderer.data = trackingRightStyle;
				textAlignRenderer.data = textAlignStyle;
				alignmentBaselineRenderer.data = alignmentBaselineStyle;
			}
			
			protected function group1_showHandler(event:FlexEvent):void {
				var labels:Array = DisplayObjectUtils.getElementsByType(this, Label);
				var hgroups:Array = DisplayObjectUtils.getElementsByType(this, HGroup);
				var length:int = labels.length;
				var gap:int = getStyle("gap");
				var labelWidth:int = getStyle("labelWidth");
				
				for (var i:int;i<length;i++) {
					labels[i].minWidth = labelWidth;
				}
				
				length = hgroups.length;
				
				for (var j:int;j<length;j++) {
					hgroups[j].gap = gap;
				}
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Font Family" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:ComboBoxRenderer id="fontFamilyRenderer" height="24" labelField="fontName"
									valueIsField="true" fieldIsValue="true"
									minWidth="180" width="100%"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Font Size" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="fontSizeRenderer" stepSize="1" snapInterval="0" height="24" width="80" showClearButton="true"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Font Style" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:DropDownListRenderer id="fontStyleRenderer" height="24"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Font Weight" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:DropDownListRenderer id="fontWeightRenderer" height="24" />
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Line Height" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="lineHeightRenderer" 
								  height="24" 
								  width="80"
								  isPercent="true" 
								  showClearButton="true" 
								  stepSize="1" 
								  snapInterval="0"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Color" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:ColorPickerRenderer id="colorRenderer" height="24" includeCopyIcon="false"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Text Align" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:DropDownListRenderer id="textAlignRenderer" height="24" />
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Tracking Right" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="trackingRightRenderer" height="24" 
								  stepSize=".1" 
								  snapInterval="0"
								  fixedPosition="2"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Tracking Left" styleName="inspectablePanelLabel" showTruncationTip="true"/>
		<renderers:NumberRenderer id="trackingLeftRenderer" height="24" 
								  stepSize=".1" 
								  snapInterval="0"/>
	</s:HGroup>
	
	<s:HGroup width="100%" verticalAlign="baseline" >
		<s:Label text="Alignment Baseline" styleName="inspectablePanelLabel" showTruncationTip="true" />
		<renderers:DropDownListRenderer id="alignmentBaselineRenderer" width="175" height="24" defaultValue="useDominantBaseline"/>
	</s:HGroup>
</s:Group>
