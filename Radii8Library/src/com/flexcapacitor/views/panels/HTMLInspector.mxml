<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 
		 paddingTop="8"
		 paddingBottom="8"
		 paddingLeft="8"
		 paddingRight="8"
		 width="100%" 
		 height="100%"
		 fontSize="11"
		 implements="com.flexcapacitor.views.IInspector" 
		 >
	
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.utils.StringUtils;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.TextOperationEvent;
			
			
			private var radiate:Radiate = Radiate.instance;
			private var settingTarget:Boolean;
			
			[Bindable]
			public var target:Object;
			public var componentDescription:ComponentDescription;
			
			public var anchorTargetsCollection:ArrayCollection;
			public var anchorTargets:Array = ["_blank", "new", "_parent", "_self", "_top"];
			
			public function activate():void {
				
				if (!anchorTargetsCollection) {
					anchorTargetsCollection = new ArrayCollection(anchorTargets);
					targetsComboBox.dataProvider = anchorTargetsCollection;
				}
				
				if (radiate.target) {
					targetChangedHandler();
				}
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChangedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, targetChangedHandler, false, 0, true);
				
				
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, targetChangedHandler);
					radiate.removeEventListener(RadiateEvent.HISTORY_CHANGE, targetChangedHandler);
				}
				
				target = null;
				componentDescription = null;
			}
			
			
			protected function targetChangedHandler(event:RadiateEvent = null):void {
				if (settingTarget) return;
				var iDocument:IDocument = radiate.selectedDocument;
				
				if (radiate.target!=target) {
					target = radiate.target;
					componentDescription = iDocument.getItemDescription(target);
				}
				
				if (componentDescription) {
					componentCSS.text = componentDescription.userStyles;
					
					embedSnapshopIntoBackground.selected = componentDescription.createBackgroundSnapshot;
					convertElementToImage.selected = componentDescription.convertElementToImage;
					
					wrapWithAnchor.selected = componentDescription.wrapWithAnchor;
					targetsComboBox.selectedItem = componentDescription.anchorTarget;
					urlTextInput.text = componentDescription.anchorURL;
					
					tagNameTextInput.text = componentDescription.htmlTagName;
					htmlOverride.text = componentDescription.htmlOverride;
					
					embedSnapshopIntoBackground.enabled = componentDescription.isVisualElementContainer;
				}
				
			}
			
			public var componentDescriptor:ComponentDescription;
			
			protected function componentCSS_changeHandler(event:Event):void {
				var iDocument:IDocument = radiate.selectedDocument;
				var prevTarget:Object = radiate.target;
				
				if (componentDescription==null && radiate.target) {
					componentDescription = iDocument.getItemDescription(target);
				}
				
				settingTarget = true;
				if (componentDescription) {
					Radiate.setProperty(componentDescription, "userStyles", componentCSS.text);
					Radiate.setTarget(prevTarget, true, "", true);
				}
				settingTarget = false;
			}
			
			protected function wrapWithAnchor_changeHandler(event:Event):void {
				var iDocument:IDocument = radiate.selectedDocument;
				var prevTarget:Object = radiate.target;
				
				if (componentDescription==null && radiate.target) { 
					componentDescription = iDocument.getItemDescription(target);
				}
				
				settingTarget = true;
				
				if (componentDescription) {
					Radiate.setProperty(componentDescription, "wrapWithAnchor", wrapWithAnchor.selected);
				
					if (wrapWithAnchor.selected) {
						Radiate.setProperty(componentDescription, "anchorURL", urlTextInput.text);
						if (event.type=="textInput") {
							Radiate.setProperty(componentDescription, "anchorTarget", targetsComboBox.textInput.text);
						}
						else {
							Radiate.setProperty(componentDescription, "anchorTarget", targetsComboBox.selectedItem);
						}
					}
					else {
						Radiate.clearProperty(componentDescription, "anchorURL");
						Radiate.clearProperty(componentDescription, "anchorTarget");
					}
					
					Radiate.setTarget(prevTarget, true, "", true);
				}
				
				settingTarget = false;
			}
			
			protected function embedSnapshopIntoBackground_changeHandler(event:Event):void {
				var iDocument:IDocument;
				var prevTarget:Object = radiate.target;
				
				if (prevTarget) {
					iDocument = radiate.selectedDocument;
					componentDescription = iDocument.getItemDescription(target);
				}
				
				if (componentDescription) {
					settingTarget = true;
					Radiate.setProperty(componentDescription, "createBackgroundSnapshot", embedSnapshopIntoBackground.selected);
					Radiate.setTarget(prevTarget, true, "", true);
					settingTarget = false;
				}
			}
			
			protected function convertElementToImage_changeHandler(event:Event):void {
				var iDocument:IDocument;
				var prevTarget:Object = radiate.target;
				
				if (radiate.target) {
					iDocument = radiate.selectedDocument;
					componentDescription = iDocument.getItemDescription(target);
				}
				
				if (componentDescription) {
					settingTarget = true;
					Radiate.setProperty(componentDescription, "convertElementToImage", convertElementToImage.selected);
					Radiate.setTarget(prevTarget, true, "", true);
					settingTarget = false;
				}
			}
			
			protected function customTagName_changeHandler(event:Event):void {
				var iDocument:IDocument = radiate.selectedDocument;
				var prevTarget:Object = radiate.target;
				var value:String;
				
				if (componentDescription==null && radiate.target) { 
					componentDescription = iDocument.getItemDescription(target);
				}
				
				settingTarget = true;
				
				if (componentDescription) {
					//Radiate.setProperty(componentDescription, "htmlTagName", wrapWithAnchor.selected);
					value = StringUtils.trim(tagNameTextInput.text);
					
					if (value!="") {
						Radiate.setProperty(componentDescription, "htmlTagName", value);
					}
					else {
						Radiate.clearProperty(componentDescription, "htmlTagName");
					}
					
					Radiate.setTarget(prevTarget, true, "", true);
				}
				
				settingTarget = false;
			}
			
			protected function htmlOverride_changeHandler(event:Event):void {
				var iDocument:IDocument = radiate.selectedDocument;
				var prevTarget:Object = radiate.target;
				var value:String;
				
				if (componentDescription==null && radiate.target) { 
					componentDescription = iDocument.getItemDescription(target);
				}
				
				settingTarget = true;
				
				if (componentDescription) {
					//Radiate.setProperty(componentDescription, "htmlTagName", wrapWithAnchor.selected);
					value = StringUtils.trim(htmlOverride.text);
					
					if (value!="") {
						Radiate.setProperty(componentDescription, "htmlOverride", value);
					}
					else {
						Radiate.clearProperty(componentDescription, "htmlOverride");
					}
					
					Radiate.setTarget(prevTarget, true, "", true);
				}
				
				settingTarget = false;
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="HTML"/>
		<s:State name="MXML"/>
		<s:State name="ANDROID"/>
	</s:states>
	
	<s:CheckBox id="embedSnapshopIntoBackground" 
				label="Embed snapshot into element background" 
				change="embedSnapshopIntoBackground_changeHandler(event)"/>
	<s:CheckBox id="convertElementToImage" 
				label="Convert element into image" 
				change="convertElementToImage_changeHandler(event)"/>
	<s:Spacer />
	<s:HGroup width="100%" verticalAlign="baseline" gap="5">
		<s:Label id="customTagName" 
					text="Tag Name" />
		<s:TextInput id="tagNameTextInput" 
					 height="22" 
					 width="100%" 
					 prompt="default"
					 change="customTagName_changeHandler(event)"
					 />
	</s:HGroup>
	
	<s:Label text="Enter your own CSS here" />
	
	<s:TextArea id="componentCSS" width="100%" height="100%"
				focusOut="componentCSS_changeHandler(event)"
				change="componentCSS_changeHandler(event)">
		
	</s:TextArea>
	<s:Label text="Enter your own HTML here" />
	
	<s:TextArea id="htmlOverride" width="100%" height="100%"
				focusOut="htmlOverride_changeHandler(event)"
				change="htmlOverride_changeHandler(event)">
		
	</s:TextArea>
	
	<s:HGroup width="100%" verticalAlign="baseline" gap="5">
		<s:CheckBox id="wrapWithAnchor" 
					label="Wrap in hyperlink" 
					change="wrapWithAnchor_changeHandler(event)"/>
		<s:ComboBox id="targetsComboBox" 
					height="22" 
					width="80" color="blue"
					enabled="{wrapWithAnchor.selected}"
					textInput="wrapWithAnchor_changeHandler(event)"
					change="wrapWithAnchor_changeHandler(event)"/>
		<s:TextInput id="urlTextInput" 
					 height="22" 
					 width="100%" 
					 prompt="URL"
					 enabled="{wrapWithAnchor.selected}"
					 change="wrapWithAnchor_changeHandler(event)"
					/>
	</s:HGroup>

</s:VGroup>
