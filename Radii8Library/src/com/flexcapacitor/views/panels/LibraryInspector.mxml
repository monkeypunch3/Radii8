<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:collections="com.flexcapacitor.effects.collections.*"
		 xmlns:flexcapacitor="flexcapacitor.*"
		 xmlns:clipboard="com.flexcapacitor.effects.clipboard.*"
		 xmlns:file="com.flexcapacitor.effects.file.*"
		 xmlns:fc="com.flexcapacitor.effects.popup.*"
		 xmlns:inspectors="com.flexcapacitor.views.inspectors.*"
		 
		 implements="com.flexcapacitor.views.IInspector" 
		 width="400" 
		 height="100%" 
		 >
	
	<!-- 
	
	The list of components to include come from spark-manifest-defaults.xml 
	in Radii8LibrarySparkAssets. The include attribute must be set to true for them to be visible. 
	
	The component classes are included by creating a reference to them in Radii8LibrarySparkAssets.
	
	We create an instance of the class in the mouse down handler. 
	
	
	-->
	
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.DragDropEvent;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.RunManager;
			import com.flexcapacitor.model.AttachmentData;
			import com.flexcapacitor.model.DocumentData;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.ImageData;
			import com.flexcapacitor.services.WPAttachmentService;
			import com.flexcapacitor.utils.ArrayUtils;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			import com.flexcapacitor.utils.DragManagerUtil;
			import com.flexcapacitor.utils.supportClasses.ComponentDefinition;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			import com.flexcapacitor.views.IInspector;
			import com.flexcapacitor.views.ImageView;
			import com.flexcapacitor.views.renderers.LibraryInspectorRenderer;
			import com.flexcapacitor.views.windows.DeleteDocumentWindow;
			import com.flexcapacitor.views.windows.GalleryWindow;
			
			import mx.core.ClassFactory;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.SandboxMouseEvent;
			import mx.managers.DragManager;
			
			import spark.components.Application;
			import spark.components.Group;
			import spark.components.Image;
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var radiate:Radiate;
			
			private var target:Object;
			
			private var dragManagerInstance:DragManagerUtil;
			
			public var selectedItem:Object;
			
			public var SMALL:String = "small";
			public var MEDIUM:String = "medium";
			public var FULL:String = "full";
			public var THUMBNAIL:String = "thumbnail";
			
			public var service:WPAttachmentService;
			
			public var currentTargetRow:Group;
			public var fileReference:FileReference;
			public var fileReferenceList:FileReferenceList;
			
			public var uploadAutomatically:Boolean;
			
			private var documentID:int;
			private var projectID:int;
			
			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.getInstance();
				
				radiate.addEventListener(RadiateEvent.ATTACHMENT_UPLOADED, uploadAttachmentResult, false, 0, true);
				radiate.addEventListener(RadiateEvent.ATTACHMENTS_RECEIVED, attachmentsReceived, false, 0, true);
				radiate.addEventListener(RadiateEvent.ASSET_ADDED, assetAdded, false, 0, true);
				radiate.addEventListener(RadiateEvent.ASSET_REMOVED, assetRemoved, false, 0, true);
				radiate.addEventListener(RadiateEvent.ASSETS_REMOVED, assetRemoved, false, 0, true);
				radiate.addEventListener(RadiateEvent.ATTACHMENTS_DELETED, attachmentsDeleted, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChanged, false, 0, true);
				
				updateDocuments();
				updateAssets();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.ATTACHMENT_UPLOADED, uploadAttachmentResult);
					radiate.removeEventListener(RadiateEvent.ATTACHMENTS_RECEIVED, attachmentsReceived);
					radiate.removeEventListener(RadiateEvent.ASSET_ADDED, assetAdded);
					radiate.removeEventListener(RadiateEvent.ASSET_REMOVED, assetRemoved);
					radiate.removeEventListener(RadiateEvent.ASSETS_REMOVED, assetRemoved);
					radiate.removeEventListener(RadiateEvent.ATTACHMENTS_DELETED, attachmentsDeleted);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChanged);
				}
			}
			
			protected function targetChangeHandler(event:RadiateEvent):void
			{
				target = event.selectedItem;
			}
			
			/**
			 * Listen for drag movement and start dragging if drag tolerance is met
			 * */
			public function rowGroupMouseDownHandler(event:MouseEvent, data:Object, itemIndex:int):void {
				var classFactory:ClassFactory;
				var item:ComponentDefinition;
				var application:Application;
				var component:Object;
				var iDocument:IDocument = radiate.selectedDocument;
				var rowGroup:Group;
				
				selectedItem = data;
				
				item = Radiate.getComponentType("Image");
				
				//dropTargetLabel.text = "";
				
				rowGroup = event.currentTarget as Group;
				
				if (currentTargetRow) {
					removeMouseTargetListeners(currentTargetRow);
				}
				
				//event.stopImmediatePropagation();
				//list.dragEnabled = false;
				
				application = iDocument && iDocument.instance ? iDocument.instance as Application : null;
				
				if (!application) return;
				
				//trace("listening for drag behavior");
				component = Radiate.createComponentToAdd(iDocument, item, false);
				
				
				if (!dragManagerInstance) {
					dragManagerInstance = DragManagerUtil.getInstance();
				}
				
				addMouseTargetListeners(LibraryInspectorRenderer(rowGroup).iconImage);
				
				dragManagerInstance.listenForDragBehavior(LibraryInspectorRenderer(rowGroup).iconImage, iDocument, event, component);
				
				removeDragManagerListeners(dragManagerInstance);
				addDragManagerListeners(dragManagerInstance);
				
				// DRAG DROP 
				// is continued in 
				// DragManagerUtil.dragDropHandler()
				// and then in handleDragDrop() here
			}
			
			/**
			 * Add listeners to drag manager
			 * */
			public function addDragManagerListeners(dragManager:IEventDispatcher):void {
				
				dragManager.addEventListener(DragDropEvent.DRAG_DROP, handleDragDrop);
				dragManager.addEventListener(DragEvent.DRAG_OVER, handleDragOver);
				dragManager.addEventListener(DragDropEvent.DRAG_DROP_COMPLETE, handleDragDropComplete);
				dragManager.addEventListener(DragDropEvent.DRAG_DROP_INCOMPLETE, handleDragDropIncomplete);
			}
			
			/**
			 * Remove listeners from drag manager
			 * */
			public function removeDragManagerListeners(dragManager:IEventDispatcher):void {
				
				dragManager.removeEventListener(DragDropEvent.DRAG_DROP, handleDragDrop);
				dragManager.removeEventListener(DragEvent.DRAG_OVER, handleDragOver);
				dragManager.removeEventListener(DragDropEvent.DRAG_DROP_COMPLETE, handleDragDropComplete);
				dragManager.removeEventListener(DragDropEvent.DRAG_DROP_INCOMPLETE, handleDragDropIncomplete);
				
			}
			
			/**
			 * Listen for mouse events
			 * */
			public function addMouseTargetListeners(rowGroup:IEventDispatcher):void {
				rowGroup.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);
				rowGroup.addEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, mouseUpHandler, false, 0, true);
				
				stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);
				stage.addEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, mouseUpHandler, false, 0, true);
			}
			
			
			/**
			 * Listen for mouse events
			 * */
			public function removeMouseTargetListeners(eventDispatcher:IEventDispatcher):void {
				if (eventDispatcher) {
					eventDispatcher.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					eventDispatcher.removeEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, mouseUpHandler);
				}
				
				stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				stage.removeEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, mouseUpHandler);
			}
			
			/**
			 * Remove mouse handlers from row
			 * */
			protected function mouseUpHandler(event:Event):void {
				removeMouseTargetListeners(currentTargetRow);
				removeMouseTargetListeners(event.currentTarget as IEventDispatcher);
				removeMouseTargetListeners(event.target as IEventDispatcher);
				
				//trace(ClassUtils.getClassName(event.currentTarget) + ":" + event.type);
				
				removeDragManagerListeners(dragManagerInstance);
			}
			
			/**
			 * Handles drag drop event. This is only the first part of adding to the stage. 
			 * We can prevent automatic adding by calling event.preventDefault().
			 * If we do not call preventDefault dragDropComplete is the next event to be called. 
			 * */
			protected function handleDragDrop(event:DragDropEvent):void {
				var component:Object = event.draggedItem;
				//trace(event.type);
				
				dragManagerInstance.removeEventListener(DragDropEvent.DRAG_DROP, handleDragDrop);
				//dropTargetLabel.text = "Drag drop to:" + dragManagerInstance.dropTargetName;
				
				dragManagerInstance.removeEventListener(DragEvent.DRAG_OVER, handleDragOver);
			}
			
			/**
			 * Dispatched after drag drop event. Drag drop can be canceled. If it
			 * is not canceled this event happens. 
			 * */
			protected function handleDragDropComplete(event:DragDropEvent):void {
				var component:Object = event.draggedItem;
				var image:Image = component as Image;
				var attachmentData:AttachmentData = selectedItem as AttachmentData;
				var imageData:ImageData = attachmentData as ImageData;
				var path:String;
				
				//trace(event.type);
				Radiate.updateComponentAfterAdd(radiate.selectedDocument, image, true);
				
				if (image) {
					//image.source = event.draggedItem;
					
					if (imageData is ImageData) {
						path = imageData.url;
						
						if (path) {
							image.width = undefined;
							image.height = undefined;
							//image.source = null;//force it to show up in change history
							Radiate.setProperty(image, "source", path);
						}
						else if (imageData.bitmapData) {
							Radiate.setProperty(image, "source", imageData.bitmapData);
						}
					}
					else {
						image.source = "";
					}
					
				}
				
				removeDragManagerListeners(dragManagerInstance);
			}
			
			protected function handleDragOver(event:Event):void {
				
				//Radiate.info("target: " + dragManagerInstance.lastTargetCandidate);
				//dropTargetLabel.text = "Drag over: " + dragManagerInstance.dropTargetName;
			}
			
			protected function attachmentsReceived(event:RadiateEvent):void {
				var attachments:Array = event.targets as Array;
				radiate.addAssetsToDocument(attachments, radiate.selectedDocument as DocumentData);
				//libraryCollection.source = attachments;
			}
			
			
			protected function smallImage_clickHandler(event:MouseEvent):void {
				var selectedItem:AttachmentData = libraryList.selectedItem as AttachmentData;
				var imageData:ImageData = selectedItem as ImageData;
				
				if (imageData) {
					imageURLInput.text = imageData.smallURL;
				}
			}
			
			protected function thumbnailImage_clickHandler(event:MouseEvent):void {
				setTextInputImageURL(THUMBNAIL);
			}
			
			protected function fullImage_clickHandler(event:MouseEvent):void {
				setTextInputImageURL(FULL);
			}

			protected function mediumImage_clickHandler(event:MouseEvent):void {
				
				setTextInputImageURL(MEDIUM);
			}
			
			/**
			 * Set the URL 
			 * */
			public function setTextInputImageURL(value:String):void {
				var selectedItem:AttachmentData = libraryList.selectedItem as AttachmentData;
				var imageData:ImageData = selectedItem as ImageData;
				
				if (imageData) {
					
					if (value==SMALL) {
						imageURLInput.text = imageData.smallURL;
					}
					else if (value==MEDIUM) {
						imageURLInput.text = imageData.mediumURL;
					}
					else if (value==FULL) {
						imageURLInput.text = imageData.url;
					}
					else if (value==THUMBNAIL) {
						imageURLInput.text = imageData.thumbnailURL;
					}
					
					//imageURLInput.selectRange(imageURLInput.text.length, imageURLInput.text.length);
					imageURLInput.appendText("");
				}
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void {
				var selectedItem:AttachmentData = libraryList.selectedItem as AttachmentData;
				var imageData:ImageData = selectedItem as ImageData;
				
				if (imageData) {
					setTextInputImageURL(FULL);
				}
				
				if (selectedItem) {
					radiate.dispatchObjectSelectedEvent(selectedItem);
				}
				
				
				if (imageData && openPopUp.isOpen) {
					if (imageData.bitmapData) {
						ImageView(openPopUp.popUp).data = imageData.bitmapData;
					}
					else if (imageData.url) {
						ImageView(openPopUp.popUp).data = imageData.url;
					}
				}
			}
			
			
			/**
			 * Upload file
			 * */
			public function uploadFile(data:DocumentData):void {
				
				if (false && data && data.file) {
					uploadAttachment(data.file);
				}
				else if (data) {
					if (data.id==null) {
						uploadAttachment(data);
					}
					else {
						Radiate.warn("This item is already uploaded.");
					}
				}
				else {
					
				}
			}
			
			public var currentUpload:AttachmentData;
			
			/**
			 * Create WP service and upload file
			 * */
			public function uploadAttachment(data:Object):void {
				var postID:String;
				var attachmentData:AttachmentData = data as AttachmentData;
				var imageData:ImageData = data as ImageData;
				var fileReference:FileReference = data as FileReference;
				
				radiate.addEventListener(RadiateEvent.ATTACHMENT_UPLOADED, uploadAttachmentResult, false, 0, true);
				
				// try to upload to an account not document
				// upload attachment to project
				postID = radiate.selectedDocument ? radiate.selectedDocument.id : null;
				
				// this should be user choice
				// if project is not available for some reason upload to document
				// if document is not available for some reason upload to project
				if (postID==null) {
					postID = radiate.selectedProject ? radiate.selectedProject.id : null;
				}
				
				if (postID==null) {
					Radiate.info("Please save the document or project first.");
					return;
				}
				
				if (fileReference) {
					
					Radiate.info("Importing PSD");
					Radiate.callAfter(250, radiate.uploadAttachment, fileReference, postID);
				}
				else if (attachmentData) {
					currentUpload = attachmentData;
					
					Radiate.info("Importing PSD");
					Radiate.callAfter(250, radiate.uploadAttachmentData, attachmentData, postID);
				}
			}
			
			protected function uploadAttachmentResult(event:RadiateEvent):void {
				var attachments:Array = event.data as Array;
				var data:Object = event.selectedItem;
				var attachment:AttachmentData;
				var containsName:Boolean;
				var length:int = attachments.length;
				var iDocument:IDocument = radiate.selectedDocument;
				
				if (event.successful) {
					
				}
				else {
					Radiate.warn("Upload not successful for some reason");
				}
				
				// cause the list to update and rerender the rows
				libraryCollection.refresh();
			}
			
			protected function uploadAttachmentFault(event:RadiateEvent):void {
				//var message:String = event.message;
				Radiate.error("Upload error: "+event.toString());
			}
			
			protected function refreshIcon_clickHandler(event:MouseEvent):void {
				//var projectOrDocumentID:String = radiate.selectedProject ? radiate.selectedProject.id : null;
				var projectOrDocumentID:String = radiate.selectedDocument ? radiate.selectedDocument.id : null;
				var searchID:int;
				
				if (radiate.isUserLoggedIn==false) {
					Radiate.info("You must be logged in");
					return;
				}
				
				// if not project id then get document id
				if (projectOrDocumentID==null) {
					projectOrDocumentID = radiate.selectedProject ? radiate.selectedProject.id : null;
				}
				
				if (projectOrDocumentID==null) {
					searchID = 0;
				}
				else {
					searchID = int(projectOrDocumentID);
				}
				
				radiate.getAttachments(searchID);
			}
			
			protected function assetAdded(event:RadiateEvent):void {
				updateAssets();
				
				var data:Object = event.data;
				//list.selectedItem = event.data;
				
				if (uploadAutomatically) {
					//uploadAttachment(loadFile.fileReference);
				}
			}
			
			protected function assetRemoved(event:Event):void {
				updateAssets();
			}
			
			private function updateAssets():void {
				// to do filter assets by document
				var selectedIndex:int;
				
				if (libraryList.selectedItem!=null) {
					selectedIndex = libraryList.selectedIndex;
				}
				
				// not sure why it's not deleting the last item
				if (radiate.assets.length==0) {
					// RangeError: Index '-1' specified is out of bounds. 
					// - when setting source to empty array before hand 
					// - assets.source may be bound so when that array item is 
					// - removed and then remove all is called it may not be found
					// - calling refresh before calling remove all
					libraryCollection.refresh();
					libraryCollection.removeAll();
				}
				else {
					if (libraryCollection.source != radiate.assets.source) {
						libraryCollection.source = radiate.assets.source;
						libraryCollection.refresh();
					}
					else {
						libraryCollection.refresh();
					}
				}
				
				if (searchCollection) {
					searchCollection.refresh();
				}
				
				if (selectedIndex>0) {
					libraryList.validateNow();
					libraryList.ensureIndexIsVisible(selectedIndex);
				}
				
				
			}
			
			protected function library_dragEnterHandler(event:DragEvent):void {
				var containsDraggedItem:Boolean = libraryList.contains(event.dragInitiator as DisplayObject);
				
				if (Radiate.isAcceptableDragAndDropFormat(event.dragSource, true) && !containsDraggedItem) {
					DragManager.acceptDragDrop(IUIComponent(event.currentTarget));
				}
			}
			
			protected function library_dragOverHandler(event:DragEvent):void {
				var containsDraggedItem:Boolean = libraryList.contains(event.dragInitiator as DisplayObject);
				
				if (Radiate.isAcceptableDragAndDropFormat(event.dragSource, true) && !containsDraggedItem) {
					DragManager.acceptDragDrop(IUIComponent(event.currentTarget));
				}
			}
			
			public function library_dragDropHandler(event:DragEvent):void {
				var initiator:UIComponent;
				var snapshotTest:Boolean;
				var snapshot:Object;
				var imageData:ImageData;
				var format:String;
				var dragSource:DragSource;
				var hasURLFormat:Boolean;
				var hasFileListFormat:Boolean;
				var hasFilePromiseListFormat:Boolean;
				var isSelf:Boolean;
				var quality:String;
				var fileName:String;
				
				quality = StageQuality.BEST;
				
				if (event.dragInitiator) {
					isSelf = mainLibraryContainer.contains(event.dragInitiator as DisplayObject);
					if (isSelf) {
						return;
					}
				}
				
				dragSource = event.dragSource;
				
				if (dragSource.hasFormat("UIComponent")) {
					imageData = new ImageData();
					initiator = event.dragInitiator as UIComponent;
					
					// initiator will always be UIComponent with current drag manager
					if (initiator) {
						
						if (snapshotTest) {
							snapshot = DisplayObjectUtils.getSnapshotWithQuality(initiator, quality);
						}
						else {
							//if (initiator is IUIComponent) {
								snapshot = DisplayObjectUtils.getUIComponentBitmapData(initiator, quality);
							//}
							//else if (initiator is GraphicElement) {
							//	snapshot = DisplayObjectUtils.getGraphicElementBitmapData(initiator as IGraphicElement);
							//}
						}
						
						if (snapshot is BitmapData) {
							imageData.bitmapData = snapshot as BitmapData;
							imageData.byteArray = DisplayObjectUtils.getByteArrayFromBitmapData(snapshot as BitmapData);
							fileName = ClassUtils.getIdentifierNameOrClass(initiator);
							imageData.name = fileName + ".png";
							imageData.contentType = DisplayObjectUtils.PNG_MIME_TYPE;
							imageData.file = null;
							
							radiate.addAssetToDocument(imageData, radiate.selectedDocument);
							
							libraryList.selectedItem = imageData;
							
							searchCollection.clearSearch();
							
							Radiate.info("A snapshot of the selected item was added to the library");
						}
						else {
							Radiate.error("Could not create a snapshot of the selected item."); 
						}
					}
				}
			}
			
			public function list_keyUpHandler(event:KeyboardEvent):void {
				var popUpOpen:Boolean;
				
				if (event.keyCode==Keyboard.ESCAPE && openPopUp.isOpen) {
					openPopUp.close();
					return;
				}
				
				// show selected image from library
				//if (openPopUp.isOpen || popUpOpen)  {
					/*var imageData:ImageData = list.selectedItem as ImageData;
					
					if (imageData) {
						if (imageData.bitmapData) {
							openPopUp.data = imageData.bitmapData;
						}
						else if (imageData.url) {
							openPopUp.data = imageData.url;
						}
					}*/
				//}
				
				// if space bar is press open or close pop up
				if (event.keyCode==Keyboard.SPACE) {
					
					if (!openPopUp.isOpen) {
						showSelectedItemInPopUp();
						popUpOpen = true;
					}
					else {
						openPopUp.close();
					}
					
				}
				else {
					//popUpOpen = true;
				}
				
			}
			
			public function showSelectedItemInPopUp():void {
				libraryList.setFocus();
				var imageData:ImageData = libraryList.selectedItem as ImageData;
				
				if (imageData) {
					if (imageData.bitmapData) {
						openPopUp.data = imageData.bitmapData;
					}
					else if (imageData.url) {
						openPopUp.data = imageData.url;
					}
					
					if (!openPopUp.isOpen) {
						openPopUp.play();
					}
				}
			}
			
			protected function openInBrowserButton_clickHandler(event:MouseEvent):void
			{
				var imageData:ImageData = libraryList.selectedItem as ImageData;
				
				if (imageData && imageData.url) {
					Radiate.openInBrowser(imageData);
				}
				else {
					Radiate.warn("You must upload the file before being able to view it online.");
				}
			}
			
			/**
			 * DRAG TO DESKTOP CODE
			 * http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf64595-7fee.html
			 
			private function onMouseDown(event:MouseEvent):void { 
				var fileURL:String = "app:/image.jpg"; 
				var display:Bitmap ; 
				var bitmapFile:File = new File(fileURL); 
				var transferObject:Clipboard = createClipboard(display, bitmapFile); 
				NativeDragManager.doDrag(this,transferObject, display.bitmapData, new Point(-mouseX,-mouseY)); 
			} 
			
			public function createClipboard(image:Bitmap, sourceFile:File):Clipboard { 
				var transfer:Clipboard = new Clipboard(); 
				transfer.setData("bitmap",  
					image,  
					true);  
				// ActionScript 3 Bitmap object by value and by reference 
				transfer.setData(ClipboardFormats.BITMAP_FORMAT,  
					image.bitmapData,  
					false);  
				// Standard BitmapData format 
				transfer.setData(ClipboardFormats.FILE_LIST_FORMAT,  
					new Array(sourceFile),  
					false);  
				// Standard file list format 
				return transfer;  
			} 
			*/
			
			public function libraryFilterFunction(attachmentData:Object):Boolean {
				var imageData:ImageData = attachmentData as ImageData;
				var imageName:String = imageData ? imageData.name.toLowerCase() : "";
				var imageParentId:int = imageData ? int(imageData.parentId) : -1;
				var searchText:String;
				
				if (imageParentId!=documentID && imageParentId!=projectID) {
					return false;
				}
				
				searchText = searchCollection.text.toLowerCase();
				
				if (imageName.indexOf(searchText)==-1) {
					return false;
				}
				
				return true;
			}
			
			protected function documentChanged(event:RadiateEvent):void {
				updateDocuments();
				updateAssets();
			}
			
			
			public function updateDocuments():void {
				var iDocument:IDocument = radiate.selectedDocument;
				
				documentID = iDocument && iDocument.id!=null ? int(iDocument.id) : 0;
				
				if (iDocument && iDocument.project && iDocument.project.id) {
					projectID = int(iDocument.project.id);
				}
			}
			
			protected function openPopUp_closeHandler(event:Event):void {
				var imageView:ImageView;
				
				if (openPopUp.popUp) {
					imageView = openPopUp.popUp as ImageView;
					
					if (imageView) {
						imageView.data = null;
					}
					
					openPopUp.popUp = null;
				}
				
			}
			
			protected function handleDragDropIncomplete(event:DragDropEvent):void
			{
				 //trace("Drag drop incomplete");
			}
			
			protected function multipleUploadIcon_clickHandler(event:MouseEvent):void {
				var iDocument:IDocument = radiate.selectedDocument;
				var attachmentData:AttachmentData;
				var attachmentsToUpload:Array = radiate.getAssetsAvailableToUpload();
				
				if (radiate.isUserLoggedIn==false) {
					Radiate.info("You must be logged in.");
					return;
				}
				
				if (iDocument==null) {
					Radiate.info("No document available to upload to.");
				}
				else if (attachmentsToUpload.length==0) {
					Radiate.info("There are no items that have not been uploaded already.");
				}
				else {
					Radiate.info("Uploading items from the library...");
					Radiate.callAfter(250, radiate.saveAllAttachments, iDocument);
				}
			}
			
			public var inProgress:Boolean;
			
			protected function deleteAttachmentIcon_clickHandler(event:Event):void {
				var selectedItems:Array;
				var options:Object;
				var iDocument:IDocument;
				var attachments:Array;
				var isRemote:Boolean;
				var localRemoveSuccessful:Boolean;
				var attachmentData:AttachmentData;
				var attachmentIDs:Array;
				var shiftPressed:Boolean;
				
				if (event is DragEvent) {
					shiftPressed = DragEvent(event).shiftKey;
					//selectedItems = ArrayUtils.getArrayFromVector(DragEvent(event).draggedItem);
					selectedItems = ArrayUtils.getArrayFromVector(libraryList.selectedItems);
				}
				else {
					shiftPressed = MouseEvent(event).shiftKey;
					selectedItems = ArrayUtils.getArrayFromVector(libraryList.selectedItems);
				}
				
				iDocument = radiate.selectedDocument;
				
				if (iDocument==null) {
					Radiate.info("No document selected.");
					return;
				}
				
				if (selectedItems.length) {
					options = {};
					options.currentState = DeleteDocumentWindow.RESOURCES;
					options.attachments = selectedItems;
					attachments = selectedItems;
					
					if (shiftPressed) {
						
						if (attachments && attachments.length) {
							radiate.addEventListener(RadiateEvent.ATTACHMENTS_DELETED, deleteResultsHandler, false, 0, true);
							isRemote = true;
							attachmentIDs = [];
							
							for (var j:int = 0; j < attachments.length; j++) {
								attachmentData = attachments[j];
								
								if (attachmentData.id!=null) {
									attachmentIDs.push(attachmentData.id);
								}
							}
							
							if (attachmentIDs.length) {
								//radiate.addEventListener(RadiateEvent.DOCUMENT_REMOVED, deleteResultsHandler, false, 0, true);
								localRemoveSuccessful = radiate.removeAssetsFromDocument(attachments);
							}
							else {
								isRemote = false;
								localRemoveSuccessful = radiate.removeAssetsFromDocument(attachments, DocumentData.LOCAL_LOCATION);
							}
						}
						else {
							//infoLabel.text = "No items to delete";
							isRemote = false;
							return;
						}
					}
					else {
						
						openDeleteDocumentsPopUp.popUpOptions = options;
						openDeleteDocumentsPopUp.play();
					}
				}
				else {
					Radiate.info("No items selected.");
				}
			}
			
			protected function deleteItem_dragEnterHandler(event:DragEvent):void {
				var isAcceptable:Boolean = libraryList.contains(event.dragInitiator as DisplayObject);
				
				if (event.dragInitiator!=null && isAcceptable) {
					DragManager.acceptDragDrop(IUIComponent(event.currentTarget));
				}
			}
			
			protected function deleteItem_dragOverHandler(event:DragEvent):void {
				var isAcceptable:Boolean = libraryList.contains(event.dragInitiator as DisplayObject);
				
				if (event.dragInitiator!=null && isAcceptable) {
					DragManager.acceptDragDrop(IUIComponent(event.currentTarget));
				}
			}
			
			protected function deleteItem_dragDropHandler(event:DragEvent):void {
				deleteAttachmentIcon_clickHandler(event);
			}
			
			protected function deleteResultsHandler(event:RadiateEvent):void {
				var data:Object = event.data || event.selectedItem;
				var status:String = event.status;
				var successful:Boolean = event.successful;
				var error:String;
				var message:String = "";
				var iDocument:IDocument;
				var numberOfProjects:int;
				var eventType:String = event.type;
				var numberOfDocuments:int;
				
				iDocument = event.selectedItem as IDocument;
				inProgress = false;
				
				if (eventType==RadiateEvent.ATTACHMENTS_DELETED) {
					radiate.removeEventListener(RadiateEvent.ATTACHMENTS_DELETED, deleteResultsHandler);
				}
				
				// there was no remote attachments to delete
				if (data && "localDeleted" in data && data.localDeleted==true) {
					
					Radiate.info("Items deleted");
					return;
				}
				
				// TODO Loop through and replace with missing images
				if (status=="error") {
					
					if (data && "error" in data) {
						message += "Error. The item was not deleted. " + data.error + " ";
					}
					else {
						message += "Error. The item was not deleted. It may have been deleted already or was never saved. Save the project. ";
					}
				}
				else {
					if (data==null && iDocument!=null && iDocument.id!=null) {
						message += "Error. The item may have been deleted already. Reload or resave the project. ";
					}
				}
				
				if (event.faultEvent) {
					message += "Are you connected to the internet? ";
					
					if (event.faultEvent is IOErrorEvent) {
						message += IOErrorEvent(event.faultEvent).text;
					}
					else if (event.faultEvent is SecurityErrorEvent) {
						
						if (SecurityErrorEvent(event.faultEvent).errorID==2048) {
							
						}
						
						message += SecurityErrorEvent(event.faultEvent).text;
					}
				}
				
				//deleteWarningsLabel.text = message;
				if (successful) {
					Radiate.info("Items deleted");
					//playDeleteSuccessfulMessage();
				}
				else {
					//infoLabel.text = "";
				}
			}
			
			protected function layoutButton_clickHandler(event:MouseEvent):void
			{
				if (currentState=="list") {
					currentState = "grid";
				}
				else {
					currentState = "list";
				}
			}
			
			protected function attachmentsDeleted(event:Event):void
			{
				updateAssets();
			}
			
			protected function browseForFile_selectHandler(event:Event):void {
				var files:Array = browseForFile.fileList ? browseForFile.fileList : [];
				
				if (files.length) {
					radiate.selectItem(files);
				}
			
			}
			
			protected function copyImageDataIcon_clickHandler(event:MouseEvent):void {
				var imageData:ImageData = libraryList.selectedItem as ImageData;
				
				if (imageData) {
					if (imageData.bitmapData) {
						copyImageDataToClipboard.data = imageData.bitmapData;
						copyImageDataToClipboard.triggerEvent = event;
						copyImageDataToClipboard.play();
					}
					else if (imageData.url) {
						openPopUp.data = imageData.url;
					}
				}
			}
			
			protected function shareIcon_clickHandler(event:MouseEvent):void {
				var imageData:ImageData = libraryList.selectedItem as ImageData;
				
				if (imageData) {
					RunManager.copyURLToDocument(imageData, "image");
				}
				else {
					Radiate.warn("No item is selected in the library");
				}
			}
			
			protected function galleryButton_clickHandler(event:MouseEvent):void
			{
				openGalleryPopUp.play();
			}
			
			protected function deleteAttachmentIcon_dragDropHandler(event:DragEvent):void
			{
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="libraryCollection"/>
		
		<!-- SORT BY NAME -->
		<handlers:EventHandler eventName="creationComplete" >
			<collections:SortCollection target="{libraryCollection}" fields="{['name']}" />
		</handlers:EventHandler>
		
		<!--
		<handlers:EventHandler eventName="click" target="{copyImageDataIcon}" >
		</handlers:EventHandler>-->
			<clipboard:CopyToClipboard id="copyImageDataToClipboard" 
									   targetAncestor="{this}" 
									   format="{ClipboardFormats.BITMAP_FORMAT}"
									   allowNullData="true"
									   success="Radiate.info('The image was copied to the clipboard');"
									   noData="Radiate.info('Nothing was available to be copied to the clipboard');"
									   error="Radiate.info('An error occurred while attempting to copy to the clipboard');"
									   >
			</clipboard:CopyToClipboard>
		
		<!-- SHOW DELETE ATTACHMENTS POP UP -->
		<fc:OpenPopUp id="openDeleteDocumentsPopUp" 
					  popUpType="{DeleteDocumentWindow}" 
					  modalDuration="100" 
					  percentWidth="75"
					  percentHeight="90"
					  width="600"
					  parent="{parentApplication}"
					  />
		
		<!-- PREVIEW -->
		<fc:OpenPopUp id="openPopUp" 
						 modalDuration="250"
						 showDropShadow="true"
						 popUpType="{ImageView}"
						 autoCenter="true"
						 fitMaxSizeToApplication="true"
						 percentWidth="80"
						 percentHeight="80"
						 closePreviousInstanceIfOpen="true"
						 closeOnMouseDownOutside="true"
						 closeOnMouseDownInside="true"
						 close="openPopUp_closeHandler(event)"/>
		
		<!-- COPY TO THE CLIPBOARD -->
		<!--<handlers:EventHandler eventName="click" target="{shareIcon}" setTriggerEvent="true">
			
			<clipboard:CopyToClipboard id="copyToClipboard" 
									   data="{imageURLInput.text}" 
									   targetAncestor="{this}" 
									   allowNullData="true"
									   success="Radiate.info('URL to image copied to the clipboard');"
									   noData="Radiate.info('No URL was available to copy to the clipboard. Image must be uploaded.');"
									   error="Radiate.info('An error occurred while attempting to copy to the clipboard');"
									   >
				
			</clipboard:CopyToClipboard>
			
		</handlers:EventHandler>-->
		
		<fc:OpenPopUp id="openGalleryPopUp" 
					  popUpType="{GalleryWindow}" 
					  modalDuration="100" 
					  backgroundAlpha=".5"
					  parent="{parentApplication}"/>
		
		<!-- BROWSE FOR FILE --> 
		<handlers:EventHandler eventName="click" targets="{[browseForFileIcon,addImageLabel]}">
			<file:BrowseForFile id="browseForFile"
								fileTypes="png,jpg,jpeg,gif,psd"
								targetAncestor="{this}"
								allowMultipleSelection="true"
								select="browseForFile_selectHandler(event)">
			</file:BrowseForFile>
		</handlers:EventHandler>
	  
		<!-- SHOW DELETE RESOURCE POP UP -->
		<!--<handlers:EventHandler targets="{deleteAttachmentIcon}" eventName="click" 
							   enabled="{list.selectedItem!=null}">
			<fc:OpenPopUp id="openDeleteDocumentPopUp" 
						  popUpType="{DeleteDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:DeleteDocumentWindow.RESOURCE, documentData:list.selectedItem}}"
						  />
		</handlers:EventHandler>-->
	</fx:Declarations>
	
	<s:states>
		<s:State name="list"/>
		<s:State name="grid"/>
	</s:states>
	
	
	<mx:VDividedBox id="mainLibraryContainer" 
					width="100%" height="100%"
					top="0"
					left="8" 
					right="8" 
					bottom="40"
					>
		
		<s:Group height="24" 
				 minHeight="24"
				 maxHeight="60"
				 width="100%" 
				 >
			
			<inspectors:SearchCollection id="searchCollection" 
										 dataProvider="{libraryCollection}" 
										 filterFunction="libraryFilterFunction"
										 />
		</s:Group>
		
		
		<s:List id="libraryList" 
				width="100%" 
				height="100%"
				labelField="name" 
				dragEnabled="true"
				borderVisible="false"
				interactionMode="mouse"
				requireSelection="true"
				allowMultipleSelection="true"
				dataProvider="{libraryCollection}"
				itemRenderer="com.flexcapacitor.views.renderers.LibraryInspectorRenderer"
				change="list_changeHandler(event)"
				keyUp="list_keyUpHandler(event)"
				horizontalScrollPolicy="off"
				dragEnter="library_dragEnterHandler(event)"
				dragDrop="library_dragDropHandler(event)"
				dragOver="library_dragOverHandler(event)"
				>
			
			<s:layout.grid>
				<s:TileLayout useVirtualLayout="true" 
							  horizontalGap="10" 
							  verticalGap="10" 
							  paddingLeft="10" 
							  paddingTop="10"
							  columnWidth="50"/>
			</s:layout.grid>
			
			<s:layout.list>
				<s:VerticalLayout clipAndEnableScrolling="true"
								  gap="0"
								  horizontalAlign="contentJustify"
								  paddingBottom="0"
								  paddingTop="0"
								  paddingLeft="0"
								  paddingRight="0"
								  variableRowHeight="true"
								  verticalAlign="top"
								  useVirtualLayout="true"/>
			</s:layout.list>
		</s:List>
	
		
	</mx:VDividedBox>
	
	<s:BorderContainer width="100%" borderWeight="0" borderVisible="false" bottom="0">
		<s:layout>
			<s:VerticalLayout paddingLeft="8" paddingRight="8" paddingBottom="6" paddingTop="4"/>
		</s:layout>
		
		<s:HGroup width="100%"
				 height="24"
				 minHeight="24"
				 verticalAlign="middle"
				 >
			<c:BeveledImageButton id="layoutButton" 
								  source.grid="{Radii8LibraryAssets.grid}" 
								  source.list="{Radii8LibraryAssets.list}" 
								  toolTip.grid="Change view to list"
								  toolTip.list="Change view to grid"
								  click="layoutButton_clickHandler(event)"
								  visible="true"
								  alpha=".6"/>
			
			<c:BeveledImageButton id="browseForFileIcon" 
					 source="{Radii8LibraryAssets.newFile}" 
					 toolTip="Add an image to the document library"
					 />
			
			<c:BeveledImageButton id="openInBrowserButton" 
								  source="{Radii8LibraryEffectsAssets.play}" 
								  toolTip="View in the browser"
								  click="openInBrowserButton_clickHandler(event)"
								  />
			
			
			<s:TextInput id="imageURLInput" 
						   left="0" right="0" top="0" 
						   width="100%"
						   minWidth="60" 
						   prompt=""
						   styleName="inputStyles"
						   includeInLayout="false"
						   visible="false"
						   />
			
			<c:BeveledImageButton id="galleryButton" 
								  source="{Radii8LibraryAssets.gallery}" 
								  toolTip="Open clip art gallery"
								  click="galleryButton_clickHandler(event)"
								  visible="true"
								  alpha=".6"/>
			
			<s:HGroup verticalAlign="bottom"
					  includeInLayout="true"
					  visible="false"
					  width="100%">
				<s:Spacer width="4"/>
				<s:BorderContainer id="thumnailImage" 
								   width="12" height="12"
								   backgroundColor="#cccccc"
								   borderVisible="false"
								   useHandCursor="true"
								   buttonMode="true"
								   toolTip="Thumbnail URL"
								   click="thumbnailImage_clickHandler(event)"
								   />
				
				<!--<s:BorderContainer id="smallImage" 
								   width="12" height="12"
								   backgroundColor="gray"
								   borderVisible="false"
								   useHandCursor="true"
								   buttonMode="true"
								   toolTip="Small Image URL"
								   click="smallImage_clickHandler(event)"
								   />-->
				<s:BorderContainer id="mediumImage" 
								   width="14" height="14"
								   backgroundColor="#cccccc"
								   borderVisible="false"
								   useHandCursor="true"
								   buttonMode="true"
								   toolTip="Medium Image URL"
								   click="mediumImage_clickHandler(event)"
								   />
				
				<s:BorderContainer id="fullImage" 
								   width="14" height="16"
								   backgroundColor="#cccccc"
								   borderVisible="false"
								   useHandCursor="true"
								   buttonMode="true"
								   toolTip="Original Image URL"
								   click="fullImage_clickHandler(event)"
								   />
				
			</s:HGroup>
			
			
			<c:BeveledImageButton id="shareIcon" 
								  source="{Radii8LibraryAssets.share}" 
								  toolTip="Share - copies the URL of the selected image to the clipboard. Image must be uploaded."
								  width="16"
								  height="22"
								  click="shareIcon_clickHandler(event)"
								  />
			
			<c:BeveledImageButton id="showPreviewIcon" 
								  source="{Radii8LibraryAssets.image}" 
								  toolTip="Show a preview of the selected image. Click anywhere or press space bar to return"
								  click="showSelectedItemInPopUp()"/>
			
			<c:BeveledImageButton id="copyImageDataIcon" 
								  source="{Radii8LibraryAssets.copy}" 
								  toolTip="Copy the image bitmap data to the Clipboard."
								  click="copyImageDataIcon_clickHandler(event)"/>
			
			<c:BeveledImageButton id="multipleUploadIcon" 
								  source="{Radii8LibraryAssets.multipleUpload}" 
								  toolTip="Upload all images not uploaded"
								  click="multipleUploadIcon_clickHandler(event)"
								  visible="true"
								  alpha=".8"/>
			
			<c:BeveledImageButton id="refreshIcon" 
					 source="{Radii8LibraryAssets.refresh}" 
					 toolTip="Refresh"
					 click="refreshIcon_clickHandler(event)"/>
			
			<c:BeveledImageButton id="deleteAttachmentIcon" 
						   source="{Radii8LibraryAssets.trashCan}" 
						   toolTip="Remove Attachment"
						   click="deleteAttachmentIcon_clickHandler(event)"
						   dragEnter="deleteItem_dragEnterHandler(event)"
						   dragOver="deleteItem_dragOverHandler(event)"
						   dragDrop="deleteItem_dragDropHandler(event)"
						   />
		</s:HGroup>
	</s:BorderContainer>
	
	
	<c:LabelButton id="addImageLabel" 
				   text="Drag and drop or click here to add items"
				   color="#888888" 
				   verticalAlign="middle" 
				   textAlign="center"
				   backgroundAlpha="0.1"
				   visible="{libraryCollection.length==0}" 
				   includeInLayout="{libraryCollection.length==0}"
				   width="100%"
				   height="100%"
				   bottom="40"
				   dragEnter="library_dragEnterHandler(event)"
				   dragDrop="library_dragDropHandler(event)"
				   dragOver="library_dragOverHandler(event)"
				   />
</s:Group>
