<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:collections="com.flexcapacitor.effects.collections.*"
		 xmlns:components="com.flexcapacitor.components.*" 
		 xmlns:flexiframe="com.google.code.flexiframe.*" 
		 
		 minWidth="200" 
		 minHeight="100"
		 implements="com.flexcapacitor.views.IInspector"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.RunManager;
			import com.flexcapacitor.managers.ServicesManager;
			import com.flexcapacitor.model.MetaData;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			import com.flexcapacitor.utils.HTMLUtils;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.core.IUIComponent;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			
			
			/**
			 * Reference to Radiate
			 * */
			public var radiate:Radiate;
			
			public var lastURL:String;
			public var lastDocumentName:String;
			public var documentationViewer:IUIComponent;
			
			public function activate():void {
				radiate = Radiate.getInstance();
				serviceManager = ServicesManager.getInstance();
				
				if (newsCollection.length==0) {
					updateCheckNews();
				}
				
				serviceManager.addEventListener(RadiateEvent.BLOG_POSTS_RECEIVED, blogPostsReceivedHandler, false, 0, true);
				serviceManager.getNewsPosts();
				
				if (Radiate.isDesktop) {
					currentState = "desktop";
					
					if (documentationViewer==null) {
						documentationViewer = HTMLUtils.createInstance();
						UIComponent(documentationViewer).percentWidth = 100;
						UIComponent(documentationViewer).percentHeight = 100;
						IVisualElement(documentationViewer).top = 28;
						docsContainer.addChildAt(DisplayObject(documentationViewer), docsContainer.numChildren);
					}
				}
				else {
					currentState = "web";
				}
				
				//updateDocumentation();
			}
			
			protected function blogPostsReceivedHandler(event:RadiateEvent):void {
				var posts:Array = serviceManager.parsePostsData(event.data);
				newsCollection.source = posts;
				
				if (newsCollection.length==0) {
					updateCheckNews(0);
					//openPreviousProject.enabled = false;
				}
				else {
					updateCheckNews(1);
				}
			}
			
			[Bindable]
			public var serviceManager:ServicesManager;
			
			public function deactivate():void {
				if (serviceManager) {
					serviceManager.removeEventListener(RadiateEvent.BLOG_POSTS_RECEIVED, blogPostsReceivedHandler);
				}
			}
			
			/**
			 * Updates the label checking for news
			 * -1 = checking
			 * 0 = no news available
			 * 1 = projects found
			 * */
			private function updateCheckNews(status:int = -1):void
			{
				
				if (status==-1) {
					checkingForNewsLabel.text = "Checking for news...";
					checkingForNewsLabel.includeInLayout = true;
					checkingForNewsLabel.visible = true;
				}
				else if (status==0) {
					checkingForNewsLabel.text = "No tutorials available";
					checkingForNewsLabel.includeInLayout = true;
					checkingForNewsLabel.visible = true;
				}
				else if (status==1) {
					checkingForNewsLabel.text = "";
					checkingForNewsLabel.includeInLayout = false;
					checkingForNewsLabel.visible = false;
				}
			}

			protected function showDocsCheckbox_changeHandler(event:Event):void {
				
				updateDocumentation();
			}
			
			protected function openInSeparateWindow_changeHandler(event:Event):void {
				
				updateDocumentation();
				
				if (openInSeparateWindow.selected) {
					Radiate.info("Opening documentation in separate window. Updates will appear there.");
				}
			}
			
			public function updateDocumentation():void {
				
				if (showDocsCheckbox.selected) {
					
					if (openInSeparateWindow.selected) {
						var request:URLRequest = new URLRequest(lastURL);
						
						navigateToURL(request, "documentation");
						
						if (Radiate.isDesktop) {
							Object(documentationViewer).location = "";
						}
						else {
							if (docsFrame.source!="" || docsFrame.source!="about:blank") {
								docsFrame.source = "";
							}
						}
					}
					else {
						
						if (Radiate.isDesktop) {
							Object(documentationViewer).location = lastURL;
						}
						else {
							docsFrame.source = lastURL;
						}
					}
					
					if (showURL.selected) {
						textURL.text = lastURL;
					}
					else {
						textURL.text = lastDocumentName;
					}
				}
				else {
					
					if (Radiate.isDesktop) {
						Object(documentationViewer).location = "about:blank";
					}
					else {
						docsFrame.source = "about:blank";
					}
					textURL.text = "";
				}
			}
			
			protected function showURL_changeHandler(event:Event):void {
				if (showURL.selected) {
					textURL.text = lastURL;
				}
				else {
					textURL.text = lastDocumentName;
				}
			}
			
			protected function shareIcon_clickHandler(event:MouseEvent):void
			{
				if (lastURL) {
					RunManager.copyURLToClipboard(lastURL);
				}
				else {
					Radiate.info("No documentation is open");
				}
			}
			
			protected function newsList_doubleClickHandler(event:MouseEvent):void {
				var request:URLRequest;
				
				if (newsList.selectedItem) {
					lastDocumentName = newsList.selectedItem.name;
					lastURL = newsList.selectedItem.url;
					updateDocumentation();
				}
				
			}
			
			protected function newsLabel_clickHandler(event:MouseEvent):void
			{
				updateCheckNews(-1);
				serviceManager.getNewsPosts();	
			}
			
			[Bindable]
			public var newsCollection:ArrayCollection = new ArrayCollection();
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="desktop"/>
		<s:State name="web"/>
	</s:states>
	
	<mx:HDividedBox id="docsContainer" bottom="28" width="100%" height="100%" left="6" >
		<s:VGroup height="100%" width="200">
			<c:LabelButton text="News and Tutorials" fontWeight="bold" click="newsLabel_clickHandler(event)"/>
			
			<s:Label id="checkingForNewsLabel" 
					 text="Checking for news..." 
					 fontStyle="italic"
					 color="#989898"
					 visible="false"
					 includeInLayout="false"/>
			<s:List id="newsList" 
					width="100%"
					minHeight="90"
					height="100%"
					borderVisible="false"
					dataProvider="{newsCollection}"
					labelField="title"
					
					click="newsList_doubleClickHandler(event)"
					/>
		</s:VGroup>
		<!-- Desktop webview goes here at runtime -->
		<flexiframe:IFrame includeIn="web" id="docsFrame" top="28" width="100%" height="100%" />
	</mx:HDividedBox>
	
	
	<s:HGroup left="0" right="0" 
			  width="100%" bottom="0"
			  clipAndEnableScrolling="true" 
			  paddingLeft="6" 
			  paddingRight="10"
			  >
		<s:TextInput id="textURL" 
					 width="100%" 
					 color="#A6a5a5" 
					 borderColor="#A5A5A5"
					 borderVisible="false"
					 focusAlpha="0"
					 editable="false"
					 prompt=""/>
		<s:CheckBox id="showURL" label="Show URL" 
					selected="false"
					change="showURL_changeHandler(event)"/>
		<s:CheckBox id="openInSeparateWindow" label="Open in Window" 
					change="openInSeparateWindow_changeHandler(event)"/>
		<s:CheckBox id="showDocsCheckbox" 
					label="Enabled" 
					change="showDocsCheckbox_changeHandler(event)"
					selected="true"
					/>
		
		<c:BeveledImageButton id="shareIcon" 
							  source="{Radii8LibraryAssets.share}" 
							  toolTip="Share"
							  click="shareIcon_clickHandler(event)"
							  width="16"
							  height="22"
							  />
	</s:HGroup>
</s:Group>
