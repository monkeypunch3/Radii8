<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:flexcapacitor="flexcapacitor.*" 
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:collections="com.flexcapacitor.effects.collections.*" 
		 xmlns:inspectors="com.flexcapacitor.views.inspectors.*"
		 
		 implements="com.flexcapacitor.views.IInspector" 
		 width="400" 
		 height="300" 
		 >
	
	<!-- 
	The list of components to include come from spark-manifest-defaults.xml 
	in Radii8LibrarySparkAssets. The include attribute must be set to true for them to be visible. 
	
	The component classes are included by creating a reference to them in Radii8LibrarySparkAssets.
	
	We create an instance of the class in the mouse down handler. 
	-->
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.DragDropEvent;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.ComponentManager;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.utils.DragManagerUtil;
			import com.flexcapacitor.utils.supportClasses.ComponentDefinition;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			import com.flexcapacitor.views.IInspector;
			
			import mx.core.ClassFactory;
			import mx.core.IVisualElement;
			import mx.events.DragEvent;
			
			import spark.components.Application;
			import spark.components.Group;
			import spark.components.Label;
			import spark.components.supportClasses.GroupBase;
			import spark.primitives.Line;
			
			private var target:Object;
			private var currentComponentDescription:ComponentDescription;
			public var componentDefinition:ComponentDefinition;
			private var radiate:Radiate;
			private var dragManagerInstance:DragManagerUtil;
			public var currentDocument:IDocument;
			
			public var debug:Boolean;
			
			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.instance;
				
				components.source = ComponentManager.componentDefinitions.source;
			}
			
			public function deactivate():void {
				target = null;
				currentDocument = null;
				currentComponentDescription = null;
				componentDefinition = null;
			}
			
			protected function targetChangeHandler(event:RadiateEvent):void {
				target = event.selectedItem;
			}
			
			/**
			 * Listen for drag movement and start dragging if drag tolerance is met
			 * */
			public function rowGroupMouseDownHandler(event:MouseEvent, data:Object, itemIndex:int):void {
				var classFactory:ClassFactory;
				var application:Application;
				var component:Object;
				var rowGroup:Group;
				
				currentDocument = Radiate.selectedDocument;
				
				currentComponentDescription = null;
				
				componentDefinition = ComponentDefinition(data);
				
				dropTargetLabel.text = "";
				
				rowGroup = event.currentTarget as Group;
				
				event.stopImmediatePropagation();
				//list.dragEnabled = false;
				
				application = currentDocument && currentDocument.instance ? currentDocument.instance as Application : null;
				
				if (!application) return;
				
				component = ComponentManager.createComponentToAdd(currentDocument, componentDefinition, false);
				
				if (component is Line) {
					ComponentManager.updateComponentAfterAdd(currentDocument, component);
				}
				
				currentComponentDescription = currentDocument.getItemDescription(component);
				
				currentComponentDescription.defaultProperties = componentDefinition.defaultProperties;
				currentComponentDescription.defaultStyles = componentDefinition.defaultStyles;
				
				if (!dragManagerInstance) {
					dragManagerInstance = DragManagerUtil.getInstance();
				}
				
				rowGroup.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				rowGroup.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);
				
				//dragManagerInstance.listenForDragBehavior(rowGroup, application, event, component);
				dragManagerInstance.listenForDragBehavior(rowGroup, currentDocument, event, component);
				dragManagerInstance.removeEventListener(DragDropEvent.DRAG_DROP, handleDragDrop);
				dragManagerInstance.removeEventListener(DragEvent.DRAG_OVER, handleDragOver);
				dragManagerInstance.removeEventListener(DragDropEvent.DRAG_DROP_COMPLETE, handleDragDropComplete);
				
				dragManagerInstance.addEventListener(DragDropEvent.DRAG_DROP, handleDragDrop);
				dragManagerInstance.addEventListener(DragEvent.DRAG_OVER, handleDragOver);
				dragManagerInstance.addEventListener(DragDropEvent.DRAG_DROP_COMPLETE, handleDragDropComplete);
				
				// DRAG DROP 
				// is continued in 
				// DragManagerUtil.dragDropHandler()
				
				// and then in handleDragDrop() here
				// and then in handleDragDropComplete here
			}
			
			/**
			 * Remove mouse handlers from row
			 * */
			protected function mouseUpHandler(event:MouseEvent):void {
				event.currentTarget.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
			}
			
			/**
			 * Handles drag drop event. This is only the first part of adding to the stage. 
			 * We can prevent automatic adding by calling event.preventDefault().
			 * If we do not call preventDefault dragDropComplete is the next event to be called. 
			 * */
			protected function handleDragDrop(event:DragDropEvent):void {
				var component:Object = event.draggedItem;
				
				dragManagerInstance.removeEventListener(DragDropEvent.DRAG_DROP, handleDragDrop);
				dropTargetLabel.text = "Drag drop to:" + dragManagerInstance.dropTargetName;
				
				dragManagerInstance.removeEventListener(DragEvent.DRAG_OVER, handleDragOver);
			}

			/**
			 * Dispatched after drag drop event. Drag drop can be canceled. If it
			 * is not canceled this event happens. 
			 * */
			protected function handleDragDropComplete(event:DragDropEvent):void {
				var component:Object = event.draggedItem;
				
				// there is a bug where event listener for drag and drop (fixed?)
				// is not removed. possibly when switching tools
				// so until at some point we find it we'll return for now
				// CHECK OUT LIBRARYINSPECTOR.mxml for comparison and possible answers there
				if (currentComponentDescription==null) return;
				
				// if new component then need to add defaults
				ComponentManager.setDefaultProperties(currentComponentDescription);
				
				ComponentManager.updateComponentAfterAdd(currentDocument, component);
				
				if (component is GroupBase) {
					dragManagerInstance.addGroupListeners(component as IVisualElement);
				}
				
				dragManagerInstance.removeEventListener(DragDropEvent.DRAG_DROP_COMPLETE, handleDragDropComplete);
				dropTargetLabel.text = "Drag Complete to:" + dragManagerInstance.dropTargetName;
				
				dragManagerInstance.removeEventListener(DragEvent.DRAG_OVER, handleDragOver);
				
				radiate.setTarget(component);
			}
			
			protected function handleDragOver(event:Event):void {
				if (debug) {
					dropTargetLabel.text = "Drag over: " + dragManagerInstance.dropTargetName;
				}
			}
			
			protected function list_dragStartHandler(event:DragEvent):void {
				
			}
			
			public function filterComponentsFunction(item:Object):Boolean {
				
				if (item && item.enabled) {
					return true;
				}
				
				return false;
			}
			
			/**
			 * Filter function the components
			 **/
			public function componentsFilterFunction(componentsDefinition:ComponentDefinition):Boolean {
				var searchText:String;
				var componentName:String;
				var caseSensitive:Boolean;
				
				caseSensitive = searchCollection.caseSensitive.selected;
				
				searchText = searchCollection.text;
				searchText = caseSensitive ? searchText : searchText.toLowerCase();
				
				componentName = componentsDefinition.name;
				componentName = caseSensitive ? componentName : componentName.toLowerCase();
				
				if (componentsDefinition.enabled==false) {
					return false;
				}
				
				if (searchCollection.searchAtStart.selected) {
					if (componentName.indexOf(searchText)!=0) {
						return false;
					}
				}
				else {
					if (componentName.indexOf(searchText)==-1) {
						return false;
					}
				}
				
				return true;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="components" filterFunction="filterComponentsFunction"/>
			
		<handlers:EventHandler eventName="creationComplete" >
			<collections:SortCollection target="{components}" fields="{['name']}" />
		</handlers:EventHandler>

	</fx:Declarations>
	
	
	
	<mx:VDividedBox id="mainLibraryContainer" 
					width="100%" height="100%"
					top="0"
					left="8" 
					right="8" 
					bottom="8"
					>
		
		<s:Group height="24" 
				 minHeight="24"
				 maxHeight="60"
				 width="100%" 
				 >
			
			<inspectors:SearchCollection id="searchCollection" 
										 dataProvider="{components}" 
										 filterFunction="componentsFilterFunction"
										 />
		</s:Group>
	
		<s:List id="list" 
				width="100%" 
				height="100%"
				labelField="displayName" 
				dragEnabled="true"
				borderVisible="false"
				interactionMode="mouse"
				dataProvider="{components}"
				dragStart="list_dragStartHandler(event)"
				itemRenderer="com.flexcapacitor.views.renderers.ComponentsRenderer"
				>
		</s:List>
	
		<s:Label id="dropTargetLabel" 
				 width="100%" 
				 paddingLeft="4" 
				 paddingTop="4" 
				 visible="false" 
				 includeInLayout="false"/>
	</mx:VDividedBox>
</s:Group>
