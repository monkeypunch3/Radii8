<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:flexcapacitor="flexcapacitor.*" 
		 xmlns:views="com.flexcapacitor.views.*" 
		 
		 minWidth="200" 
		 minHeight="100"
		 implements="com.flexcapacitor.views.IInspector" 
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.model.MetaData;
			import com.flexcapacitor.utils.ClassUtils;
			
			/**
			 * Reference to Radiate
			 * */
			public var radiate:Radiate;
			
			//public var syntaxHighlighter:SyntaxHighlighter;
			public var syntaxHighlighter:Object;
			
			public var rawData:String;
			
			public var lastTarget:Object;
			
			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.instance;
				
				radiate.addEventListener(RadiateEvent.PROPERTY_SELECTED, propertySelectedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.OBJECT_SELECTED, objectSelectedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler, false, 0, true);
			
				if (aceEditor!=null) {
					
					findInput.aceEditor = aceEditor;
				}
				
				if (radiate.target) {
					updateObject(radiate.target);
				}
				
				if (aceEditor) {
					aceEditor.visible = true;
				}
			}
			
			public function deactivate():void {
				
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.PROPERTY_SELECTED, propertySelectedHandler);
					radiate.removeEventListener(RadiateEvent.OBJECT_SELECTED, objectSelectedHandler);
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler);
				}
				//fontFamily="Monaco,Menlo,Ubuntu Mono,Consolas,source-code-pro,monospace";
				aceEditor.text = "";
				aceEditor.visible = false;
				lastTarget = null;
			}
			
			
			public function updateObject(object:Object):void {
				//rawData = String(object);// ObjectUtil.toString(value);
				
				if (lastTarget==object || object==null) {
					if (Radiate.isDesktop && aceEditor.text=="") {					
						return;
					}
				}
				
				descriptionBox.target = object;
				
				rawData = ClassUtils.getDescribeType(object);
				
				aceEditor.text = rawData;
				
				lastTarget = object;
			}
			
			protected function propertySelectedHandler(event:RadiateEvent):void {
				var metadata:MetaData = event.selectedItem as MetaData;
				var newData:String;
				
				//trace("property change event");
				
				newData = metadata.raw;
				if (rawData==newData) {
					//trace("data hasn't changed");
					return;
				}
				
				rawData = newData;
				
				aceEditor.text = rawData;
			}
			
			protected function objectSelectedHandler(event:RadiateEvent):void {
				var object:Object = event.selectedItem;
				updateObject(object);
				//var valueObject:Object = ObjectUtil.getClassInfo(object);
				//var value:String = ObjectUtil.toString(valueObject);
				
				//trace("property change event");
				
				//if (rawData==value) {
					//trace("data hasn't changed");
				//	return;
				//}
			}
			
			protected function targetChangeHandler(event:RadiateEvent):void {
				updateObject(event.selectedItem);
			}
			
			private function mxTextAreaChangeHandler():void {
				//trace("change handler:" + getTimer())
				if (!syntaxHighlighter) {
					/*syntaxHighlighter = new SyntaxHighlighter(mxTextArea);
					syntaxHighlighter.timerInterval = 20;
					syntaxHighlighter.cssString = SyntaxHighlighter.CRIMSON_EDITOR_CSS;
					syntaxHighlighter.addEventListener(Event.COMPLETE, completeHandler, false, 0, true);*/
				}
				
				// do not highlight - it's too slow and slows everything else down
				// syntaxHighlighter.highlightCode();
			}
			
			protected function completeHandler(event:Event):void {
				//trace("complete event:" + getTimer());
			}
			
			
			protected function superClass_clickHandler(event:MouseEvent):void
			{
				if (lastTarget) {
					var object:Object = ClassUtils.getSuperClassDefinition(lastTarget);
					updateObject(object);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="none"/>
	</s:states>
	
	<mx:HDividedBox id="groupContent" width="100%" height="100%" liveDragging="true">
		<s:Scroller height="100%" >
			<s:VGroup width="100%" height="100%">
				<views:Description id="descriptionBox" showDescriptionLabel="false" left="10" top="10" width="350" minWidth="350"/>
				<s:Form >
					<s:layout>
						<s:FormLayout paddingBottom="0" paddingTop="0" gap="-4"/>
					</s:layout>
					<s:FormItem label="Get super class:"><s:Button label="Super class" click="superClass_clickHandler(event)"/></s:FormItem>
					<s:FormItem label="Search metadata:"><c:AceSearchTextInput id="findInput" top="0" right="20" /></s:FormItem>
				</s:Form>
			</s:VGroup>
		</s:Scroller>

		<c:AceEditor id="aceEditor" 
					 width="100%" 
					 height="100%"
					 top="0" left="2"
					 isReadOnly="true" 
					 showGutter="true"
					 mode="ace/mode/xml" 
					 showFoldWidgets="true" 
					 useWordWrap="true"
					 scrollSpeed=".5"
					 />
	</mx:HDividedBox>
	
	<!--<s:TextArea id="metadataTextArea" 
				top="8"
				focusColor="#585858"
				width="100%" height="100%" 
				fontFamily="Courier New"
				borderVisible="false"
				paddingTop="8"
				fontSize="13"
				prompt="No metadata available. Select a property, style or event.">
		<s:keyFocusChange>
			event.preventDefault();
			event.currentTarget.insertText("\t");
        </s:keyFocusChange>
	</s:TextArea>

	<mx:TextArea id="mxTextArea"  
				 top="8"
				 left="2"
				 focusAlpha="0"
				 fontFamily="Monaco,Menlo,Ubuntu Mono,Consolas,source-code-pro,monospace"
				 borderVisible="false"
				 paddingTop="8"
				 fontSize="12"
				 width="100%" height="100%"
				 editable="false"
				 leading="0"
				 includeIn="browser"
				 />-->
	
	<s:Label id="noDataLabelDesktop" 
				top="8"
				left="2"
				paddingTop="8"
				color="#484848"
				width="100%" height="100%" 
				fontSize="13"
				visible="false"
				text="No metadata available. Select a property, style or event."
				/>
	
	
	
	
</s:Group>
