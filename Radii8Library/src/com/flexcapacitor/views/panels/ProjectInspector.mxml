<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:flexcapacitor="flexcapacitor.*"
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:fc="com.flexcapacitor.effects.popup.*"
		 xmlns:e="com.flexcapacitor.handlers.*"
		 
		 width="200" height="100%"
		 implements="com.flexcapacitor.views.IInspector" 
		 >
	
	<!-- we should show the documents here as well -->
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.AutoSaveManager;
			import com.flexcapacitor.managers.DeferManager;
			import com.flexcapacitor.managers.DocumentManager;
			import com.flexcapacitor.managers.ProfileManager;
			import com.flexcapacitor.managers.ProjectManager;
			import com.flexcapacitor.managers.RunManager;
			import com.flexcapacitor.managers.ServicesManager;
			import com.flexcapacitor.managers.SettingsManager;
			import com.flexcapacitor.model.DocumentData;
			import com.flexcapacitor.model.IProject;
			import com.flexcapacitor.utils.ArrayUtils;
			import com.flexcapacitor.views.windows.DeleteDocumentWindow;
			import com.flexcapacitor.views.windows.PublishWindow;
			
			import spark.collections.SortField;
			import spark.events.IndexChangeEvent;
			
			
			[Bindable]
			private var radiate:Radiate;
			
			[Bindable]
			public var serviceManager:ServicesManager;
			

			public function activate(selectedTarget:Object = null):void {
				radiate = Radiate.instance;
				serviceManager = ServicesManager.getInstance();
				
				radiate.addEventListener(RadiateEvent.PROJECT_CHANGE, projectChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROJECT_ADDED, projectCreatedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROJECT_CREATED, projectCreatedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROJECT_REMOVED, projectRemovedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROJECT_DELETED, projectRemovedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.PROJECT_SAVED, projectSavedHandler, false, 0, true);
				
				
				radiate.addEventListener(RadiateEvent.DOCUMENT_ADDED, documentChangedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_REMOVED, documentChangedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_DELETED, documentChangedHandler, false, 0, true);
				
				serviceManager.addEventListener(RadiateEvent.PROJECTS_LIST_RECEIVED, receivedProjectsHandler, false, 0, true);
				
				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.PROJECT_CHANGE, projectChangeHandler);
					radiate.removeEventListener(RadiateEvent.PROJECT_ADDED, projectCreatedHandler);
					radiate.removeEventListener(RadiateEvent.PROJECT_CREATED, projectCreatedHandler);
					radiate.removeEventListener(RadiateEvent.PROJECT_REMOVED, projectRemovedHandler);
					radiate.removeEventListener(RadiateEvent.PROJECT_DELETED, projectRemovedHandler);
					radiate.removeEventListener(RadiateEvent.PROJECT_SAVED, projectSavedHandler);
					
					
					radiate.removeEventListener(RadiateEvent.DOCUMENT_ADDED, documentChangedHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_REMOVED, documentChangedHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_DELETED, documentChangedHandler);
				}
				
				if (serviceManager) {
					serviceManager.removeEventListener(RadiateEvent.PROJECTS_LIST_RECEIVED, receivedProjectsHandler);
				}
			}
			
			protected function update():void {

				if (Radiate.selectedProject) {
					updateSelectedItem(Radiate.selectedProject);
				}				
			}
			
			/**
			 * 
			 * */
			private function labelFunction(data:Object):String {
				return data.name;
			}
			
			/**
			 * 
			 * */
			protected function projectChangeHandler(event:RadiateEvent):void {
				//updateProjects();
				updateSelectedItem(event.selectedItem as IProject);
			}
			
			/**
			 * Handle when getting result of list of projects
			 * */
			protected function receivedProjectsHandler(event:RadiateEvent):void {
				var remoteProjects:Array;
				var sortFields:Array = [];
				var dateSortField:SortField;
				var descending:Boolean = true;
				var localProjects:Array;
				var localProject:IProject;
				var remoteProject:IProject;
				var projectExistsLocally:Boolean;
				
				dateSortField = new SortField("dateSaved", descending);
				sortFields.push(dateSortField);
				
				remoteProjects = ProjectManager.parseProjectsData(event.data);
				localProjects = ProjectManager.projects;
				
				// add projects we don't have yet
				for (var i:int = 0; i < remoteProjects.length; i++)  {
					remoteProject = remoteProjects[i];
					projectExistsLocally = ArrayUtils.hasItem(localProjects, remoteProject, "id");
					
					//if (!projectExistsLocally) {
						ProjectManager.addProject(remoteProject);
					//}
				}
				
				updateProjects();
			}
			
			private function updateProjects():void {
				projects.refresh();
				
				// must call validate now so selected index doesn't revert if a new project is selected
				list.validateNow();
			}
			
			private function updateSelectedItem(project:IProject):void {
				list.selectedItem = project;
			}
			
			public function projectCreatedHandler(event:RadiateEvent):void {
				updateProjects();
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void {
				var project:IProject = list.selectedItem ? IProject(list.selectedItem) : null;
				
				if (project && project.isOpen) {
					Radiate.setProject(project);
				}
			}
			
			protected function publishButton_clickHandler(event:MouseEvent):void {
				
			}
			
			protected function saveProjectOnlyIcon_clickHandler(event:MouseEvent):void {
				ProjectManager.saveProjectOnly(Radiate.selectedProject);
				//radiate.save();
				SettingsManager.saveSettings();
			}
			
			protected function saveProjectIcon_clickHandler(event:MouseEvent):void {
				ProjectManager.saveProject(Radiate.selectedProject);
				//radiate.save();
				SettingsManager.saveSettings();
			}
			
			protected function getSavedProjectsIcon_clickHandler(event:MouseEvent):void {
				SettingsManager.getSavedData();
				SettingsManager.getSettingsData();
			}
			/*
			protected function deleteProjectIcon_clickHandler(event:MouseEvent):void {
				var selectedProject:IProject = list.selectedItem as IProject;
				
				if (selectedProject) {
					ProjectManager.removeProject(selectedProject);
				}
				else {
					Radiate.info("Please select a project");
				}
			}*/
			
			protected function newProjectIcon_clickHandler(event:MouseEvent):void {
				//radiate.createProject();
				//ProjectManager.addProject(radiate.createProject(), true, true, true);
				DocumentManager.createBlankDemoDocument();
			}
			
			protected function removeSavedDataIcon_clickHandler(event:MouseEvent):void {
				SettingsManager.removeSavedData();
				SettingsManager.removeSavedSettings();
			}
			
			/**
			 * Handle when a project has been removed
			 * */
			protected function projectRemovedHandler(event:Event):void {
				updateProjects();
				
				if (ProjectManager.projects.length>0) {
					Radiate.setProject(ProjectManager.projects[0], true);
				}
			}
			
			protected function closeProjectIcon_clickHandler(event:MouseEvent):void {
				var project:IProject = list.selectedItem ? IProject(list.selectedItem) : null;
				
				if (project) {
					ProjectManager.closeProject(project);
				}
			}
			
			protected function openProjectsIcon_clickHandler(event:MouseEvent):void {
				var project:IProject = list.selectedItem ? IProject(list.selectedItem) : null;
				
				if (project) {
					ProjectManager.openProject(project, DocumentData.INTERNAL_LOCATION);
				}
			}
			
			// HACK TO Mark project needs saved
			protected function documentChangedHandler(event:RadiateEvent):void {
				
				if (Radiate.selectedProject) {
					Radiate.selectedProject.checkProjectHasChanged();
				}
			}
			
			// HACK TO Mark project needs saved
			protected function projectSavedHandler(event:Event):void {
				
				if (Radiate.selectedProject) {
					Radiate.selectedProject.checkProjectHasChanged();
				}
			}
			
			protected function autoSaveToggle_clickHandler(event:MouseEvent):void {
				AutoSaveManager.enableAutoSave = autoSaveToggle.selected;
				SettingsManager.saveSettings();
			}
			
			protected function openHomePageInBrowserButton_clickHandler():void {
				
				if (ProfileManager.projectHomePageID<1) {
					Radiate.warn("A home page has not been set. Showing the default theme home page");
					DeferManager.callAfter(2000, ProfileManager.openUsersWebsite);
				}
				else {
					ProfileManager.openUsersWebsite();
				}
			}
			
			protected function shareIcon_clickHandler(event:MouseEvent):void {
				var usersSignedIn:Boolean;
				
				usersSignedIn = ProfileManager.isUserLoggedIn;
				
				if (!usersSignedIn) {
					Radiate.info("You must be logged in to perform this action.");
					return;
				}
				
				if (Radiate.selectedDocument) {
					RunManager.copyURLToHomePage(Radiate.selectedDocument as DocumentData);
				}
				else {
					Radiate.warn("No project is open");
				}
			}
			
			protected function refreshIcon_clickHandler(event:MouseEvent):void {
				updateProjects();
				
				if (ProfileManager.userID!=-1) {
					serviceManager.getProjectsByUser(ProfileManager.userID);
				}
				else {
					Radiate.warn("No user is logged in");
				}
			}
			
			protected function list_doubleClickHandler(event:MouseEvent):void {
				var project:IProject = list.selectedItem ? IProject(list.selectedItem) : null;
				
				if (project && !project.isOpen) {
					
					if (!project.openedFromMetaData) {
						ProjectManager.openProjectFromMetaData(project, DocumentData.REMOTE_LOCATION, true);
					}
					else {
						ProjectManager.openProject(project, DocumentData.INTERNAL_LOCATION, true);
					}
					Radiate.setProject(project, true);
					event.stopImmediatePropagation();
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="projects" source="{ProjectManager.projects}"/>
		<s:ArrayCollection id="projectsFiltersTypes">
			<fx:Array>
				<fx:String>All Projects</fx:String>
				<fx:String>Open Projects</fx:String>
			</fx:Array>
		</s:ArrayCollection>
		
		<e:EventHandler eventName="click" target="{publishButton}">
			<fc:OpenPopUp popUpType="{PublishWindow}" modalDuration="250"/>
		</e:EventHandler>
		
		<!--- show delete project popup -->
		<e:EventHandler targets="{deleteProjectIcon}" eventName="click" >
			<fc:OpenPopUp id="openDeleteProjectPopUp" 
						  popUpType="{DeleteDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:'project',documentData:list.selectedItem}}"
						  />
		</e:EventHandler>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="8" paddingRight="8" paddingBottom="5"/>
	</s:layout>
	
	<s:ButtonBar id="projectFilters" 
				 requireSelection="true"
				 selectedIndex="0"
				 labelField="name"
				 dataProvider="{projectsFiltersTypes}"
				 includeInLayout="false"
				 visible="false"
				 >
	</s:ButtonBar>

	<s:List id="list" 
			focusAlpha="0"
			minHeight="20"
			width="100%" 
			height="100%"
			labelFunction="labelFunction"
			requireSelection="true"
			borderAlpha=".2"
			dataProvider="{projects}"
			change="list_changeHandler(event)"
			doubleClick="list_doubleClickHandler(event)"
			doubleClickEnabled="true"
			itemRenderer="com.flexcapacitor.views.renderers.EditableProjectRenderer"
			>
		
	</s:List>
	
	<s:HGroup width="100%"
			 height="24"
			 minHeight="24"
			 verticalAlign="middle"
			 >
		<s:Button id="publishButton" 
				  label="Publish" 
				  visible="false"
				  includeInLayout="false"/>
		
		<c:BeveledImageButton id="removeSavedDataIcon" 
					   source="{Radii8LibraryAssets.clear}" 
					   toolTip="Remove All Locally Saved Projects and Documents"
					   click="removeSavedDataIcon_clickHandler(event)"
					   visible="false"
					   includeInLayout="false"
					   />
		<c:BeveledImageButton id="getProjectsIcon" 
					   source="{Radii8LibraryAssets.openFolder}" 
					   toolTip="Load all locally Saved Projects and documents"
					   click="getSavedProjectsIcon_clickHandler(event)"
					   visible="false"
					   includeInLayout="false"
					   />
		
		<c:BeveledImageButton id="shareIcon" 
							  source="{Radii8LibraryAssets.share}" 
							  toolTip="Share - copies the URL to the online home page to the clipboard"
							  click="shareIcon_clickHandler(event)"
							  width="16"
							  height="22"
							  />
		
		<!--<c:BeveledImageButton id="openHomePageInBrowserButton" 
							  source="{Radii8LibraryAssets.homePlayIcon}" 
							  toolTip="View home page in browser"
							  click="openHomePageInBrowserButton_clickHandler()"
							  />-->
		
		<s:CheckBox id="autoSaveToggle" 
					selected="{AutoSaveManager.enableAutoSave}"
					useHandCursor="true"
					buttonMode="true"
					enabled="true"
					toolTip="Enables auto save on project and documents"
					label="Auto Save"
					click="autoSaveToggle_clickHandler(event)"
					/>
		
		<s:Spacer width="100%"/>
		<!--<c:ImageButton id="closeProjectIcon" 
					   source="{Radii8LibraryAssets.closedFolder}" 
					   toolTip="Close Project"
					   click="closeProjectIcon_clickHandler(event)"
					   />
		<c:ImageButton id="openProjectsIcon" 
					   source="{Radii8LibraryAssets.openFolder}" 
					   toolTip="Open Project"
					   click="openProjectsIcon_clickHandler(event)"
					   />-->
		
		
		<c:BeveledImageButton id="refreshIcon" 
							  source="{Radii8LibraryAssets.refresh}" 
							  toolTip="Refresh"
							  click="refreshIcon_clickHandler(event)"/>
		<c:BeveledImageButton id="saveProjectIcon" 
					   source="{Radii8LibraryAssets.multipleSave}" 
					   toolTip="Save the selected project and all of it's documents"
					   click="saveProjectIcon_clickHandler(event)"
					   height="15"
					   />
		<c:BeveledImageButton id="saveProjectOnlyIcon" 
					   source="{Radii8LibraryAssets.save}" 
					   toolTip="Save Project only and none of it's documents"
					   click="saveProjectOnlyIcon_clickHandler(event)"
					   height="15"
					   />
		<c:BeveledImageButton id="newProjectIcon" 
					   source="{Radii8LibraryAssets.newFile}" 
					   toolTip="New Project"
					   click="newProjectIcon_clickHandler(event)"
					   />
		<c:BeveledImageButton id="deleteProjectIcon" 
					   source="{Radii8LibraryAssets.trashCan}" 
					   toolTip="Remove Project"
					   />
	</s:HGroup>
	
</s:Group>
