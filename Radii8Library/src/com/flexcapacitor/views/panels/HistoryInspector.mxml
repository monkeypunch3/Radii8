<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:flexcapacitor="flexcapacitor.*" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:renderers="com.flexcapacitor.views.renderers.*" 
		 
		 styleName="radiateInspector"
		 width="100%" 
		 minHeight="20"
		 implements="com.flexcapacitor.views.IInspector"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.HistoryManager;
			import com.flexcapacitor.model.HistoryEventData;
			import com.flexcapacitor.model.HistoryEventItem;
			
			import flash.utils.getTimer;
			
			import mx.events.FlexEvent;
			
			import spark.core.NavigationUnit;
			import spark.events.IndexChangeEvent;
			
			
			public var debug:Boolean = false;
			
			private var radiate:Radiate;
			
			/**
			 * When true removes all the items in the history when the target is null
			 * */
			public var clearOnTargetChange:Boolean = true;
			
			private var _target:*;
			
			public function get target():* {
				return _target;
			}
			
			[Bindable]
			public function set target(value:*):void {
				_target = value;
				
				if (value==null) {
					if (clearOnTargetChange) {
						HistoryManager.removeAllHistory(radiate.selectedDocument);
					}
				}
			}
			
			public function activate(selectedTarget:Object = null):void {
				addListeners();
				//Radiate.history.refresh();
				
				list.selectedIndex = HistoryManager.historyIndex;
				
				scrollToBottom();
				
				updateNavigationButtons();
			}
			
			public function deactivate():void {
				removeListeners();
			}
			
			protected function addListeners():void {
				radiate = Radiate.getInstance();
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, historyChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChangeHandler, false, 0, true);
				
			}
			
			protected function removeListeners():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler);
					radiate.removeEventListener(RadiateEvent.HISTORY_CHANGE, historyChangeHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChangeHandler);
				}
			}
			
			/**
			 * 
			 * */
			protected function targetChangeHandler(event:RadiateEvent):void {
				target = event.selectedItem;
			}
			
			/**
			 * 
			 * */
			public function redo():void {
				var historyIndex:int = HistoryManager.redo(radiate.selectedDocument, true);
				
				if (historyIndex>-1) {
					list.ensureIndexIsVisible(historyIndex);
				}
				else {
					list.ensureIndexIsVisible(0);
				}
				
				
				//Radiate.history.refresh();
				
				//list.selectedIndex = historyIndex;
				
				updateNavigationButtons();
				
				if (debug) Radiate.info("3 SELECTED ITEM INDEX: " + list.selectedIndex);
			}
			
			/**
			 * 
			 * */
			public function undo():void {
				var historyIndex:int = HistoryManager.undo(radiate.selectedDocument, true);
				
				//Radiate.history.refresh();
				
				if (historyIndex>-1) {
					list.ensureIndexIsVisible(historyIndex);
				}
				else {
					list.ensureIndexIsVisible(0);
				}
				
				//list.selectedIndex = Radiate.historyIndex;
				
				updateNavigationButtons();
				if (debug) Radiate.info("4 SELECTED ITEM INDEX: " + list.selectedIndex);
			}
			
			/**
			 * Label for the history item
			 * */
			public function labelFunction(item:Object):String {
				var historyEvent:HistoryEventData = item as HistoryEventData;
				var historyEventItems:Array = historyEvent.historyEventItems;
				var historyEventItem:HistoryEventItem = historyEventItems && historyEventItems.length ? historyEventItems[0] : null;
				var label:String;
				
				if (historyEvent.description!=null) {
					label = historyEventItem.description;
				}
				else if (historyEventItem.action==RadiateEvent.PROPERTY_CHANGED) {
					if (historyEventItem.properties.length) {
						label = historyEventItem.description || historyEventItem.properties + " changed";
					}
					else {
						label = historyEventItem.description || historyEventItem.styles + " changed";
					}
				}
				else if (historyEventItem.action==RadiateEvent.ADD_ITEM) {
					label = historyEventItem.description || "Item added";
				}
				else if (historyEventItem.action==RadiateEvent.REMOVE_ITEM) {
					label = historyEventItem.description || "Item removed";
				}
				else if (historyEventItem.action==RadiateEvent.MOVE_ITEM) {
					label = historyEventItem.description || "Moved";
				}
				else {
					label = "Something Changed";
				}
				
				if (!historyEventItem) return "";
				
				return label;
			}
			
			/**
			 * Show the last item in the list
			 * */
			private function scrollToBottom():void {
				// update the verticalScrollPosition to the end of the List
				// virtual layout may require us to validate a few times
				// code posted by a Flex SDK developer
				var delta:Number = 0;
				var count:int = 0;
				var iterations:int = 10;
				
				while (count++ < iterations) {
					list.validateNow();
					delta = list.layout.getVerticalScrollPositionDelta(NavigationUnit.END);
					list.layout.verticalScrollPosition += delta;
					
					if (delta == 0) {
						break;
					}
				}
			}
			
			protected function list1_clickHandler(event:MouseEvent):void {
				if (list.selectedItem) {
					//Radiate.history.refresh();
				}
			}
			
			
			public var updatingChanges:Boolean;
			
			/**
			 * 
			 * */
			protected function changeHandler(event:IndexChangeEvent):void {
				if (debug) Radiate.info("SELECTED ITEM INDEX: " + list.selectedIndex);
				if (debug && updatingChanges) Radiate.info("ALREADY APPLYING CHANGES. SELECTED ITEM INDEX: " + list.selectedIndex);
					
				if (updatingChanges) {
					//event.preventDefault();
					return;
				}
				var newIndex:int = event.newIndex;
				var oldIndex:int = HistoryManager.historyIndex;
				var dispatch:Boolean = false;
				var time:int = getTimer();
				var historyIndex:int;
				var length:int;
				
				updatingChanges = true;
				
				//ensureIndexIsVisible(newIndex);
				
				if (debug) Radiate.info("goToHistoryIndex: " + newIndex);
				
				HistoryManager.goToHistoryIndex(radiate.selectedDocument, newIndex);
				//trace("changes:"+(getTimer()-time));
				
				//list.selectedIndex = Radiate.historyIndex;
				
				
				//Radiate.history.refresh();
				
				//updateNavigationButtons();
				
				if (debug) Radiate.info("2 SELECTED ITEM INDEX: " + list.selectedIndex);
				
				updatingChanges = false;
				
				//ensureIndexIsVisible(newIndex);
			}
			
			
			public function updateNavigationButtons():void {
				var historyIndex:int = HistoryManager.historyIndex;
				var totalItems:int = HistoryManager.history ? HistoryManager.history.length : 0;
				var hasItems:Boolean = totalItems>0;
				
				// has forward history
				if (hasItems && historyIndex+1<totalItems) {
					forwardButton.enabled = true;
				}
				else {
					forwardButton.enabled = false;
				}
				
				// has previous items
				if (hasItems && historyIndex>-1) {
					backButton.enabled = true;
				}
				else {
					backButton.enabled = false;
				}
			}
			
			/**
			 * Document change handler. Clear history
			 * */
			protected function documentChangeHandler(event:Event):void {
				if (debug) Radiate.info("DOCUMENT CHANGE");
				
				list.selectedIndex = HistoryManager.historyIndex;
				
				scrollToBottom();
				
				updateNavigationButtons();
				
				// Radiate.removeAllHistory();
			}
			
			/**
			 * 
			 * */
			public function ensureIndexIsVisible(index:int=0):void {
				
				if (index!=-1) {
					list.ensureIndexIsVisible(index);
				}
				else {
					list.dataGroup.verticalScrollPosition = 0;
				}
				//list.validateNow();
				//list.ensureIndexIsVisible(index);
				//list.validateNow();
			}
			
			/**
			 * 
			 * */
			public function ensureLastItemVisible():void {
				if (list.dataProvider.length>0) {
					ensureIndexIsVisible(list.dataProvider.length-1);
					scrollToBottom();
				}
			}
			
			/**
			 * Revert the document history
			 * */
			protected function revertHandler(event:MouseEvent):void {
				var numberOfEvents:int;
				var dispatch:Boolean = false;
				var time:int;
				var i:int;
				
				if (radiate.selectedDocument==null) {
					return;
				}
				
				numberOfEvents = HistoryManager.history ? HistoryManager.history.length : 0;
				time = getTimer();
				
				//trace("revert start: " + time);
				
				// it is 22 times faster to not dispatch events until the end
				// each change takes 85ms per change with dispatch events 
				// and 2.58ms without
				
				HistoryManager.goToHistoryIndex(radiate.selectedDocument, -1);
				
				//ensureIndexIsVisible(0);
				
				//Radiate.history.refresh();
				
				//trace("revert start: " + (getTimer()-time));
				//list.selectedIndex = -1;
				
				//Radiate.history.refresh();
				
				//updateNavigationButtons();
				if (debug) Radiate.info("5 SELECTED ITEM INDEX: " + list.selectedIndex);
			}
			
			protected function list_valueCommitHandler(event:FlexEvent):void {
				//Radiate.info("Value commit. Index : " + list.selectedIndex);
				//Radiate.info("History Index : " + Radiate.historyIndex);
				
				if (list.selectedIndex!= HistoryManager.historyIndex) {
					//list.selectedIndex = Radiate.historyIndex;
					//Radiate.history.refresh();
					//Radiate.info("History OUT OF SYNC");
				}
			}
			
			protected function list_caretChangeHandler(event:IndexChangeEvent):void {
				//Radiate.info("Caret changed. Index : " + list.selectedIndex);
				//Radiate.info("History Index : " + Radiate.historyIndex);
			}
			
			/**
			 * History changed. Select the last applied item in the history array. 
			 * */
			protected function historyChangeHandler(event:Event):void {
				if (debug) Radiate.info("HISTORY CHANGE");
				
				//Radiate.info("historyChangeHandler. Index : " + list.selectedIndex);
				//Radiate.info("History Index : " + Radiate.historyIndex);
				
				// must call validate now since history.refresh() may have been called
				list.validateNow();
				
				if (HistoryManager.historyIndex==-1) {
					list.selectedItem = null;
				}
				else {
					list.selectedIndex = HistoryManager.historyIndex;
				}
				
				ensureIndexIsVisible(HistoryManager.historyIndex);
				updateNavigationButtons();
			}
			
			
			protected function list_clickHandler(event:MouseEvent):void
			{
				var selectedItem:Object = list.selectedItem;
				var currentEvent:Object = HistoryManager.getCurrentHistoryEvent(radiate.selectedDocument);
				var current:int = HistoryManager.getHistoryPosition(radiate.selectedDocument);
				
				// if we are at the current selected row then the second
				// time the row is clicked select the targets
				if (selectedItem==currentEvent) {
					HistoryManager.selectCurrentEventTargets(radiate.selectedDocument);
				}
			}
			
			private function clearHistory():void {
				if (radiate.selectedDocument) {
					HistoryManager.removeAllHistory(radiate.selectedDocument);
				}
			}
			
			protected function revertIcon_clickHandler(event:MouseEvent):void
			{
				var success:Boolean = radiate.revertDocument(radiate.selectedDocument);
				if (success) {
					Radiate.info("Document reverted");
				}
			}
			
			protected function refreshIcon_clickHandler(event:MouseEvent):void {
				//var success:Boolean = HistoryManager.rebuild(radiate.selectedDocument);
				
				if (radiate.selectedDocument) {
					Radiate.info("Rebuilding document");
					Radiate.callAfter(250, HistoryManager.rebuild, radiate.selectedDocument);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<renderers:HistoryItemRenderer id="openLabel" 
								   label="Open" 
								   width="100%"
								   left="5"
								   right="5"
								   useHandCursor="true" 
								   buttonMode="true"
								   autoDrawBackground="true"
								   click="revertHandler(event)" />
	
	<c:HorizontalLine top="22" left="5" right="5"
					  color="#000000" 
					  alpha=".15"
					  />
	
	<c:ListNoKeyboardHandling id="list" 
			top="26" bottom="28"
			left="5"
			right="5"
			focusAlpha="0"
			minHeight="20"
			width="100%" height="100%"
			dataProvider="{HistoryManager.history}" 
			labelFunction="labelFunction"
			borderVisible="false"
			change="changeHandler(event)"
			valueCommit="list_valueCommitHandler(event)"
			caretChange="list_caretChangeHandler(event)"
			click="list_clickHandler(event)"
			itemRenderer="com.flexcapacitor.views.renderers.HistoryItemRenderer"
			>
		
		<c:layout>
			<s:VerticalLayout useVirtualLayout="true" gap="1"/>
		</c:layout>
		
	</c:ListNoKeyboardHandling>
	
	<!--- triangle -->
	<s:Group height="14" width="10" top="4" visible="{HistoryManager.historyIndex==-1}">
		<s:Path data="M 0 0 L 0 16 L 16 8 z" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#000000" alpha=".25"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke weight="0" color="#ffffff" />
			</s:stroke>
		</s:Path>
	</s:Group>
		
	
	
	<!--- UNDO REDO BUTTONS -->
	<s:HGroup width="100%" right="5" left="5" bottom="5" verticalAlign="top">
		
		<c:BeveledImageButton id="clearHistoryButton" 
							  source="{Radii8LibraryAssets.clear}" 
							  height="15"
							  alpha=".8"
							  click="clearHistory()" 
							  toolTip="Clear history items"
							  />
		
		<s:Spacer width="100%"/>
		
		
		<!--<c:BeveledImageButton id="revertIcon" 
							  source="{Radii8LibraryAssets.revert}" 
							  toolTip="Revert"
							  click="revertIcon_clickHandler(event)"/>-->
		
		<c:BeveledImageButton id="refreshIcon" 
							  source="{Radii8LibraryAssets.refresh}" 
							  toolTip="Refresh"
							  click="refreshIcon_clickHandler(event)"/>
		
		<c:BeveledImageButton id="backButton" 
							  source="{Radii8LibraryAssets.undo}" 
							  height="15"
							  alpha=".8"
							  click="undo()" 
							  toolTip="Undo"
							  />
		<c:BeveledImageButton id="forwardButton" 
							  source="{Radii8LibraryAssets.redo}"
							  height="15"
							  alpha=".8"
							  click="redo()" 
							  toolTip="Redo"
							  />
	</s:HGroup>
</s:Group>
