<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 
		 width="200" height="100"
		 creationComplete="group1_creationCompleteHandler(event)" 
		 implements="com.flexcapacitor.views.IInspector" 
		 >
	
	
	<!-- to use
	
	
		Radiate.info("Document SHOW event");
		Radiate.error(event.text);
		TO DO: 
	
		Store previous value when overflow 
	-->
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.controls.IAceEditor;
			import com.flexcapacitor.utils.AceEditorUtils;
			import com.flexcapacitor.views.IInspector;
			
			import mx.events.FlexEvent;
			import mx.logging.AbstractTarget;
			
			import spark.components.TextArea;
			import spark.components.VScrollBar;
			import spark.events.TextOperationEvent;
			
			private var radiate:Radiate;
			
			[Bindable]
			public var logTarget:AbstractTarget;
			
			/**
			 * The more text in the text area the slower everything runs.
			 * 
			 * In one test during debug in Properties view, the time to call describe type 
			 * on a target increased by 1 or 3 ms for each line of text.
			 * 
			 * If the font size is 10 px and maxScrollPosition is 2000 
			 * then the max number of lines is 200
			 * since 2000pixels/10px=200lines.
			 * */
			public var maxLines:int = 300;
			public var defaultMaxLines:int = 300;
			public var previousConsoleValue:String;
			public var aceEditor:Object;
			
			public function activate():void {
				
				if (logTarget==null && !Radiate.isDesktop) {
					logTarget = Radiate.logTarget;
					Radiate.setLoggingTarget(logTarget, null, consoleTextArea);
				}
				
				if (Radiate.isDesktop) {
					consoleTextArea.visible = false;
					consoleTextArea.includeInLayout = false;
					
					if (aceEditor && aceEditor.editor) {
						Radiate.setLoggingTarget(logTarget, null, aceEditor);
					}
					
				}
			}
			
			public function deactivate():void {
				// keep logging
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				
				logTarget = Radiate.logTarget;
				
				if (!aceEditor) {
					aceEditor = AceEditorUtils.createCommonEditor(null, this);
					aceEditor.showGutter = false;
					aceEditor.top = -10;

					aceEditor.addEventListener("editorReady", editorReadyHandler);
					aceEditor.validateNow();
					//aceEditor.margin = "";
				}
				
				if (Radiate.isDesktop && aceEditor.editor) {
					Radiate.setLoggingTarget(logTarget, null, aceEditor);
				}
				else {
					Radiate.setLoggingTarget(logTarget, null, consoleTextArea);
				}
				
			}
			
			protected function editorReadyHandler(event:Event):void {
				
				if (Radiate.isDesktop && aceEditor.editor) {
					Radiate.setLoggingTarget(logTarget, null, aceEditor);
				}
			}
			
			protected function clearTextAreaHandler(event:MouseEvent):void {
				
				if (Radiate.isDesktop) {
					aceEditor.text = "";
				}
				else {
					consoleTextArea.text = "";
				}
			}
			
			protected function consoleTextArea_valueCommitHandler(event:FlexEvent):void {
				scrollToTheBottom();
			}
			
			protected function consoleTextArea_changeHandler(event:TextOperationEvent):void {
				scrollToTheBottom()
			}
			
			protected function consoleTextAreaMX_changeHandler(event:Event):void {
				scrollToTheBottom()
			}
			
			/**
			 * Scrolls to the bottom of the texgt area.
			 * 
			 * Because of the degradation of performance with the 
			 * Spark and MX TextArea with lots of text we are 
			 * truncating the output at a certain number of lines.
			 * 
			 * We are going to use Ace Editor to allow for much higher performance 
			 * */
			public function scrollToTheBottom():void {
				
				// SPARK TEXT AREA
				if (consoleTextArea is spark.components.TextArea) {
					var scrollBar:VScrollBar = spark.components.TextArea(consoleTextArea).scroller.verticalScrollBar;
					
					scrollBar.value = scrollBar.maximum;
					consoleTextArea.validateNow();
					
					if (scrollBar.value != scrollBar.maximum) {
						scrollBar.value = scrollBar.maximum;
						consoleTextArea.validateNow();
					}
					
					if (scrollBar.maximum>maxLines * consoleTextArea.getStyle("fontSize")) {
						previousConsoleValue = consoleTextArea.text;
						consoleTextArea.text = "";
					}
				}
				
				// MX TEXT AREA
				else if (consoleTextArea is mx.controls.TextArea) {
					var mxTextArea:mx.controls.TextArea = mx.controls.TextArea(consoleTextArea);
					
					mxTextArea.verticalScrollPosition = mxTextArea.maxVerticalScrollPosition
					mxTextArea.validateNow();
					
					if (mxTextArea.verticalScrollPosition != mxTextArea.maxVerticalScrollPosition) {
						mxTextArea.verticalScrollPosition = mxTextArea.maxVerticalScrollPosition;
						mxTextArea.validateNow();
					}
					
					if (mxTextArea.maxVerticalScrollPosition>maxLines * consoleTextArea.getStyle("fontSize")) {
						previousConsoleValue = mxTextArea.text;
						mxTextArea.text = "";
					}
					
				}
				
				// ACE EDITOR
				else if (consoleTextArea is IAceEditor) {
					Object(aceEditor).navigateFileEnd();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Label text="" 
			 height="14"
			 right="4"
			 fontSize="10"
			 typographicCase="uppercase" 
			 textAlign="center"
			 verticalAlign="middle"
			 fontWeight="bold"
			 backgroundAlpha=".15"
			 backgroundColor="#000000"
			 useHandCursor="true"
			 buttonMode="true"
			 click="clearTextAreaHandler(event)"
			 />
	<!--<s:TextArea id="consoleTextArea" 
				top="12"
				width="100%" height="100%"
				tabFocusEnabled="false"
				fontWeight="normal"
				fontSize="13"
				focusAlpha="0"
				fontFamily="Courier New"
				borderVisible="false"
				change="consoleTextArea_changeHandler(event)"
				valueCommit="consoleTextArea_valueCommitHandler(event)"
				/>-->
	<mx:TextArea id="consoleTextArea" 
				top="20"
				width="100%" height="100%"
				tabFocusEnabled="false"
				fontWeight="normal"
				fontSize="13"
				focusAlpha="0"
				fontFamily="Courier New"
				borderVisible="false"
				change="consoleTextAreaMX_changeHandler(event)"
				valueCommit="consoleTextArea_valueCommitHandler(event)"
				/>
	<c:BeveledImageButton id="clearButton" 
						  source="{Radii8LibraryAssets.clear}" 
						  right="8"
						  click="clearTextAreaHandler(event)"
						  width="16"
						  height="16"
						  horizontalAlign="center"
						  verticalAlign="middle"
						  />
</s:Group>
