<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:flexcapacitor="flexcapacitor.*" 
		 
		 implements="com.flexcapacitor.views.IInspector" 
		 width="400" 
		 height="300" 
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.utils.AceEditorUtils;
			import com.flexcapacitor.utils.DragManagerUtil;
			import com.flexcapacitor.utils.StyleUtils;
			import com.flexcapacitor.views.IInspector;
			
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.utils.Platform;
			
			[Bindable]
			private var radiate:Radiate;
			
			private var target:Object;
			
			private var dragManagerInstance:DragManagerUtil;
			
			public var selectedItem:Object;
			
			public var fileReference:FileReference;
			
			public var stylesUtility:StyleUtils;
			
			public var styleInformation:String;
			
			private var aceCSSEditorCreated:Boolean;
			
			[Bindable]
			public var editorMargin:String = "4px 0 8px 0px";
			
			
			public function activate(selectedTarget:Object = null):void {
				if (!radiate) {
					radiate = Radiate.getInstance();
				}
				
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, historyChangeHandler, false, 0, true);
				
				if (!aceCSSEditorCreated) {
					stylesUtility = new StyleUtils();
					stylesUtility.minimumStyleNamePadding = 20;
					stylesUtility.prespace = "   ";
					createEditors();
				}
				
				updateStyles(radiate.target);
				
				if (aceCSSEditor) {
					aceCSSEditor.visible = true;
				}
				
				if (Platform.isBrowser) {
					editorMargin = "0";
				}
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler);
					radiate.removeEventListener(RadiateEvent.HISTORY_CHANGE, historyChangeHandler);
				}
				
				target = null;
				selectedItem = null;
				
				if (aceCSSEditor) {
					aceCSSEditor.visible = false;
				}
			}
			
			protected function targetChangeHandler(event:RadiateEvent):void {
				target = event.selectedItem;
				updateStyles(target);
			}
			
			
			public function updateStyles(target:Object):void {
				var styleClient:IStyleClient = target as IStyleClient;
					
				if (styleClient) {
					styleInformation = stylesUtility.getStyleDetails(styleClient);
					aceCSSEditor.text = styleInformation;
				}
				else {
					aceCSSEditor.text = "";
				}
			}
			
			
			private function createEditors():void {
				
				aceCSSEditorCreated = true;
				
			}
			
			protected function historyChangeHandler(event:RadiateEvent):void
			{
				updateStyles(target);
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="8" paddingRight="8" paddingBottom="8"/>
	</s:layout>
	
	<mx:VDividedBox id="verticalContainer" 
					width="100%" height="100%"
					top="0"
					left="8" 
					right="8" 
					bottom="4"
					>
		
		
		<c:AceSearchTextInput id="searchInput" 
						   prompt="Search" 
						   minWidth="80"
						   width="100%"
						   focusAlpha="0"
						   height="24"
						   aceEditor="{aceCSSEditor}"/>
		
		<c:AceEditor id="aceCSSEditor" 
					 width="100%" 
					 height="100%"
					 mode="ace/mode/css" 
					 isReadOnly="true"
					 showFoldWidgets="true" 
					 margin="{editorMargin}"
					 scrollSpeed=".5"
					 showGutter="false"
					 showCursor="false"
					 />
		
	</mx:VDividedBox>	
</s:Group>
