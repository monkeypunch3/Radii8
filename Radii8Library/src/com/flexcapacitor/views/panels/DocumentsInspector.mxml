<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:views="com.flexcapacitor.views.*"
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:fc="com.flexcapacitor.effects.popup.*"
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:collections="com.flexcapacitor.effects.collections.*"
		 xmlns:inspectors="com.flexcapacitor.views.inspectors.*" 
		 
		 width="100%" 
		 height="100%"
		 implements="com.flexcapacitor.views.IInspector" 
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.CodeManager;
			import com.flexcapacitor.managers.RunManager;
			import com.flexcapacitor.managers.ServicesManager;
			import com.flexcapacitor.model.DocumentData;
			import com.flexcapacitor.model.DocumentRevision;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.IDocumentData;
			import com.flexcapacitor.model.IProject;
			import com.flexcapacitor.model.SourceData;
			import com.flexcapacitor.services.WPService;
			import com.flexcapacitor.views.IInspector;
			import com.flexcapacitor.views.windows.DeleteDocumentWindow;
			
			import spark.events.IndexChangeEvent;
			
			private var rootDisplayObject:DisplayObject;
			private var displayList:Array = [];
			
			private var radiate:Radiate;
			private var services:ServicesManager;
			private var designDocument:IEventDispatcher;
			
			public var project:IProject;
			

			public function activate():void {
				radiate = Radiate.instance;
				services = ServicesManager.instance;
				
				
				radiate.addEventListener(RadiateEvent.PROJECT_CHANGE, projectChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_ADDED, documentAddedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChangeHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_OPENING, documentOpeningHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_REMOVED, documentRemovedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_DELETED, documentRemovedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_SAVE_COMPLETE, documentSavedHandler, false, 0, true);
				
				services.addEventListener(RadiateEvent.PROJECT_GET_HOME_PAGE, getHomePageHandler, false, 0, true);
				services.addEventListener(RadiateEvent.PROJECT_SET_HOME_PAGE, setHomePageHandler, false, 0, true);


				update();
			}
			
			public function deactivate():void {
				if (radiate) {
					radiate.removeEventListener(RadiateEvent.PROJECT_CHANGE, projectChangeHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_ADDED, documentAddedHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChangeHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_OPENING, documentOpeningHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_REMOVED, documentRemovedHandler);
					radiate.removeEventListener(RadiateEvent.DOCUMENT_DELETED, documentRemovedHandler);
				}
				
				if (services) {
					services.removeEventListener(RadiateEvent.PROJECT_GET_HOME_PAGE, getHomePageHandler);
					services.removeEventListener(RadiateEvent.PROJECT_SET_HOME_PAGE, setHomePageHandler);
				}
			}
			
			public function update():void {
				
				if (radiate.selectedProject) {
					setProjectsDocuments(radiate.selectedProject);
				}
				
				if (radiate.selectedDocument) {
					selectDocument(radiate.selectedDocument);
				}
				
				updateRevisionsToolTip();
			}
			
			/**
			 * Label of the list
			 * */
			public function labelFunction(data:Object):String {
				return data && data.document ? data.document.name : data.name;
			}
			
			protected function projectChangeHandler(event:RadiateEvent):void {
				if (event.selectedItem as IProject) {
					setProjectsDocuments(event.selectedItem as IProject);
				}
			}
			
			/**
			 * Document was changed from outside of this inspector. Update to reflect that. 
			 * */
			protected function documentChangeHandler(event:RadiateEvent):void {
				var iDocument:IDocumentData = event.selectedItem as IDocumentData;
				//var documentData:IDocumentData = iDocument.documentData;
				
				/*
				if (document && (radiate.project!=document.project || documents.length==0)) {
					setProjectsDocuments(document.project);
				}
				else if (document.project && document.project.documents.length != radiate.selectedDocuments.length) {
					setProjectsDocuments(document.project);
				}
				else if (documents.length==0) {
					setProjectsDocuments(document.project);
				}*/
				
				var selectedDocument:IDocumentData = list.selectedItem as IDocumentData;
				
				if (selectedDocument && iDocument) {
					if (selectedDocument.uid != iDocument.uid) {
						selectDocument(iDocument);
					}
				}
				
				if (selectedDocument==null && iDocument) {
					selectDocument(iDocument);
				}
				/*
				if (selectedDocument) {
					radiate.dispatchObjectSelectedEvent(selectedDocument);
				}*/
			}
			
			/**
			 * Update documents
			 * */
			private function setProjectsDocuments(project:IProject, refresh:Boolean = false):void {
				var projectDocuments:Array = project ? project.documents : [];
				var iDocument:IDocumentData = list.selectedItem;
				var uid:String;
				
				if (iDocument) {
					uid = iDocument.uid;
				}
				else {
					iDocument = radiate.getVisibleDocument();
					if (iDocument==null) {
						iDocument = radiate.selectedDocument;
					}
					uid = iDocument ? iDocument.uid : null;
				}
				
				if (documentsCollection.source != projectDocuments) {
					documentsCollection.source = projectDocuments;
					
					documentsCollection.refresh();
					
					// must call validate now so selected index doesn't revert if a new project is selected
					list.validateNow();
					
					if (uid) {
						selectDocumentByUID(uid);
					}
				}
				else if (documentsCollection.source.length != project.documents.length) {
					documentsCollection.refresh();
					
					if (uid) {
						selectDocumentByUID(uid);
					}
				}
				else if (refresh) {
					documentsCollection.refresh();
					
					if (uid) {
						selectDocumentByUID(uid);
					}
				}
			}
			
			/**
			 * Add new document
			 * */
			protected function newDocumentIcon_clickHandler(event:MouseEvent):void {
				var newDocument:IDocument = radiate.addDocument(radiate.createDocument(), radiate.selectedProject, true, true);
				radiate.openDocument(newDocument, DocumentData.INTERNAL_LOCATION, true);
				
				//if (!Radiate.isDesktop) {
					var saveRemote:Boolean = radiate.isUserConnected && radiate.isUserLoggedIn;
					var savedLocation:String = saveRemote ? DocumentData.REMOTE_LOCATION : DocumentData.LOCAL_LOCATION;
					
					var savedLocally:Boolean = radiate.saveDocument(newDocument, savedLocation);
					radiate.saveProjectOnly(radiate.selectedProject, savedLocation);
				//}
			}
			
			protected function saveDocumentIcon_clickHandler(event:MouseEvent):void {
				//radiate.saveProject(radiate.project);
				var iDocument:IDocument = list.selectedItem as IDocument;
				
				if (iDocument) {
					var saveRemote:Boolean = radiate.isUserConnected && radiate.isUserLoggedIn;
					var savedLocation:String = saveRemote ? DocumentData.REMOTE_LOCATION : DocumentData.LOCAL_LOCATION;
					
					var savedLocally:Boolean = radiate.saveDocument(iDocument, savedLocation);
					
					//Radiate.info("Saved locally: " + savedLocally);
				}
				else {
					Radiate.warn("No document selected");
				}
			}
			
			/**
			 * User selected a document in the list
			 * */
			protected function list_changeHandler(event:IndexChangeEvent):void {
				var documentData:IDocumentData = list.selectedItem ? IDocumentData(list.selectedItem) : null;
				
				if (documentData) {
					if (documentData.isOpen) {
						radiate.showDocument(documentData);
					}
					else {
						//radiate.openDocumentByData(documentData);
					}
				}
				
				if (documentData) {
					radiate.dispatchObjectSelectedEvent(documentData);
				}
				
				updateDocumentStatus(documentData);
			}
			
			protected function documentAddedHandler(event:RadiateEvent):void {
				//event.preventDefault();
				//setProjectsDocuments(radiate.project);
				
				setProjectsDocuments(radiate.selectedProject, true);
			}
			
			protected function documentOpeningHandler(event:RadiateEvent):void {
				//event.preventDefault();
				//setProjectsDocuments(radiate.project);
			}
			
			
			protected function deleteDocumentIcon_clickHandler(event:MouseEvent):void {
				var selectedDocument:IDocument = list.selectedItem as IDocument;
				
				if (selectedDocument) {
					openDeleteProjectPopUp.play();
					//radiate.removeDocument(selectedDocument);
				}
				else {
					Radiate.info("Please select a document");
				}
			}
			
			protected function documentRemovedHandler(event:Event):void {
				setProjectsDocuments(radiate.selectedProject, true);
			}
			
			
			protected function closeDocumentIcon_clickHandler(event:MouseEvent):void {
				var selectedDocument:IDocument = list.selectedItem as IDocument;
				
				if (selectedDocument) {
					radiate.closeDocument(selectedDocument);
				}
				else {
					Radiate.info("Please select a document");
				}
			}
			
			protected function openDocumentIcon_clickHandler(event:MouseEvent):void {
				var selectedDocument:IDocument = list.selectedItem as IDocument;
				
				if (selectedDocument) {
					radiate.openDocument(selectedDocument, DocumentData.REMOTE_LOCATION, true);
				}
				else {
					Radiate.info("Please select a document");
				}
			}
			
			protected function importDocumentIcon_clickHandler(event:MouseEvent):void {
				var selectedDocument:IDocument = list.selectedItem as IDocument;
				
				if (selectedDocument) {
					radiate.openImportMXMLWindow("Import MXML");
				}
				else {
					Radiate.info("Please select a document");
				}
			}

			
			protected function list_doubleClickHandler(event:MouseEvent):void {
				var documentData:IDocument = list.selectedItem ? IDocument(list.selectedItem) : null;
				var iDocument:IDocument;
				
				if (documentData && !documentData.isOpen) {
					iDocument = radiate.openDocumentByData(documentData, false, true);
					
					if (iDocument==null) {
						Radiate.error("Document was not found (never saved). Delete the document and save project.");
					}
				}
				else if (documentData && documentData.isOpen) {
					Radiate.info("Document '" + documentData.name + "' is already open"); 
				}
			}
			
			protected function documentStatusList_changeHandler(event:IndexChangeEvent):void
			{
				var iDocument:IDocument = radiate.selectedDocument;
				var status:String = documentStatusList.selectedItem;
				
				if (iDocument && status!=WPService.STATUS_NONE && iDocument.status!=status) {
					iDocument.status = status;
					updateCollection();
					iDocument.markDirty();
				}
			}
			
			/**
			 * Refreshes the collection which refreshes the list
			 * */
			public function updateCollection():void {
				if (documentsCollection) {
					documentsCollection.refresh();
				}
			}
			
			/**
			 * Update document
			 * */
			private function selectDocument(iDocument:IDocumentData):void {
				var jDocument:IDocumentData;
				var documentFound:Boolean;
				list.validateNow();
				
				if (list.selectedItem != iDocument) {
					
					var length:int = documentsCollection.length;
					for (var i:int;i<length;i++) {
						jDocument = IDocumentData(documentsCollection.getItemAt(i));
						
						
						if (jDocument.uid==iDocument.uid) {
							list.selectedItem = IDocumentData(documentsCollection.getItemAt(i));
							documentFound = true;
							break;
						}
					}
				}
				else {
					documentFound = true;
				}
				
				if (documentFound) {
					updateDocumentStatus(iDocument);
				}
				else {
					clearDocumentStatus();
				}
			}
			
			private function selectDocumentByUID(uid:String):void {
				var numberOfDocuments:int = documentsCollection.length;
				var documentFound:Boolean;
				var iDocumentData:IDocumentData;
				
				for (var i:int;i<numberOfDocuments;i++) {
					iDocumentData = IDocumentData(documentsCollection.getItemAt(i));
					
					if (iDocumentData.uid==uid) {
						list.selectedItem = iDocumentData;
						documentFound = true;
						break;
					}
				}
				
				
				if (documentFound) {
					updateDocumentStatus(iDocumentData);
				}
				else {
					clearDocumentStatus();
				}
				
			}
			
			private function updateDocumentStatus(jDocument:IDocumentData):void {
	
				if (jDocument) {
					if (jDocument.status==WPService.STATUS_DRAFT || jDocument.status==WPService.STATUS_PUBLISH) {
						documentStatusList.selectedItem = jDocument.status;
					}
				}
				else {
					clearDocumentStatus();
				}
			}
			
			private function clearDocumentStatus():void {
				documentStatusList.selectedIndex = 0;
			}
			
			protected function openDocumentInBrowserButton_clickHandler(event:MouseEvent):void {
				var iDocument:IDocument = list.selectedItem as IDocument;
				
				if (iDocument) {
					RunManager.openDocumentInBrowser();
				}
				else {
					Radiate.info("Please select a document");
				}
			}
			
			protected function openDocumentInBrowserScreenshotButton_clickHandler(event:MouseEvent):void {
				var iDocument:IDocument = list.selectedItem as IDocument;
				
				if (iDocument) {
					RunManager.openDocumentInBrowserScreenshot();
				}
				else {
					Radiate.info("Please select a document");
				}
			}
			
			protected function openDocumentInBrowserSiteScannerButton_clickHandler(event:MouseEvent):void {
				var iDocument:IDocument = list.selectedItem as IDocument;
				
				if (iDocument) {
					RunManager.openDocumentInBrowserSiteScanner();
				}
				else {
					Radiate.info("Please select a document");
				}
			}
			
			protected function list_clickHandler(event:MouseEvent):void {
				var documentData:IDocument = list.selectedItem ? IDocument(list.selectedItem) : null;
				
				if (documentData) {
					updateDocumentStatus(documentData);
				}
				else {
					Radiate.info("Please select a document");
				}
			}
			
			protected function setHomePageDocumentIcon_clickHandler(event:MouseEvent):void {
				var documentData:IDocument = list.selectedItem ? IDocument(list.selectedItem) : null;
				var documentID:int = documentData && documentData.id==null ? 0 : int(documentData.id);
				var homePageID:int = Radiate.instance.projectHomePageID;
				
				if (documentData) {
					if (documentData.id==null) {
						Radiate.warn("Save the document before setting it as the home page. No ID is set.");
					}
					else {
						
						if (documentID==homePageID) {
							services.clearProjectHomePage();
						}
						else {
							documentBeingSaved = documentData;
							services.setProjectHomePage(int(documentData.id));
						}
					}
				}
				
				else {
					Radiate.warn("No document selected");
				}
			}
			
			public var documentBeingSaved:IDocument;
			
			protected function setHomePageHandler(event:RadiateEvent):void {
				//trace(event.data);
				var data:Object = event.data;
				
				if (data) {
					if (documentBeingSaved && documentBeingSaved.id==data.newValue) {
						documentBeingSaved.project.homePage = documentBeingSaved.id!=null ? int(documentBeingSaved.id) : 0;
						documentBeingSaved.project.markDirty();
						Radiate.info("The home page has been set to the document, \"" +  documentBeingSaved.name + "\". Save the project.");
						Radiate.instance.projectHomePageID = data.newValue;
					}
					else {
						Radiate.info("The home page is no longer specified. The default theme will be shown. Save the project.");
						Radiate.instance.projectHomePageID = data.newValue;
					}
					
					documentsCollection.refresh();
					
				}
			}
			
			protected function getHomePageHandler(event:RadiateEvent):void {
				//trace(event.data);
				
			}
			
			protected function getHomePageDocumentIcon_clickHandler(event:MouseEvent):void {
				
				if (services) {
					services.getProjectHomePage();
				}
			}
			
			protected function editDocumentIcon_clickHandler(event:MouseEvent):void
			{
				if (radiate.selectedDocument) {
					Radiate.info("We are opening a browser window to edit only the document content. When you are done editing close the edit window."); 
					Radiate.callAfter(5000, Radiate.editDocumentInBrowser, radiate.selectedDocument);
				}
			}
			
			protected function openHomePageInBrowserButton_clickHandler():void {
				
				RunManager.openHomePageInBrowserButton();
			}
			
			protected function documentSavedHandler(event:Event):void
			{
				updateCollection();
			}
			
			protected function saveRevisionIcon_clickHandler(event:MouseEvent):void
			{
				var iDocument:IDocument = radiate.selectedDocument;
				var sourceData:SourceData;
				var revision:DocumentRevision;
				
				if (iDocument) {
					sourceData = CodeManager.getSourceData(iDocument.instance, iDocument, CodeManager.MXML);
					
					revision = new DocumentRevision();
					revision.code = sourceData.source;
					revision.date = String(new Date().time);
					revision.name = new Date().toUTCString();
					iDocument.addRevision(revision);
					Radiate.info("Revision saved.");
					iDocument.markDirty();
					updateRevisionsToolTip();
					Radiate.instance.saveDocument(iDocument);
				}
			}
			
			private function updateRevisionsToolTip():void {
				var iDocument:IDocument = radiate.selectedDocument;
				
				if (iDocument) {
					saveRevisionIcon.toolTip = "Save a revision (" + iDocument.revisions.length + ")"; 
				}
			}
			
			protected function shareIcon_clickHandler(event:MouseEvent):void
			{
				if (radiate.selectedDocument) {
					RunManager.copyURLToDocument(radiate.selectedDocument as DocumentData);
				}
				else {
					Radiate.warn("No document is open");
				}
			}
			
			protected function copyIcon_clickHandler(event:MouseEvent):void
			{
				if (radiate.selectedDocument) {
					var sourceData:SourceData = Radiate.getMXML(radiate.selectedDocument);
					RunManager.copyCodeToClipboard(sourceData.source);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="documentsCollection" />
		
		<!-- SORT BY NAME -->
		<handlers:EventHandler eventName="creationComplete" >
			<collections:SortCollection target="{documentsCollection}" 
								 fields="{['name']}" />
		</handlers:EventHandler>
		
		<!--- show delete document popup -->
		<!--<handlers:EventHandler targets="{deleteDocumentIcon}" eventName="click" 
							   enabled="{list.selectedItem!=null}">-->
			<fc:OpenPopUp id="openDeleteProjectPopUp" 
						  popUpType="{DeleteDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:'document',documentData:list.selectedItem}}"
						  />
		<!--</handlers:EventHandler>-->
		
		<!--- show save before close document popup. disabled for now -->
		<!--<handlers:EventHandler targets="{closeDocumentIcon}" eventName="click" 
							   enabled="{list.selectedItem!=null}">
			<fc:OpenPopUp id="saveBeforeClosePopUp" 
						  popUpType="{SaveBeforeCloseWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:'document',documentData:list.selectedItem}}"
						  />
		</handlers:EventHandler>-->
		
		<fx:Component className="namePopUp">
			
			<s:Group mouseEnabledWhereTransparent="true" 
					 width="100%" height="100%" 
					 >
<!--					 creationComplete="nameInput.setFocus()"-->
				
				<fx:Script>
					<![CDATA[
						import mx.events.FlexEvent;
						protected function nameInput_enterHandler(event:FlexEvent):void {
							
						}
					]]>
				</fx:Script>
				
				
				<fx:Declarations>
					<handlers:EventHandler target="{this}" eventName="mouseDownOutside">
						<!--<popup:ClosePopUp target="{newDocumentPopUp}" />-->
					</handlers:EventHandler>
				</fx:Declarations>
				
				
				<s:Rect width="100%" height="100%" radiusX="0" radiusY="0">
					<s:fill>
						<s:SolidColor color="#ffffff" alpha=".9" />
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="#000000" pixelHinting="true" weight="0" />
					</s:stroke>
					<s:filters>
						<s:DropShadowFilter distance="3" strength=".75"/>
					</s:filters>
				</s:Rect>
				
				<s:Group width="100%" height="100%">
					<s:layout>
						<s:HorizontalLayout paddingLeft="5" paddingRight="5"
											paddingTop="5" paddingBottom="5"/>
					</s:layout>
						
					
					<s:Label text="Name:"/>
					
					<s:TextInput id="nameInput" width="100%" enter="nameInput_enterHandler(event)"/>
				</s:Group>
			</s:Group>
		</fx:Component>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="8" paddingRight="8" paddingBottom="8"/>
	</s:layout>
	
	<mx:VDividedBox id="verticalContainer" 
					width="100%" height="100%"
					top="0"
					left="8" 
					right="8" 
					bottom="0"
					>
		
		<s:Group height="24" 
				 minHeight="24"
				 maxHeight="60"
				 width="100%" 
				 >
					
			<inspectors:SearchCollection dataProvider="{documentsCollection}"
										 fieldName="name"/>
		</s:Group>
		
		
		<s:List id="list" 
				focusAlpha="0"
				minHeight="20"
				width="100%" 
				height="100%"
				labelFunction="labelFunction"
				borderAlpha=".2"
				dataProvider="{documentsCollection}"
				change="list_changeHandler(event)"
				click="list_clickHandler(event)"
				doubleClick="list_doubleClickHandler(event)"
				doubleClickEnabled="true"
				itemRenderer="com.flexcapacitor.views.renderers.EditableDocumentRenderer"
				>
		</s:List>
	
		
	</mx:VDividedBox>
	
	<s:HGroup width="100%"
			 height="24"
			 minHeight="24"
			 verticalAlign="middle"
			 >
		
		<c:BeveledImageButton id="shareIcon" 
							  source="{Radii8LibraryAssets.share}" 
							  toolTip="Share - copies the URL to the selected document to the clipboard. Publish the document to view when not logged in."
							  click="shareIcon_clickHandler(event)"
							  width="16"
							  height="22"
							  />
		
		<c:BeveledImageButton id="importDocumentIcon" 
					   source="{Radii8LibraryAssets.importIcon}" 
					   toolTip="Import MXML"
					   click="importDocumentIcon_clickHandler(event)"
					   />
		<s:Spacer width="-1"/>
		
		<s:Group top="1">
			<c:BeveledImageButton id="setHomePageDocumentIcon" 
								  source="{Radii8LibraryAssets.document}" 
								  toolTip="Set the site home page"
								  click="setHomePageDocumentIcon_clickHandler(event)"
								  />
			<s:BitmapImage id="homePageIcon" 
					 left="5"
					 top="-3"
					 source="{Radii8LibraryAssets.property}"
					 >
			</s:BitmapImage>
		</s:Group>
		
		<c:BeveledImageButton id="editDocumentIcon" 
							  source="{Radii8LibraryAssets.edit}" 
							  toolTip="Edit Document (opens a browser window)"
							  click="editDocumentIcon_clickHandler(event)"
							  includeInLayout="false"
							  visible="false"
							  />
		
		<c:BeveledImageButton id="copyIcon" 
							  source="{Radii8LibraryAssets.copy}" 
							  toolTip="Copy the MXML to the Clipboard"
							  verticalAlign="middle"
							  useHandCursor="true"
							  click="copyIcon_clickHandler(event)"
							  />
		
		<s:Group click="openHomePageInBrowserButton_clickHandler()" visible="false" includeInLayout="false">
			<!--<s:BitmapImage source="{Radii8LibraryAssets.home}" visible="true"
						   />-->
			<c:BeveledImageButton id="openHomePageInBrowserButton" 
								  source="{Radii8LibraryAssets.home}" 
								  toolTip="View home page in browser"
								  smoothingQuality="high"
								  smooth="true"
								  width="15"
								  height="16"
								  click="openHomePageInBrowserButton_clickHandler()"
								  />
			<s:BitmapImage left="5"
						   top="-3"
						   visible="false"
						   includeInLayout="false"
						   source="{Radii8LibraryAssets.property}"
						   
						   >
			</s:BitmapImage>
		</s:Group>
		<s:Spacer width="-1"/>
		<s:DropDownList id="documentStatusList" 
						width="80"
						toolTip="If the document is a private draft only viewable to you or a published document viewable to anyone"
						dataProvider="{Radiate.documentStatuses}" 
						change="documentStatusList_changeHandler(event)">
		</s:DropDownList>
		<c:BeveledImageButton id="openDocumentInBrowserButton" 
							  source="{Radii8LibraryAssets.documentExternalPlayIcon}" 
							  toolTip="View a published document in the browser (if document is not published you must login to the site via in your browser before you can see it)"
							  click="openDocumentInBrowserButton_clickHandler(event)"
							  />
		<c:BeveledImageButton id="openDocumentInBrowserScreenshotButton" 
							  source="{Radii8LibraryAssets.browserScreenShot}" 
							  toolTip="View the document in the browser screenshot (document must be published)"
							  click="openDocumentInBrowserScreenshotButton_clickHandler(event)"
							  includeInLayout="false"
							  visible="false"/>
		<c:BeveledImageButton id="openDocumentInBrowserSiteScannerButton" 
							  source="{Radii8LibraryAssets.browserSiteScanner}" 
							  toolTip="View the document in the browser site scanner (document must be published)"
							  click="openDocumentInBrowserSiteScannerButton_clickHandler(event)"
							  includeInLayout="false"
							  visible="false"/>
		<s:Spacer width="100%"/>
		<c:BeveledImageButton id="saveDocumentIcon" 
							  source="{Radii8LibraryAssets.save}" 
							  toolTip="Save Document"
							  click="saveDocumentIcon_clickHandler(event)"
							  height="15"
							  />
		<c:BeveledImageButton id="saveRevisionIcon" 
							  source="{Radii8LibraryAssets.revision}" 
							  toolTip="Save Revision"
							  click="saveRevisionIcon_clickHandler(event)"
							  height="17"
							  width="17"
							  />
		<c:BeveledImageButton id="closeDocumentIcon" 
					   source="{Radii8LibraryAssets.closedFolder}" 
					   toolTip="Close Document"
					   click="closeDocumentIcon_clickHandler(event)"
					   visible="{list.selectedItem.isOpen}"
					   includeInLayout="{list.selectedItem.isOpen}"
					   width="16"
					   height="14"
					   />
		<c:BeveledImageButton id="openDocumentIcon" 
					   source="{Radii8LibraryAssets.openFolder}" 
					   toolTip="Open Document"
					   click="openDocumentIcon_clickHandler(event)"
					   visible="{!list.selectedItem.isOpen}"
					   includeInLayout="{!list.selectedItem.isOpen}"
					   />
		<c:BeveledImageButton id="newDocumentIcon" 
					   source="{Radii8LibraryAssets.newFile}" 
					   toolTip="New Document"
					   click="newDocumentIcon_clickHandler(event)"
					   />
		<c:BeveledImageButton id="deleteDocumentIcon" 
					   source="{Radii8LibraryAssets.trashCan}" 
					   toolTip="Remove Document"
					   click="deleteDocumentIcon_clickHandler(event)"
					   />
	</s:HGroup>
	

</s:Group>
