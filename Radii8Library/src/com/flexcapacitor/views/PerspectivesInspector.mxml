<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:graphics="be.nascom.flash.graphics.*"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:flexcapacitor="flexcapacitor.*"
		 
		 creationComplete="group1_creationCompleteHandler(event)"
		 fontSize="9"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			
			import mx.collections.ArrayList;
			import mx.core.IStateClient2;
			import mx.core.IToolTip;
			import mx.events.FlexEvent;
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			
			import spark.events.IndexChangeEvent;
			
			
			public var radiate:Radiate;
			
			private var _view:IStateClient2;

			public function get view():IStateClient2
			{
				return _view;
			}

			public function set view(value:IStateClient2):void
			{
				_view = value;
			}

			
			public const DESIGN:String = "design";
			public const DEVELOP:String = "develop";
			public const CODE:String = "code";
			public const DESIGN_VIEW:String = "designview";
			
			public var perspectivesArray:Array = [];
			public var perspectivesArrayList:ArrayList;
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				radiate = Radiate.instance;
				
				perspectivesArray.push({label:"", value: DESIGN, 	toolTip:"Show left panel", icon:Radii8LibraryAssets.leftView});
				perspectivesArray.push({label:"", value: DEVELOP, 	toolTip:"Show left and bottom panels", icon:Radii8LibraryAssets.leftBottomView});
				perspectivesArray.push({label:"", value: CODE, 		toolTip:"Show bottom panel", icon:Radii8LibraryAssets.bottomView});
				perspectivesArray.push({label:"", value: DESIGN_VIEW, toolTip:"Show design view", icon:Radii8LibraryAssets.designView});
				
				perspectivesArrayList = new ArrayList(perspectivesArray);
				perspectivesButtonBar.dataProvider = perspectivesArrayList;
				perspectivesButtonBar.selectedIndex = 0;
				
				if (view) {
					view.addEventListener(FlexEvent.STATE_CHANGE_COMPLETE, stateChangeHandler);
				}
			}
			
			
			protected function buttonbar_changeHandler(event:IndexChangeEvent):void {
				var selectedItem:Object = perspectivesButtonBar.selectedItem;
				
				if (selectedItem.value==DESIGN) {
					view.currentState = DESIGN;
				}
				else if (selectedItem.value==DEVELOP) {
					view.currentState = DEVELOP;
				}
				else if (selectedItem.value==CODE) {
					view.currentState = CODE;
				}
				else if (selectedItem.value==DESIGN_VIEW) {
					view.currentState = DESIGN_VIEW;
				}
			}
			
			protected function perspectives_toolTipShowHandler(event:ToolTipEvent):void {
				var selectedItem:Object = perspectivesButtonBar.selectedItem;
				
				myToolTip = ToolTipManager.currentToolTip;
				myToolTip.text = selectedItem.toolTip;
			}
			
			public var myToolTip:IToolTip;
			
			private function stateChangeHandler(event:FlexEvent):void
			{
				var state:String = view.currentState;
				setSelectedState(state);
			}
			
			
			private function setSelectedState(state:String):void {
				var stateObject:Object;
				
				for (var i:int = 0; i < perspectivesArrayList.length; i++)  {
					stateObject = perspectivesArrayList.getItemAt(i);
					
					if (stateObject.value==state) {
						perspectivesButtonBar.selectedItem = stateObject;
						break;
					}
				}
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:HorizontalLayout paddingLeft="4" />
	</s:layout>
	
	<s:ButtonBar id="perspectivesButtonBar" 
				  requireSelection="true"
				  change="buttonbar_changeHandler(event)"
				  toolTip=" "
				  toolTipShow="perspectives_toolTipShowHandler(event)"
				  >
	</s:ButtonBar>
</s:Group>