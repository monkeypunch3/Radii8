<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx" 
			  xmlns:renderers1="com.flexcapacitor.views.renderers.*" 
			  xmlns:ns="http://flex.apache.org/experimental/ns" 
			  xmlns:controls1="com.flexcapacitor.controls.*" 
			  xmlns:filters="com.flexcapacitor.filters.*" 
			  xmlns:renderers="view.renderers.*" 
			  xmlns:controls="view.controls.*" 
			  xmlns:flow="http://ns.adobe.com/textLayout/2008"
			  xmlns:gallery="gallery.*" 
			  xmlns:fxg="assets.fxg.*" 
			  
			  width="660" height="420" 
			  creationComplete="init()"
			  >
	
	<fx:Metadata>
		[Event(name="close", type="flash.events.Event")]
		[Event(name="insert", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.utils.ArrayUtils;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			
			import flash.net.navigateToURL;
			import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			
			import mx.events.FlexEvent;
			import mx.graphics.BitmapFill;
			import mx.graphics.SolidColor;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var pixabayURL:String = "https://pixabay.com/api/";
			private var PIXABAY_API_KEY:String = "";
			private var IMAGE_TYPE:String = "image_type";
			private var KEY:String = "key";
			
			private var timeout:int;
			private var isPixabay:Boolean = true;
			private var isFlickr:Boolean;
			
			public var imagesLoaded:int = 0;
			private var numberOfResults:int = 0;
			private var totalImages:int = 0;
			private var pageSize:int = 21;
			private var totalPages:int;
			private var currentPage:int = 1;
			private var addingImage:Boolean;
			private var showPhotoListOnComplete:Boolean;
			public var checkeredFill:BitmapFill;
			public var blackFill:SolidColor;
			public var selectedItem:Object;
			private var loader:URLLoader;
			private var headers:Array;
			
			[Bindable]
			public var imageTypes:Array = ["all", "photo", "illustration", "vector"];
			
			protected function init():void {
				imageTypesDropdown.dataProvider = new ArrayCollection(imageTypes);
				imageTypesDropdown.selectedIndex = 0;
				
				blackFill = new SolidColor();
				checkeredFill = DisplayObjectUtils.createCheckeredFill(10, 10);
				
				providersCollection.source = providers;
				
				searchProviderLogo.source = providers[0].previewURL;
				
				var providersValue:String = new Radii8LibraryAssets.providers();
				var providersXML:XML = new XML(providersValue);
				var providersXMLList:XMLList = providersXML.provider;
				var pixabayXML:XML;
				var pixabay:Object;
				
				for (var i:int = 0; i < providersXMLList.length(); i++) {
					pixabayXML = providersXMLList[i];
					pixabay = {};
					pixabay.id = String(pixabayXML.@id);
					pixabay.key =String(pixabayXML.@key);
					PIXABAY_API_KEY = pixabay.key;
				}
				
				if (loader==null) {
					loader = new URLLoader();
					configureListeners(loader);
				}
			}
			
			public function search(value:String, page:int = 1):void {
				if (value=="") return;
				var imageType:String;
				var urlRequest:URLRequest;
				
				if (page!=1) {
					totalPages = Math.ceil(totalImages/pageSize);
					page = Math.max(1, Math.min(currentPage, totalPages));
				}
				
				selectedItem = null;
				noImagesFoundLabel.visible = false;
				errorOccuredLabel.visible = false;
				
				progressGroup.visible = false;
				
				hideSelectedImage();
				
				if (isPixabay) {
					imageType = imageTypesDropdown.selectedItem as String;
					urlRequest = new URLRequest();
					urlRequest.url = pixabayURL + "?key=" + PIXABAY_API_KEY +  "&image_type=" + imageType + "&page=" + page + "&per_page=" + pageSize +"&q=" + encodeURIComponent(value);
					loader.load(urlRequest);
					//imageType = imageTypesDropdown.selectedItem as String;
					//pixabaySearch.url = pixabayURL + "?key=" + PIXABAY_API_KEY +  "&image_type=" + imageType + "&page=" + page + "&per_page=" + pageSize +"&q=" + encodeURIComponent(value);
					//pixabaySearch.send();
				}
				
			}
			
			private function searchResultsHandler(event:Event):void {
				var result:Object;
				var images:Array;
				var photos:XMLList;
				var startIndex:int;
				var endIndex:int;
				var isFirstPage:Boolean;
				var isLastPage:Boolean;
				var remainingFetches:int;
				var fetchesReset:int;
				var fetchingLimit:int;
				var header:URLRequestHeader;
				
				if (isPixabay) {
					if (event is ResultEvent) {
						result = ResultEvent(event).result;
						//headers = pixabaySearch.headers;
					}
					else {
						result = loader.data;
					}
					
					//Identical requests must be cached.
					if (result.indexOf("[ERROR 429]")!=-1) {
						// happens when same search was made multiple times (must cache calls)
						return;
					}
						
					// The maximum number of requests that the consumer is permitted to make in 30 minutes.
					if (headers && ArrayUtils.hasItem(headers, "X-RateLimit-Limit", "name")) {
						header = ArrayUtils.getItem(headers, "X-RateLimit-Limit", "name", false) as URLRequestHeader;
						fetchingLimit = int(header.value);
					}
					
					// The number of requests remaining in the current rate limit window.
					if (headers && ArrayUtils.hasItem(headers, "X-RateLimit-Remaining", "name")) {
						header = ArrayUtils.getItem(headers, "X-RateLimit-Remaining", "name", false) as URLRequestHeader;
						remainingFetches = int(header.value);
					}
					
					// The remaining time in seconds after which the current rate limit window resets.
					if (headers && ArrayUtils.hasItem(headers, "X-RateLimit-Reset", "name")) {
						header = ArrayUtils.getItem(headers, "X-RateLimit-Reset", "name", false) as URLRequestHeader;
						fetchesReset =  int(header.value);
					}
					
					try {
						result = JSON.parse(result as String);
					}
					catch (error:Error) {
						
					}
					
					images = result.hits;
					imagesCollection.source = images;
					numberOfResults = imagesCollection.length;
					//totalImages = result.total; // actual total number of results 
					totalImages = result.totalHits;
					photosList.dataProvider = imagesCollection;
					totalPages = Math.ceil(totalImages/pageSize);
					currentPage = Math.min(currentPage, totalPages);
					
					if (totalPages==0) {
						startIndex = 0;
						endIndex = 0;
						isFirstPage = true;
						isLastPage = true;
					}
					else if (currentPage==1) {
						startIndex = currentPage;
						endIndex = numberOfResults;
						isFirstPage = true;
					}
					else {
						startIndex = pageSize*(currentPage-1);
						endIndex = startIndex+numberOfResults;
						isLastPage = endIndex==totalImages;
					}
					
					totalImagesLabel.text = startIndex + "-" + endIndex + " of " + totalImages;
				}
				else if (isFlickr) {
					photos = result..photo;
					photosCollection.source = photos;
					numberOfResults = photosCollection.length;
					photosList.dataProvider = photosCollection;
				}
				
				imagesLoaded = 0;
				
				if (progressGroup.value>=1) {
					progressGroup.visible = false;
					progressGroup.setProgress(0,100);
				}
				
				showPhotoList();
				
				if (isFirstPage) {
					previousButton.enabled = false;
				}
				else {
					previousButton.enabled = true;
				}
				
				if (isLastPage) {
					nextButton.enabled = false;
				}
				else {
					nextButton.enabled = true;
				}
				
			}
			
			public function showPhotoList():void {
				if (totalImages!=0) {
				}
				
				noImagesFoundLabel.visible = totalImages==0;
				errorOccuredLabel.visible = false;
				showPhotoListOnComplete = false;
				photosListContainer.visible = true;
			}
			
			public function hidePhotoList():void {
				if (totalImages!=0) {
				}
				
				noImagesFoundLabel.visible = totalImages==0;
				errorOccuredLabel.visible = false;
				showPhotoListOnComplete = false;
				photosListContainer.visible = false;
			}
			
			private function faultHandler(event:Event):void {
				var message:String;
				var errorID:String;
				
				if (event is IOErrorEvent) {
					errorID = IOErrorEvent(event).errorID + "";
				}
				else {
					errorID = "";
					//message = event is FaultEvent ? FaultEvent(event).fault.faultString : event.toString();
				}
				
				errorOccuredLabel.visible = totalImages==0;
				errorOccuredLabel.text = "An error occured. Connection may have been lost. Check your connection and try again.\n" + errorID;
			}
			
			private function checkLoad():void {
				
				if (imagesLoaded == totalImages) {
					
				}
			}
			
			private function updateProgressBar():void
			{
				
			}
			
			/**
			 * Opens or closes an image. Also updates the tool tip. 
			 **/
			private function handleClick(e:MouseEvent):void {
				
				if (selectedItem) {
					showSelectedImage(selectedItem);
				}
			}
			
			public function showSelectedImage(data:Object, animate:Boolean = false):void {
				var source:String;

				if (isPixabay) {
					source = getPixabayImagePath(data, false);
				}
				else if (isFlickr) {
					//source = getFlickrImagePath(data, false);
					
					if (source && source.indexOf("_s.jpg")!=-1) {
						source = source.replace("_s.jpg", ".jpg");
					}
				}
				
				if (image.source==source) {
					imageGroup.backgroundFill = checkeredFill;
					image.source = source;
				}
				else {
					image.source = source;
					imageGroup.backgroundFill = blackFill;
				}
				
				if (animate) {
					image.alpha = 0;
					image.visible = true;
					image.smooth = true;
					
					previousButton.alpha = 0;
					previousButton.visible = true;
					
					nextButton.alpha = 0;
					nextButton.visible = true;
					
				}
				
				imageGroup.visible = true;
				insertButton.enabled = true;
			}
			
			public function hideSelectedImage():void {
				imageGroup.visible = false;
				insertButton.enabled = false;
			}
			
			private function handleSearchKeyUp(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ENTER || event.keyCode == Keyboard.ENTER) {
					search(searchInput.text);
				}
			}
			
			protected function searchInput_clearHandler(event:Event):void {
				searchInput.setFocus();
				clear();
			}
			
			public function clear():void {
				addingImage = false;
				
				searchInput.text = "";
				noImagesFoundLabel.visible = false;
				errorOccuredLabel.visible = false;
				selectedItem = null;
				
				imagesCollection.removeAll();
				photosCollection.removeAll();
				
				hidePhotoList();
				hideSelectedImage();
			}
			
			/**
			 * Prevents the list from selecting any item
			 **/
			protected function photosList_changingHandler(event:IndexChangeEvent):void {
				selectedItem = photosList.selectedItem;
				timeout = setTimeout(preventSelectionHandler, 500, event);
			}
			
			/**
			 * Delay it so we don't see the zoom out animation
			 **/
			private function preventSelectionHandler(event:IndexChangeEvent):void {
				event.preventDefault();
				clearTimeout(timeout);
				
				photosList.selectedIndex = -1;
			}
			
			protected function previousButtonHandler(event:MouseEvent):void {
				search(searchInput.text, Math.max(1, --currentPage));
			}
			
			protected function nextButtonHandler(event:MouseEvent):void {
				search(searchInput.text, ++currentPage);
			}
			
			public function getPixabayImagePath(data:Object, thumbnail:Boolean = true):String {
				
				if (data is Object) {
					
					if (thumbnail) {
						return data.previewURL;
					}
					else {
						return data.webformatURL;
					}
				}
				return "";
			}
			
			public function getPixabaySVGPath(data:Object, thumbnail:Boolean = true):String {
				
				if (data is Object) {
					
					if (thumbnail) {
						return data.previewURL;
					}
					else {
						return data.webformatURL;
					}
				}
				return "";
			}
			
			protected function image_clickHandler(event:MouseEvent):void {
				
				hideSelectedImage();
			}
			
			protected function insertButton_clickHandler(event:MouseEvent):void {
				var bitmapData:BitmapData;
				bitmapData = image.bitmapData;
				dispatchEvent(new Event("insert"));
			}
			
			protected function image_completeHandler(event:Event):void {
				imageGroup.backgroundFill = checkeredFill;
			}
			
			protected function closeButton_clickHandler(event:MouseEvent):void {
				dispatchEvent(new Event("close"));
			}
			
			protected function providersList_clickHandler(event:MouseEvent):void {
				var selectedProvider:Object = providersList.selectedItem;
				
				if (selectedProvider) {
					if (selectedProvider.name=="Pixabay") {
						isPixabay = true;
					}
				}
			}
			
			protected function image_readyHandler(event:FlexEvent):void {
				
			}
			
			public var providers:Array = [
				{name:"Pixabay", link:"https://www.pixabay.com", previewURL:"https://pixabay.com/static/img/logo.png"}];
			// {name:"Flickr", link:"https://www.flickr.com", previewURL:"https://s.yimg.com/pw/images/goodies/white-flickr.png"}
			private var status:int;
			private var redirected:Boolean;
			
			protected function searchButton_clickHandler(event:MouseEvent):void {
				search(searchInput.text);
			}
			
			protected function searchProviderLogo_clickHandler(event:MouseEvent):void {
				var urlRequest:URLRequest;
				
				urlRequest = new URLRequest();
				urlRequest.url = providers[0].link;
				navigateToURL(urlRequest, "_blank");
			}
			
			private function configureListeners(dispatcher:IEventDispatcher):void {
				dispatcher.addEventListener(Event.COMPLETE, completeHandler);
				//dispatcher.addEventListener(Event.OPEN, openHandler);
				//dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				//dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				dispatcher.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, httpResposeStatusHandler);
				dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
			}
			
			private function completeHandler(event:Event):void {
				//trace("completeHandler: " + loader.data);
				searchResultsHandler(event);
			}
			
			private function openHandler(event:Event):void {
				//trace("openHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void {
				//trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				//trace("securityErrorHandler: " + event);
				faultHandler(event);
			}
			
			private function httpStatusHandler(event:HTTPStatusEvent):void {
				//trace("httpStatusHandler: " + event);
			}
			
			private function httpResposeStatusHandler(event:HTTPStatusEvent):void {
				//trace("httpStatusHandler: " + event);
				headers = event.responseHeaders;
				status = event.status;
				redirected = event.redirected;
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				//trace("ioErrorHandler: " + event);
				faultHandler(event);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="imagesCollection" />
		<s:ArrayCollection id="providersCollection" />
		<s:XMLListCollection id="photosCollection" />
		
		<s:HTTPService id="imageSearch" resultFormat="e4x" result="searchResultsHandler(event)" fault="faultHandler(event)" />
		<s:HTTPService id="pixabaySearch" resultFormat="text" result="searchResultsHandler(event)" fault="faultHandler(event)" />
		<!--http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/URLLoader.html-->
		
	</fx:Declarations>
	
	
	<s:HGroup width="100%" 
			  top="30" 
			  left="20"
			  right="20"
			  gap="20">
		
		<controls1:SearchTextInput id="searchInput" 
						visible="true" 
						keyUp="handleSearchKeyUp(event)" 
						clearText="searchInput_clearHandler(event)"
						prompt="Enter a search term"
						width="100%" 
						text=""
						showSearchIcon="false"
						showClearIcon="true"/>
		
		<s:DropDownList id="imageTypesDropdown" height="23"/>
		
		<s:Button id="searchButton" label="Search" click="searchButton_clickHandler(event)" height="23"/>
	</s:HGroup>
	
	<s:BorderContainer id="providersListContainer" 
					   width="100%" height="300"
					   top="70" 
					   left="20" 
					   right="20"
					   borderVisible="false"
					   backgroundColor="#CFCFCF"
					   >
		
		<s:List id="providersList" 
				width="100%" height="100%" 
				dataProvider="{providersCollection}" 
				contentBackgroundAlpha="0.75"
				borderVisible="false"
				visible="true"
				click="providersList_clickHandler(event)">
			
			<s:layout>
				<s:TileLayout useVirtualLayout="true" horizontalGap="20" verticalGap="20" 
							  paddingLeft="20" paddingRight="20" paddingTop="0"/>
			</s:layout>
			
			<s:itemRenderer>
				<fx:Component>
					<renderers1:GalleryProviderItemRenderer />
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		
		<controls1:RichDisplayText id="copyrightNotice" bottom="20" left="20" right="20" alpha=".5">
			<controls1:textFlow>
				<s:TextFlow whiteSpaceCollapse="collapse">
					<s:p><s:span>All images on </s:span><s:a href="https://pixabay.com/" target="_blank"><s:span s:textDecoration="none">Pixabay</s:span></s:a><s:span> are released into the Public Domain under </s:span><s:a href="http://creativecommons.org/publicdomain/zero/1.0/deed.en" target="_blank"><s:span s:textDecoration="none">Creative Commons CC0</s:span></s:a><s:span>. Therefore, the images can be modified and may be used freely for any application - also commercially and in printed format. Attribution in appreciated, but not required. </s:span><s:a href="https://pixabay.com/en/blog/posts/public-domain-images-what-is-allowed-and-what-is-4/" target="_blank"><s:span s:textDecoration="none">Exceptions</s:span></s:a></s:p>
				</s:TextFlow>
			</controls1:textFlow>
		</controls1:RichDisplayText>
		
	</s:BorderContainer>
	
	<s:BorderContainer id="photosListContainer" 
					   width="100%" height="300"
					   top="70" left="20" 
					   right="20"
					   visible="false"
					   borderVisible="false"
					   backgroundColor="#CFCFCF">
		
		<s:List id="photosList" 
				width="100%" height="100%" 
				borderVisible="false"
				contentBackgroundAlpha=".75"
				dataProvider="{photosCollection}" 
				changing="photosList_changingHandler(event)"
				click="handleClick(event)"
				>
			
			<s:layout>
				<s:TileLayout useVirtualLayout="true" horizontalGap="10" verticalGap="10" paddingLeft="10" paddingTop="10"/>
			</s:layout>
			
			<s:itemRenderer>
				<fx:Component>
					<renderers1:GalleryItemRenderer />
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		<s:HGroup id="controlsGroup" 
				  verticalAlign="baseline"
				  top="270"
				  right="10"
				  left="10">
			<s:Button id="previousButton" 
					  label="Previous"
					  click="previousButtonHandler(event)"/>
			
			<s:Label id="totalImagesLabel" />
			
			<s:Label text="results provided by"/>
			
			<s:Image id="searchProviderLogo" 
					 height="24"
					 width="100"
					 horizontalAlign="left"
					 smooth="true"
					 smoothingQuality="high"
					 useHandCursor="true"
					 buttonMode="true"
					 baseline="-5"
					 toolTip="Open in a new window"
					 click="searchProviderLogo_clickHandler(event)"
					 />
			
			<s:Spacer width="100%"/>
			
			<s:Button id="nextButton" 
					  label="Next"
					  click="nextButtonHandler(event)"
					  />
		</s:HGroup>
		
		
		<s:BorderContainer id="imageGroup" 
						   left="0" top="0" 
						   visible="false"
						   width="100%" height="100%" 
						   borderVisible="false">
			
			<s:Image id="image" 
					 width="620" height="300" 
					 backgroundColor="black"
					 backgroundAlpha="0"
					 enableLoadingState="true"
					 smooth="true"
					 smoothingQuality="high"
					 useHandCursor="true"
					 buttonMode="true"
					 
					 click="image_clickHandler(event)"
					 complete="image_completeHandler(event)"
					 ready="image_readyHandler(event)"
					 />
			
		</s:BorderContainer>
	</s:BorderContainer>
	
	
	<s:HGroup id="addControlsGroup" 
			  verticalAlign="baseline"
			  top="382"
			  right="20"
			  left="20">
		
		<s:Button id="closeButton" 
				  label="Close"
				  click="closeButton_clickHandler(event)"
				  />
		<s:Spacer width="100%"/>
		
		<s:Button id="insertButton" 
				  label="Insert"
				  enabled="false"
				  click="insertButton_clickHandler(event)"
				  />
	</s:HGroup>
	
	
	<mx:ProgressBar id="progressGroup" 
					width="400" height="10" 
					horizontalCenter="0" top="215"
					visible="false">
	</mx:ProgressBar>
	
	<s:Label id="noImagesFoundLabel" 
			 top="80" left="30" right="20"
			 width="620" 
			 visible="false"
			 text="No images found matching that search" />
	
	<s:Label id="errorOccuredLabel" 
			 top="80" left="30" right="20"
			 width="620" 
			 visible="false"
			 text="" />
	
</s:BorderContainer>
