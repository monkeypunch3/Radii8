<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:pc="library://ns.adobe.com/flex/tp" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:components="com.flexcapacitor.components.*"
		 xmlns:supportClasses="spark.components.supportClasses.*" 
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:core="com.flexcapacitor.effects.core.*"
		 xmlns:flexiframe="com.google.code.flexiframe.*" 
		 xmlns:views="com.flexcapacitor.views.*"
		 xmlns:panels="com.flexcapacitor.views.panels.*"
		 xmlns:fc="com.flexcapacitor.effects.popup.*"
		 xmlns:ns1="*" 
		 
		 width="400" 
		 height="100%" 
		 creationComplete="creationCompleteHandler(event)" 
		 >
		

	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.filters.BorderStrokeFilter;
			import com.flexcapacitor.managers.RunManager;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			import com.flexcapacitor.views.windows.SaveBeforeCloseWindow;
			
			import mx.core.INavigatorContent;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			
			import spark.components.Application;
			import spark.events.IndexChangeEvent;
			
			/**
			 * 
TypeError: Error #1009: Cannot access a property or method of a null object reference.
	at mx.containers::TabNavigator/keyDownHandler()[E:\dev\4.y\frameworks\projects\mx\src\mx\containers\TabNavigator.as:895]
	 * 
	 * Cause: focusManager is null check for null
	 *     override protected function keyDownHandler(event:KeyboardEvent):void
    {
        if (focusManager.getFocus() == this)
        {
            // Redispatch the event from the TabBar so that it can handle it.
            tabBar.dispatchEvent(event);
        }
    }
	 		 * 
			 * */
			[Bindable]
			private var radiate:Radiate;
			
			protected function panelsLabelFunction(item:Object):String {
				var name:String = item is Label ? Label(item).text : " â€¢ ";
				return name;
			}
			
			protected function list1_changeHandler(event:IndexChangeEvent):void {
				/*var point:Point = panels.layout.getScrollPositionDeltaToElement(event.newIndex +1);
				
				// if going up get the selected item
				if (point && point.y<0) {
					point = panels.layout.getScrollPositionDeltaToElement(event.newIndex);
					scrollMotionPath.valueBy = point.y;
					scrollPanelsAnimation.play();
				}
				else if (point) {
					//panels.layout.verticalScrollPosition = panels.layout.verticalScrollPosition + point.y;
					scrollMotionPath.valueBy = point.y;
					scrollPanelsAnimation.play();
				}
				
				event.preventDefault();*/
			}
			
			protected function closeDocumentIcon_clickHandler():void {
				if (radiate.selectedDocument && radiate.isDocumentPreviewOpen(radiate.selectedDocument)) {
					radiate.closeVisibleDocument();
				}
				else {
					openSaveBeforeClosePopUp.play();
				}
			}
			
			protected function navigatorContent_changeHandler(event:IndexChangedEvent):void {
				var index:int = event.newIndex;
				var document:IDocument;
				
				document = radiate.getDocumentAtIndex(event.newIndex);
				
				if (document==null) {
					return; // not created yet?? 
				}
				
				radiate.setProject(document.project);
				radiate.selectDocument(document, true);
				radiate.setTarget(document.instance, true);
				return;
				
				/*
				if (index==1) {
					//Radiate.desetDocuments(true);
					radiate.isPreviewVisible = true;
				}
				else {
					document = NavigatorContent(documentsTagNavigator.getItemAt(0)).getElementAt(0) as DocumentContainer;
					
					if (document) {
						Radiate.setDocuments(document.targetApplication);
						radiate.isPreviewVisible = false;
					}
				}
				*/
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				radiate = Radiate.getInstance();
				
				radiate.documentsTabNavigator = documentsTagNavigator;
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, targetChange, false, 0, true);
				
				updateSelectedTargetIcon();
			}
			
			private var previewCreated:Boolean;
			private var initialDocument:Boolean;


			private var navigatorContent:NavigatorContent;
			
			
			protected function documentsTagNavigator_clickHandler(event:MouseEvent):void {
				var target:Object = radiate.target;
				var navigatorContent:INavigatorContent = documentsTagNavigator.selectedChild;
				
				if (target && "setFocus" in target) {
					callLater(target["setFocus"]);
				}
				
				if (navigatorContent is DisplayObject) {
					var filter:BorderStrokeFilter = new BorderStrokeFilter();
					////navigatorContent.filters = [filter];
				}
			}
			
			/**
			 * Activate selected inspector and deactivate hidden inspectors
			 * */
			public function activateInspector(viewstack:ViewStack, selectedNavigator:NavigatorContent):void {
				var navigatorItem:NavigatorContent;
				var selectedNavigatorContent:IInspector;
				var navigatorInspector:IInspector;
				var item:Object;
				
				
				if (selectedNavigator && selectedNavigator.numElements>0) {
					item = selectedNavigator.getElementAt(0);
					selectedNavigatorContent = item as IInspector;
					
					if (selectedNavigatorContent==null && item is Scroller) {
						selectedNavigatorContent = item.getElementAt(0) as IInspector;
					}
				}
				
				var numberOfElements:int = viewstack.numElements;
				
				// deactivate hidden inspectors
				for (var i:int;i<numberOfElements;i++) {
					navigatorItem = viewstack.getElementAt(i) as NavigatorContent;
					
					if (navigatorItem && navigatorItem.numElements>0) {
						item = navigatorItem.getElementAt(0);
						navigatorInspector = item as IInspector;
						
						if (navigatorInspector==null && item is Scroller) {
							navigatorInspector = item.getElementAt(0) as IInspector;
						}
						
						if (navigatorInspector) {
							navigatorInspector.deactivate();
						}
					}
				}
				
				// activate the current inspector
				if (selectedNavigatorContent) {
					UIComponent(selectedNavigatorContent).validateNow();// make sure everythings created
					selectedNavigatorContent.activate();
				}
				
				updateSelectedTargetIcon();
			}

			/**
			 * 
			 * This error occured on switching from design view to the home screen
			TypeError: Error #1009: Cannot access a property or method of a null object reference.
				at mx.containers::TabNavigator/keyDownHandler()[E:\dev\4.y\frameworks\projects\mx\src\mx\containers\TabNavigator.as:895]
				 * 
			    override protected function keyDownHandler(event:KeyboardEvent):void
			    {
			        if (focusManager.getFocus() == this) // error here line 895
			        {
			            // Redispatch the event from the TabBar so that it can handle it.
			            tabBar.dispatchEvent(event);
			        }
			    }

			*/
			
			protected function firstViewStack_changeHandler(event:IndexChangedEvent):void {
				activateInspector(firstViewStack, event.relatedObject as NavigatorContent);
			}
			
			protected function secondViewStack_changeHandler(event:IndexChangedEvent):void {
				activateInspector(secondViewStack, event.relatedObject as NavigatorContent);
			}
			
			protected function thirdViewStack_changeHandler(event:IndexChangedEvent):void {				
				activateInspector(thirdViewStack, event.relatedObject as NavigatorContent);
			}
			
			protected function forthViewStack_changeHandler(event:IndexChangedEvent):void {
				activateInspector(forthViewStack, event.relatedObject as NavigatorContent);
			}
			
			protected function firstViewStack_creationCompleteHandler(event:FlexEvent):void {
				activateInspector(firstViewStack, firstViewStack.selectedChild as NavigatorContent);
			}
			
			protected function secondViewStack_creationCompleteHandler(event:FlexEvent):void {
				activateInspector(secondViewStack, secondViewStack.selectedChild as NavigatorContent);
			}
			
			protected function thirdViewStack_creationCompleteHandler(event:FlexEvent):void {
				activateInspector(thirdViewStack, thirdViewStack.selectedChild as NavigatorContent);
			}
			
			protected function forthViewStack_creationCompleteHandler(event:FlexEvent):void {
				activateInspector(forthViewStack, forthViewStack.selectedChild as NavigatorContent);
			}
			
			protected function targetChange(event:RadiateEvent):void {
				var targetNameValue:String = ClassUtils.getIdentifierOrName(event.selectedItem, true, true);
				
				if (targetNameLabel) {
					if (targetNameValue) {
						
						if (event.selectedItem is Application) {
							targetNameLabel.text = "Document";
						}
						else {
							targetNameLabel.text = targetNameValue;
						}
					}
					else {
						targetNameLabel.text = "";
					}
				}
				
				updateSelectedTargetIcon();
			}
			
			public function updateSelectedTargetIcon():void {
				var componentDescription:ComponentDescription;
				var selectedTarget:Object;
				var targetNameValue:String;
				
				if (!radiate) {
					radiate = Radiate.instance;
				}
				selectedTarget = radiate.target;
				
				if (!selectedTargetIcon) {
					return;
				}
				
				if (selectedTargetIcon.contentLoader==null) {
					selectedTargetIcon.contentLoader = Radiate.contentCache;
				}
				
				if (radiate.selectedDocument) {
					componentDescription = radiate.selectedDocument.getItemDescription(selectedTarget);
					
					if (componentDescription) {
						if (selectedTarget is Application) {
							selectedTargetIcon.source = Radii8LibraryAssets.document;
						}
						else {
							selectedTargetIcon.source = Radiate.componentsIconPath + componentDescription.className + ".png";
						}
					}
					else {
						selectedTargetIcon.source = Radii8LibraryAssets.document;
					}
				}
				else {
					selectedTargetIcon.source = Radii8LibraryAssets.document;
				}
				
				targetNameValue = ClassUtils.getIdentifierOrName(selectedTarget, true, true);
				
				if (selectedTarget is Application) {
					targetNameValue = "Document";
				}
				
				if (targetNameValue) {
					selectedTargetIcon.toolTip = targetNameValue ? targetNameValue + ". " + clickToOpen : "Document" + ". " + clickToOpen;
				}
			}
			
			public var clickToOpen:String = "Click to open documentation in the browser";
			
			protected function selectedTargetIcon_clickHandler(event:MouseEvent):void {
				RunManager.openDocumentationInBrowserButton(radiate.target);
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		
		<!--<s:Animate id="scrollPanelsAnimation" target="{panels.layout}" >
			<s:SimpleMotionPath id="scrollMotionPath" property="verticalScrollPosition" />
		</s:Animate>-->
		
		<!-- FADE IN APPLICATION -->
		<!--<s:Sequence id="fadeIn">
			
			<s:SetAction target="{radiateScroller}" property="alpha" value="0"/>
			
			<s:Fade target="{applicationGroup}" alphaFrom="0" alphaTo="1" duration="0"/>
			
			<s:SetAction target="{radiateScroller}" property="alpha" value="0"/>
			
			<s:Animate target="{applicationGroup}" startDelay="500" >
				<s:SimpleMotionPath valueFrom="0" valueTo="270" property="left" />
			</s:Animate>
			
			<s:SetAction target="{radiateScroller}" property="alpha" value="1"/>
			
			<s:Animate target="{radiateScroller.viewport}" duration="750">
				<s:SimpleMotionPath valueFrom="0" valueTo="1" property="alpha"/>
				<s:SimpleMotionPath valueFrom="{radiateScroller.viewport.contentHeight}" 
									valueTo="0" property="verticalScrollPosition" />
			</s:Animate>
			
		</s:Sequence>-->
		
		<!--<handlers:EventHandler eventName="creationComplete" target="{this}">
			<core:PlayEffect effect="{fadeIn}"/>
		</handlers:EventHandler>-->
		
		
		<!--- show save document popup -->
		<fc:OpenPopUp id="openSaveBeforeClosePopUp" 
					  popUpType="{SaveBeforeCloseWindow}" 
					  modalDuration="100" 
					  percentWidth="75"
					  percentHeight="90"
					  width="600"
					  parent="{parentApplication}"/>
	</fx:Declarations>
	
	
	<s:states>
		<s:State name="design"/>
		<s:State name="develop"/>
		<s:State name="code"/>
	</s:states>
	
	
	<s:Group width="100%" height="100%" bottom="35" left="5" right="5">
		
		<!-- TOOLS -->
		<s:HGroup id="toolBarGroup" width="100%" height="26" right="10" >
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}"/>
			<views:SaveDocumentToolBar />
			
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}"/>
			<views:Tools minHeight="24"/>
			
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}" 
						   visible="{toolBarInspector.hasInspector}"/>
			<views:SelectedToolToolBar id="toolBarInspector"/>
			
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}"/>
			<views:HistoryToolBar />
			
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}"/>
			<views:RunToolBar />
			
			<s:Spacer width="100%"/>
			<views:OperationsInspector id="operationsInspector" height="100%"/>
			<s:Spacer width="100%"/>
			<!--<views:SizesInspector showRestoreSize="true" height="100%"/>-->
			<views:ZoomInspector showActualSize="false" height="100%"/>
			<views:PerspectivesInspector height="100%" view="{this}"/>
		</s:HGroup>
	
		<mx:HDividedBox width="100%" height="100%" 
						top="32">
			
			
			<mx:VDividedBox id="leftColumn" width="350" height="100%" 
							includeIn="design,develop">
				
				
				<mx:TabNavigator id="firstViewStack" 
								 width="100%"
								 height="100%"
								 clipContent="true"
								 change="firstViewStack_changeHandler(event)"
								 creationComplete="firstViewStack_creationCompleteHandler(event)">
					
					<!-- PROJECT -->
					<s:NavigatorContent label="PROJECTS"  >
						<panels:ProjectInspector width="100%" />
					</s:NavigatorContent>
					
					<!-- COMPONENTS -->
					<s:NavigatorContent label="COMPONENTS">
						<panels:ComponentsInspector height="100%" width="100%" />
					</s:NavigatorContent>
					
					<!-- LAYERS -->
					<s:NavigatorContent label="LAYERS"  >
						<views:LayersInspector width="100%" minHeight="180"/>
					</s:NavigatorContent>
					
					<!-- STATES -->
					<s:NavigatorContent label="STATES">
						<s:Scroller width="100%" height="100%">
							<panels:States height="100%" width="100%" />
						</s:Scroller>
					</s:NavigatorContent>
					
					<!-- HISTORY -->
					<s:NavigatorContent label="HISTORY">
						<panels:HistoryInspector id="history" minHeight="100" 
											clearOnTargetChange="false"
											height="100%" width="100%"/>
					</s:NavigatorContent>
					
					<!-- OTHER -->
					<s:NavigatorContent label="OTHERS">
						
						<s:Scroller width="100%"  
									height="100%"
									left="0"
									top="0" 
									bottom="0">
				
							<s:VGroup id="panels" width="100%" height="100%" 
									 paddingRight="4" variableRowHeight="true">
							
								<!-- BLEND MODES -->
								<!--<s:Label text="BLEND MODE" width="100%" styleName="formItem"/>
								<inspectors:BlendMode height="100%" width="100%" />-->
								
								<!-- SNAPSHOT -->
								<s:Label text="SNAPSHOT" width="100%" styleName="formItem" />
								<views:Snapshot height="100%" width="100%" />
								
								<!-- EDIT DECISION LIST -->
								<s:Label text="CHANGE LOG" width="100%" styleName="formItem"/>
								<views:ChangeHistory minHeight="22" height="100%" width="100%" removeDuplicates="false"/>
								
								<!-- SEARCH EXPRESSION -->
								<s:Label text="SEARCH EXPRESSION" width="100%" styleName="formItem"/>
								<views:SearchExpression height="100%" width="100%"/>
								
								<!-- REDRAW REGIONS -->
								<s:Label text="REDRAW REGIONS" width="100%" styleName="formItem"/>
								<views:RedrawRegions width="20" height="20" />
								
								<!-- FRAMERATE -->
								<s:Label text="FRAMERATE" width="100%"
										 styleName="formItem"/>
								<views:FrameRateInspector />
								
								<!-- MEMORY -->
								<s:Label text="MEMORY" width="100%" styleName="formItem"/>
								<views:Memory height="100%" width="100%" 
												   showCurrentlyUsedPlayerMemory="true"/>
								<s:Spacer height="10"/>
							</s:VGroup>
						</s:Scroller>
					</s:NavigatorContent>
				</mx:TabNavigator>
				
				<mx:TabNavigator id="secondViewStack" 
								 borderStyle="solid"
								 width="100%"
								 height="100%"
								 selectedIndex="0"
								 change="secondViewStack_changeHandler(event)"
								 creationComplete="secondViewStack_creationCompleteHandler(event)">
					
					<!-- DOCUMENTS -->
					<s:NavigatorContent width="100%" height="100%" label="DOCUMENTS">
						<panels:DocumentsInspector height="100%" width="100%"/>
					</s:NavigatorContent>
					
					<!-- PROPERTIES -->
					<s:NavigatorContent label="PROPERTIES">
						<!-- TODO Convert this into a composite component -->
						<s:HGroup width="100%" verticalAlign="baseline" paddingRight="8" paddingLeft="8">
							<c:BeveledImageButton id="selectedTargetIcon"
												  minWidth="18"
												  click="selectedTargetIcon_clickHandler(event)"/>
							<s:ButtonBar id="propertiesOptionsButtonBar" 
										 fontSize="11"
										 requireSelection="true"
										 dataProvider="{forthViewStack}" 
										 />
							
							<s:Label id="targetNameLabel" width="100%" paddingLeft="6" color="#888888" 
									 visible="false" includeInLayout="false"/>
						</s:HGroup>
						
						<mx:ViewStack id="forthViewStack" 
										 width="100%"
										 height="100%"
										 minHeight="24"
										 top="28"
										 change="forthViewStack_changeHandler(event)"
										 creationComplete="forthViewStack_creationCompleteHandler(event)">
							
							<!-- DYNAMIC INSPECTOR -->
							<s:NavigatorContent label="COMMON">
								<panels:DynamicComponentInspector width="100%" height="100%"/>
							</s:NavigatorContent>
							
							<!-- PROPERTY INSPECTOR -->
							<s:NavigatorContent label="ALL">
								<panels:PropertyInspector minHeight="180" height="100%" width="100%"/>
							</s:NavigatorContent>
							
							<!-- STYLES -->
							<s:NavigatorContent label="STYLES">
								<panels:StylesInspector height="100%" width="100%"/>
							</s:NavigatorContent>
							
							<!-- HTML Adjustments-->
							<s:NavigatorContent label="HTML">
								<panels:HTMLInspector height="100%" width="100%"/>
							</s:NavigatorContent>
						</mx:ViewStack>
						<!--<mx:TabNavigator id="forthViewStack" 
										 borderStyle="none"
										 width="100%"
										 height="100%"
										 minHeight="24">
						</mx:TabNavigator>-->
					</s:NavigatorContent>
					
					<!-- LAYOUT CONSTRAINTS -->
					<s:NavigatorContent label="LAYOUT">
						<s:Scroller width="100%" height="100%">
							<panels:ConstraintsInspector height="100%" width="100%" />
						</s:Scroller>
					</s:NavigatorContent>
					
					<!-- LIBRARY -->
					<s:NavigatorContent label="LIBRARY">
						<panels:LibraryInspector minHeight="180" height="100%" width="100%"/>
					</s:NavigatorContent>
					
					<!-- EVENTS -->
					<s:NavigatorContent label="EVENTS">
						<s:Scroller width="100%" height="100%">
							<panels:Events height="100%" width="100%"/>
						</s:Scroller>
					</s:NavigatorContent>
					
					<!-- EVENT LISTENERS -->
					<!--<s:NavigatorContent label="EVENTS">
						<s:Scroller width="100%" height="100%">
							<inspectors:EventListeners height="100%" width="100%"/>
						</s:Scroller>
					</s:NavigatorContent>-->
					
					<!-- ISSUES INSPECTOR -->
					<s:NavigatorContent width="100%" height="100%" label="ISSUES">
						<views:IssuesInspector id="issuesInspector" width="100%" height="100%" />
					</s:NavigatorContent>
					
					<!-- LOGS INSPECTOR -->
					<s:NavigatorContent width="100%" height="100%" label="LOGS">
						<panels:ConsoleLogsInspector id="logsInspector" width="100%" height="100%" />
					</s:NavigatorContent>
					
					<!-- PROFILING -->
					<!--<s:NavigatorContent width="100%" height="100%" label="PROFILE">
						<panels:Profiling height="100%" width="100%"/>
					</s:NavigatorContent>-->
					
					<!-- DESCRIPTION -->
					<!--<s:NavigatorContent width="100%" height="100%" label="DESCRIPTION">
						<views:Description showDescriptionLabel="false" left="10" right="10" top="10"/>
					</s:NavigatorContent>-->
					
				</mx:TabNavigator>
				
			</mx:VDividedBox>
						
					<!-- DESCRIPTION -->
					<!--<s:Label text="DESCRIPTION" width="100%" styleName="formItem"/>-->
					<!--<inspectors:Description showDescriptionLabel="false" left="10" right="10" top="10"/>-->
					<!--</s:ArrayCollection>
				</s:DataGroup>
				
			</s:Scroller>-->
			
			<!-- EXAMPLE APPLICATION -->
			<mx:VDividedBox id="documentsGroup" width="100%" height="100%" >
		
				
				<!-- DOCUMENTS TAB BAR-->
				<mx:TabNavigator id="documentsTagNavigator" width="100%" height="100%"
								  change="navigatorContent_changeHandler(event)"
								  click="documentsTagNavigator_clickHandler(event)">
				</mx:TabNavigator>
				
				<s:Label id="noDocumentLabel" 
						 text="To create a new project or document select File > New Project or File > New Document."
						 visible="false" 
						 includeInLayout="false"
						 height="100%"/>
				
				
				<!-- DOCUMENT FOOTER AREA -->
				<s:VGroup width="100%" height="45%" minHeight="0" includeIn="develop,code">
				
					<mx:TabNavigator id="thirdViewStack" 
									 borderStyle="solid"
									 width="100%" pc:tag="value"
									 height="100%"
									 minHeight="24"
									 change="thirdViewStack_changeHandler(event)"
									 creationComplete="thirdViewStack_creationCompleteHandler(event)">
						
						
						<!-- CODE INSPECTOR -->
						<s:NavigatorContent width="100%" height="100%" label="CODE">
							<panels:CodeInspector id="code1" width="100%" height="100%" />
						</s:NavigatorContent>
					
						<!-- METADATA INSPECTOR -->
						<s:NavigatorContent width="100%" height="100%" label="METADATA">
							<panels:MetaDataInspector id="metadataInspector" width="100%" height="100%" />
						</s:NavigatorContent>
					
						<!-- DOCS INSPECTOR -->
						<s:NavigatorContent width="100%" height="100%" label="DOCS">
							<panels:DocumentationInspector id="docsInspector" width="100%" height="100%" />
						</s:NavigatorContent>
						
						<!-- CONSOLE -->
						<s:NavigatorContent label="CONSOLE">
							<panels:ConsoleInspector width="100%" height="100%"/>
						</s:NavigatorContent>
					
						<!-- FEATURE INSPECTOR -->
						<!--<s:NavigatorContent width="100%" height="100%" label="FEATURE">
							<views:Features id="featureInspector" width="100%" height="100%" />
						</s:NavigatorContent>-->
					
						
					</mx:TabNavigator>
				</s:VGroup>
				
				
			</mx:VDividedBox>
		
		</mx:HDividedBox>
		
			
		<c:BeveledImageButton id="closeDocument" 
							  source="{Radii8LibraryAssets.clear}" 
							  toolTip="Closes the visible document. Use the open button to reopen the document."
							  right="8"
							  top="34"
							  width="16"
							  height="16"
							  horizontalAlign="center"
							  verticalAlign="middle"
							  click="closeDocumentIcon_clickHandler()"
							  />
	</s:Group>

	<!--<s:List id="shortcutList" 
			width="100%" 
			height="14" 
			bottom="8" 
			left="10"
			contentBackgroundAlpha="0"
			labelFunction="panelsLabelFunction"
			borderVisible="false"
			fontSize="8"
			color="#dddddd"
			rollOverColor="#222222"
			changing="list1_changeHandler(event)"
			horizontalScrollPolicy="off"
			dataProvider="{panels.dataProvider}"
			>
		<s:layout>
			<s:HorizontalLayout variableColumnWidth="true" 
								verticalAlign="middle"/>
		</s:layout>
	</s:List>-->
	
</s:Group>