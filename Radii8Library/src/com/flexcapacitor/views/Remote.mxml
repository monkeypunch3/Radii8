<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:pc="library://ns.adobe.com/flex/tp" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:flexcapacitor="flexcapacitor.*"
		 xmlns:supportClasses="spark.components.supportClasses.*" 
		 xmlns:flexiframe="com.google.code.flexiframe.*" 
		 xmlns:views="com.flexcapacitor.views.*"
		 xmlns:panels="com.flexcapacitor.views.panels.*"
		 xmlns:fc="com.flexcapacitor.effects.popup.*"
		 xmlns:ns1="*" 
		 
		 width="400" 
		 height="100%" 
		 creationComplete="creationCompleteHandler(event)"
		 >
		

	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.filters.BorderStrokeFilter;
			import com.flexcapacitor.managers.RunManager;
			import com.flexcapacitor.managers.ViewManager;
			import com.flexcapacitor.model.DocumentData;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.utils.ClassUtils;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			import com.flexcapacitor.views.windows.SaveBeforeCloseWindow;
			
			import mx.core.INavigatorContent;
			import mx.core.UIComponent;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.DividerEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			
			import spark.components.Application;
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var radiate:Radiate;
			
			public static const DESIGN:String = "design";
			public static const DEVELOP:String = "develop";
			public static const CODE:String = "code";
			public static const DESIGNVIEW:String = "designview";
			
			protected function panelsLabelFunction(item:Object):String {
				var name:String = item is Label ? Label(item).text : " â€¢ ";
				return name;
			}
			
			protected function list1_changeHandler(event:IndexChangeEvent):void {
				/*var point:Point = panels.layout.getScrollPositionDeltaToElement(event.newIndex +1);
				
				// if going up get the selected item
				if (point && point.y<0) {
					point = panels.layout.getScrollPositionDeltaToElement(event.newIndex);
					scrollMotionPath.valueBy = point.y;
					scrollPanelsAnimation.play();
				}
				else if (point) {
					//panels.layout.verticalScrollPosition = panels.layout.verticalScrollPosition + point.y;
					scrollMotionPath.valueBy = point.y;
					scrollPanelsAnimation.play();
				}
				
				event.preventDefault();*/
			}
			
			protected function closeDocumentIcon_clickHandler(event:MouseEvent):void {
				var iDocument:IDocument = radiate.selectedDocument;
				var documentsOpen:int = documentsTagNavigator.numElements;
				
				
				if (documentsOpen==0) {
					return;
				}
				
				if (iDocument && documentsOpen>0) {
					if (iDocument && radiate.isDocumentPreviewOpen(iDocument)) {
						radiate.closeDocument(iDocument, true, true);
					}
					else if (event.shiftKey) {
						radiate.closeVisibleDocument();
					}
					else {
						openSaveBeforeClosePopUp.play();
					}
				}
			}
			
			protected function navigatorContent_changeHandler(event:IndexChangedEvent):void {
				var index:int = event.newIndex;
				var document:IDocument;
				
				document = radiate.getDocumentAtIndex(event.newIndex);
				
				if (document==null || document.instance==null) {
					return; // not created yet?? 
				}
				
				radiate.setProject(document.project);
				radiate.selectDocument(document, true);
				radiate.setTarget(document.instance, true);
				return;
				
				/*
				if (index==1) {
					//Radiate.desetDocuments(true);
					radiate.isPreviewVisible = true;
				}
				else {
					document = NavigatorContent(documentsTagNavigator.getItemAt(0)).getElementAt(0) as DocumentContainer;
					
					if (document) {
						Radiate.setDocuments(document.targetApplication);
						radiate.isPreviewVisible = false;
					}
				}
				*/
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				radiate = Radiate.getInstance();
				
				ViewManager.remoteView = this;
				radiate.documentsTabNavigator = documentsTagNavigator;
				radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChange, false, 0, true);
				radiate.addEventListener(RadiateEvent.HISTORY_CHANGE, targetChange, false, 0, true);
				
				updateSelectedTargetIcon();
			}
			
			private var previewCreated:Boolean;
			private var initialDocument:Boolean;


			private var navigatorContent:NavigatorContent;
			
			
			protected function documentsTagNavigator_clickHandler(event:MouseEvent):void {
				var target:Object = radiate.target;
				var navigatorContent:INavigatorContent = documentsTagNavigator.selectedChild;
				
				if (target && "setFocus" in target) {
					//callLater(target["setFocus"]);&& target!=radiate.editorComponent && !radiate.editorComponent.contains(target)
				}
				
				if (navigatorContent is DisplayObject) {
					//var filter:BorderStrokeFilter = new BorderStrokeFilter();
					////navigatorContent.filters = [filter];
				}
			}
			
			/**
			 * Activate selected inspector and deactivate hidden inspectors
			 * */
			public function activateInspector(viewstack:ViewStack, selectedNavigator:NavigatorContent):void {
				var navigatorItem:NavigatorContent;
				var selectedNavigatorContent:IInspector;
				var inspector:IInspector;
				var item:Object;
				var inspectors:Array = [];
				
				if (selectedNavigator && selectedNavigator.numElements>0) {
					inspectors = ClassUtils.getElementsByType(selectedNavigator, IInspector, null, true);
					
				}
				
				deactivateViewstack(viewstack);
				
				// activate the current inspector
				for (var j:int = 0; j < inspectors.length; j++) {
					inspector = inspectors[j];
					
					if (inspector) {
						UIComponent(inspector).validateNow();// make sure everythings created
						inspector.activate();
					}
				}
				
				updateSelectedTargetIcon();
			}
			
			/**
			 * Deactivate viewstack 
			 * */
			public function deactivateViewstack(viewstack:ViewStack):void {
				var navigatorItem:NavigatorContent;
				var selectedNavigatorContent:IInspector;
				var inspector:IInspector;
				var item:Object;
				var inspectors:Array;
				
				var numberOfElements:int = viewstack.numElements;
				
				// deactivate hidden inspectors
				for (var i:int;i<numberOfElements;i++) {
					navigatorItem = viewstack.getElementAt(i) as NavigatorContent;
					
					if (navigatorItem && navigatorItem.numElements>0) {
						inspectors = ClassUtils.getElementsByType(navigatorItem, IInspector, null, true);
						
						for (var j:int = 0; j < inspectors.length; j++) {
							inspector = inspectors[j];
							
							if (inspector) {
								inspector.deactivate();
							}
						}
					}
				}
				
			}

			/**
			 * 
			 * This error occured on switching from design view to the home screen
			 * 
			 * Using extended tabNavigator to fix this
			 * 
			TypeError: Error #1009: Cannot access a property or method of a null object reference.
				at mx.containers::TabNavigator/keyDownHandler()[E:\dev\4.y\frameworks\projects\mx\src\mx\containers\TabNavigator.as:895]
				 * 
			    override protected function keyDownHandler(event:KeyboardEvent):void
			    {
			        if (focusManager.getFocus() == this) // error here line 895
			        {
			            // Redispatch the event from the TabBar so that it can handle it.
			            tabBar.dispatchEvent(event);
			        }
			    }

			*/
			
			protected function firstViewStack_changeHandler(event:IndexChangedEvent):void {
				activateInspector(firstViewStack, event.relatedObject as NavigatorContent);
			}
			
			protected function secondViewStack_changeHandler(event:IndexChangedEvent):void {
				activateInspector(secondViewStack, event.relatedObject as NavigatorContent);
			}
			
			protected function thirdViewStack_changeHandler(event:IndexChangedEvent):void {				
				activateInspector(thirdViewStack, event.relatedObject as NavigatorContent);
			}
			
			protected function forthViewStack_changeHandler(event:IndexChangedEvent):void {
				activateInspector(forthViewStack, event.relatedObject as NavigatorContent);
			}
			
			protected function firstViewStack_creationCompleteHandler(event:FlexEvent):void {
				activateInspector(firstViewStack, firstViewStack.selectedChild as NavigatorContent);
			}
			
			protected function secondViewStack_creationCompleteHandler(event:FlexEvent):void {
				activateInspector(secondViewStack, secondViewStack.selectedChild as NavigatorContent);
			}
			
			protected function thirdViewStack_creationCompleteHandler(event:FlexEvent):void {
				activateInspector(thirdViewStack, thirdViewStack.selectedChild as NavigatorContent);
			}
			
			protected function forthViewStack_creationCompleteHandler(event:FlexEvent):void {
				activateInspector(forthViewStack, forthViewStack.selectedChild as NavigatorContent);
			}
			
			protected function targetChange(event:RadiateEvent):void {
				var targetNameValue:String = ClassUtils.getIdentifierOrName(event.selectedItem, true, true);
				
				if (targetNameLabel) {
					if (targetNameValue) {
						
						if (event.selectedItem is Application) {
							targetNameLabel.text = "Document";
						}
						else {
							targetNameLabel.text = targetNameValue;
						}
					}
					else {
						targetNameLabel.text = "";
					}
				}
				
				updateSelectedTargetIcon();
			}
			
			public function updateSelectedTargetIcon():void {
				var componentDescription:ComponentDescription;
				var selectedTarget:Object;
				var targetNameValue:String;
				var previousValue:Object;
				var newValue:Object;
				
				if (!radiate) {
					radiate = Radiate.instance;
				}
				
				selectedTarget = radiate.target;
				
				if (!selectedTargetIcon) {
					return;
				}
				
				previousValue = selectedTargetIcon.source;
				
				if (selectedTargetIcon.contentLoader==null) {
					selectedTargetIcon.contentLoader = Radiate.contentCache;
				}
				
				if (radiate.selectedDocument) {
					componentDescription = radiate.selectedDocument.getItemDescription(selectedTarget);
					
					if (componentDescription) {
						if (selectedTarget is Application) {
							newValue = Radii8LibraryAssets.document;
						}
						else {
							newValue = Radiate.componentsIconPath + componentDescription.className + ".png";
						}
					}
					else {
						newValue = Radii8LibraryAssets.document;
					}
				}
				else {	
					newValue = Radii8LibraryAssets.document;
				}
				
				if (newValue!=previousValue) {
					selectedTargetIcon.source = newValue;
				}
				
				targetNameValue = ClassUtils.getIdentifierOrName(selectedTarget, true, true);
				
				if (selectedTarget is Application) {
					targetNameValue = "Document";
				}
				
				if (targetNameValue) {
					selectedTargetIcon.toolTip = targetNameValue ? targetNameValue + ". " + clickToOpen : "Document" + ". " + clickToOpen;
				}
			}
			
			protected function iconImage_ioErrorHandler(event:IOErrorEvent):void {
				selectedTargetIcon.source = Radiate.componentsIconNotFoundPath;
			}
			
			public var clickToOpen:String = "Click to open documentation";
			
			protected function selectedTargetIcon_clickHandler(event:MouseEvent):void {
				
				RunManager.openDocumentationInBrowserButton(radiate.target, true);
			}
			
			protected function filtersButton_clickHandler(event:MouseEvent):void
			{
				ViewManager.showFiltersPanel();
			}
			
			protected function documentsTagNavigator_childAddHandler(event:ChildExistenceChangedEvent):void
			{
				callLater(updateCloseDocumentButton);
			}
			
			protected function documentsTagNavigator_childRemoveHandler(event:ChildExistenceChangedEvent):void
			{
				callLater(updateCloseDocumentButton);
			}
			
			public function showConsolePanel():void
			{
				if (thirdViewStack==null) {
					currentState = DEVELOP;
					validateNow();
				}
				
				if (thirdViewStack) {
					thirdViewStack.selectedChild = consoleTab;
					validateNow();
				}
			}
			
			public function showPropertiesPanel(showFirstPage:Boolean = false):void
			{
				if (secondViewStack==null) {
					currentState = DEVELOP;
					validateNow();
				}
				
				if (secondViewStack) {
					secondViewStack.selectedChild = propertiesTab;
					validateNow();
					
					if (showFirstPage) {
						forthViewStack.selectedIndex = 0;
					}
				}
			}
			
			public function showLayoutPanel():void
			{
				if (secondViewStack==null) {
					currentState = DEVELOP;
					validateNow();
				}
				
				if (secondViewStack) {
					secondViewStack.selectedChild = layoutTab;
					validateNow();
				}
			}
			
			public function showLibraryPanel(data:DocumentData = null, clearSearch:Boolean = false):void
			{
				if (secondViewStack==null) {
					currentState = DEVELOP;
					validateNow();
				}
				
				if (secondViewStack) {
					secondViewStack.selectedChild = libraryTab;
					validateNow();
					
					if (data) {
						libraryInspector.selectLibraryItem(data, clearSearch);
					}
				}
			}
			
			public function showFiltersPanel():void
			{
				if (firstViewStack==null) {
					currentState = DEVELOP;
					validateNow();
				}
				
				if (firstViewStack) {
					firstViewStack.selectedChild = filtersTab;
					validateNow();
				}
			}
			
			public function showDocumentationPanel():void
			{
				if (thirdViewStack==null) {
					currentState = DEVELOP;
					validateNow();
				}
				
				if (thirdViewStack) {
					thirdViewStack.selectedChild = documentationTab;
					validateNow();
				}
			}
			
			public function showAPIPanel():void
			{
				if (thirdViewStack==null) {
					currentState = DEVELOP;
					validateNow();
				}
				
				if (thirdViewStack) {
					thirdViewStack.selectedChild = apiTab;
					validateNow();
				}
			}
			
			private function updateCloseDocumentButton():void
			{
				// in document removed they are not removed yet so count as if they were
				//var numChildren:int = documentsTagNavigator.numChildren-1;
				var numOfDocumentsOpen:int = documentsTagNavigator.numChildren;
				closeDocumentButton.visible = numOfDocumentsOpen>0;
			}
			
			protected function codeState_exitStateHandler(event:FlexEvent):void
			{
				deactivateViewstack(thirdViewStack);
			}
			
			protected function codeState_enterStateHandler(event:FlexEvent):void
			{
				if (thirdViewStack) {
					activateInspector(thirdViewStack, thirdViewStack.selectedChild as NavigatorContent);
				}
				
				var secondChild:UIComponent = documentFooterArea;
				if (secondRowHeight>=minimumCloseGroupSize && documentFooterArea) {
					secondChild.height = secondRowHeight;
					secondRowHeight = -1;
				}
			}
			
			protected function mainHorizontalBox_dividerReleaseHandler(event:DividerEvent):void {
				var firstChild:UIComponent = mainHorizontalBox.getChildAt(0) as UIComponent;
				
				if (firstChild.width<minimumCloseGroupSize) {
					if (currentState==DESIGN) {
						currentState = DESIGNVIEW;
					}
					else if (currentState==DEVELOP) {
						currentState = CODE;
					}
				}
			}
			
			private var minimumCloseGroupSize:int = 10;
			protected function documentsGroup_releaseDividerHandler(event:DividerEvent):void {
				var secondChild:UIComponent = documentFooterArea;
				
				if (secondChild.height<minimumCloseGroupSize) {
					if (currentState==DEVELOP) {
						currentState = DESIGN;
					}
					else if (currentState==CODE) {
						currentState = DESIGNVIEW;
					}
				}
				
			}
			
			protected function mainHorizontalBox_dividerPressHandler(event:DividerEvent):void {
				firstColumnWidth = leftColumn ? leftColumn.width : -1;
			}
			
			protected function documentsGroup_dividerPressHandler(event:DividerEvent):void {
				secondRowHeight = documentFooterArea ? documentFooterArea.height : -1;
			}
			
			private var firstColumnWidth:int;
			private var secondRowHeight:int;
			
			protected function design_enterStateHandler(event:FlexEvent):void {
				var firstChild:UIComponent = leftColumn;
				
				if (firstColumnWidth>=minimumCloseGroupSize && leftColumn) {
					firstChild.width = firstColumnWidth;
					firstColumnWidth = -1;
				}
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		
		<!--<s:Animate id="scrollPanelsAnimation" target="{panels.layout}" >
			<s:SimpleMotionPath id="scrollMotionPath" property="verticalScrollPosition" />
		</s:Animate>-->
		
		<!-- FADE IN APPLICATION -->
		<!--<s:Sequence id="fadeIn">
			
			<s:SetAction target="{radiateScroller}" property="alpha" value="0"/>
			
			<s:Fade target="{applicationGroup}" alphaFrom="0" alphaTo="1" duration="0"/>
			
			<s:SetAction target="{radiateScroller}" property="alpha" value="0"/>
			
			<s:Animate target="{applicationGroup}" startDelay="500" >
				<s:SimpleMotionPath valueFrom="0" valueTo="270" property="left" />
			</s:Animate>
			
			<s:SetAction target="{radiateScroller}" property="alpha" value="1"/>
			
			<s:Animate target="{radiateScroller.viewport}" duration="750">
				<s:SimpleMotionPath valueFrom="0" valueTo="1" property="alpha"/>
				<s:SimpleMotionPath valueFrom="{radiateScroller.viewport.contentHeight}" 
									valueTo="0" property="verticalScrollPosition" />
			</s:Animate>
			
		</s:Sequence>-->
		
		<!--<handlers:EventHandler eventName="creationComplete" target="{this}">
			<core:PlayEffect effect="{fadeIn}"/>
		</handlers:EventHandler>-->
		
		
		<!--- show save document popup -->
		<fc:OpenPopUp id="openSaveBeforeClosePopUp" 
					  popUpType="{SaveBeforeCloseWindow}" 
					  modalDuration="100" 
					  percentWidth="75"
					  percentHeight="90"
					  width="600"
					  parent="{parentApplication}"/>
	</fx:Declarations>
	
	
	<s:states>
		<s:State name="design" enterState="design_enterStateHandler(event)"/>
		<s:State name="develop" 
				 enterState="codeState_enterStateHandler(event)" 
				 exitState="codeState_exitStateHandler(event)"/>
		<s:State name="code"
				 enterState="codeState_enterStateHandler(event)" 
				 exitState="codeState_exitStateHandler(event)"/>
		<s:State name="designview"/>
	</s:states>
	
	
	<s:Group width="100%" height="100%" bottom="35" left="5" right="5">
		
		<!-- TOOLS -->
		<s:HGroup id="toolBarGroup" width="100%" height="26" right="10" >
			<!--<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}"/>
			<views:SaveDocumentToolBar />-->
			
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}"/>
			<views:Tools minHeight="24"/>
			
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}" 
						   visible="{toolBarInspector.hasInspector}"
						   includeInLayout="{toolBarInspector.hasInspector}"/>
			<views:SelectedToolToolBar id="toolBarInspector"/>
			
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}"/>
			<views:HistoryToolBar />
			
			<s:BitmapImage source="{Radii8LibraryToolAssets.DragStrip}"/>
			<views:RunToolBar />
			<!--
			<s:Spacer width="100%"/>
			<views:OperationsInspector id="operationsInspector" height="100%" includeInLayout="false"
									   visible="false"/>-->
			<s:Spacer width="100%"/>
			<!--<views:SizesInspector showRestoreSize="true" height="100%"/>-->
			<views:ZoomInspector showActualSize="false" height="100%"/>
			<views:PerspectivesInspector id="perspectivesInspector" height="100%" view="{this}"/>
		</s:HGroup>
	
		<mx:HDividedBox id="mainHorizontalBox" 
						width="100%" height="100%" 
						top="32" 
						liveDragging="true"
						dividerPress="mainHorizontalBox_dividerPressHandler(event)"
						dividerRelease="mainHorizontalBox_dividerReleaseHandler(event)">
			
			
			<mx:VDividedBox id="leftColumn" 
							width="360" 
							height="100%" 
							includeIn="design,develop" 
							liveDragging="true">
				
				<c:TabNavigator id="firstViewStack" 
								 width="100%"
								 height="100%"
								 clipContent="true"
								 change="firstViewStack_changeHandler(event)"
								 creationComplete="firstViewStack_creationCompleteHandler(event)">
					
					<!-- PROJECT -->
					<s:NavigatorContent label="PROJECTS"  >
						<panels:ProjectInspector width="100%" />
					</s:NavigatorContent>
					
					<!-- COMPONENTS -->
					<s:NavigatorContent label="COMPONENTS">
						<panels:ComponentsInspector height="100%" width="100%" />
					</s:NavigatorContent>
					
					<!-- LAYERS -->
					<s:NavigatorContent label="LAYERS"  >
						<views:LayersInspector width="100%" minHeight="180"/>
					</s:NavigatorContent>
					
					<!-- FILTERS -->
					<s:NavigatorContent id="filtersTab" label="FILTERS"  >
						<panels:FiltersInspector width="100%" minHeight="180"/>
					</s:NavigatorContent>
					
					<!-- HISTORY -->
					<s:NavigatorContent label="HISTORY">
						<panels:HistoryInspector id="history" minHeight="100" 
												 clearOnTargetChange="false"
												 height="100%" width="100%"/>
					</s:NavigatorContent>
					
					<!-- STATES -->
					<s:NavigatorContent label="STATES">
						<s:Scroller width="100%" height="100%">
							<panels:States height="100%" width="100%" />
						</s:Scroller>
					</s:NavigatorContent>
					
					<!-- OTHER -->
					<s:NavigatorContent label="OTHERS">
						
						<s:Scroller width="100%"  
									height="100%"
									left="0"
									top="0" 
									bottom="0">
				
							<s:VGroup id="panels" width="100%" height="100%" 
									 paddingRight="4" variableRowHeight="true">
							
								<!-- BLEND MODES -->
								<!--<s:Label text="BLEND MODE" width="100%" styleName="formItem"/>
								<inspectors:BlendMode height="100%" width="100%" />-->
								
								<!-- SNAPSHOT -->
								<s:Label text="SNAPSHOT" width="100%" styleName="formItem" />
								<views:Snapshot height="100%" width="100%" />
								
								<!-- EDIT DECISION LIST -->
								<s:Label text="CHANGE LOG" width="100%" styleName="formItem"/>
								<views:ChangeHistory minHeight="22" height="100%" width="100%" removeDuplicates="false"/>
								
								<!-- SEARCH EXPRESSION -->
								<s:Label text="SEARCH EXPRESSION" width="100%" styleName="formItem"/>
								<views:SearchExpression height="100%" width="100%"/>
								
								<!-- REDRAW REGIONS -->
								<s:Label text="REDRAW REGIONS" width="100%" styleName="formItem"/>
								<views:RedrawRegions width="20" height="20" />
								
								<!-- FRAMERATE -->
								<s:Label text="FRAMERATE" width="100%"
										 styleName="formItem"/>
								<views:FrameRateInspector />
								
								<!-- MEMORY -->
								<s:Label text="MEMORY" width="100%" styleName="formItem"/>
								<views:Memory height="100%" width="100%" 
												   showCurrentlyUsedPlayerMemory="true"/>
								<s:Spacer height="10"/>
							</s:VGroup>
						</s:Scroller>
					</s:NavigatorContent>
				</c:TabNavigator>
				
				<c:TabNavigator id="secondViewStack" 
								 borderStyle="solid"
								 width="100%"
								 height="100%"
								 selectedIndex="0"
								 change="secondViewStack_changeHandler(event)"
								 creationComplete="secondViewStack_creationCompleteHandler(event)">
					
					<!-- DOCUMENTS -->
					<s:NavigatorContent width="100%" height="100%" label="DOCUMENTS">
						<panels:DocumentsInspector height="100%" width="100%"/>
					</s:NavigatorContent>
					
					<!-- PROPERTIES -->
					<s:NavigatorContent id="propertiesTab" label="PROPERTIES">
						<!-- TODO Convert this into a composite component -->
						<s:HGroup width="100%" verticalAlign="baseline" paddingTop="4" paddingRight="8" paddingLeft="8">
							<s:ButtonBar id="propertiesOptionsButtonBar" 
										 fontSize="9"
										 requireSelection="true"
										 dataProvider="{forthViewStack}" 
										 />
							<s:Spacer width="100%" />
							<c:BeveledImageButton id="selectedTargetIcon"
												  minWidth="18"
												  clearOnLoad="false"
												  ioError="iconImage_ioErrorHandler(event)"
												  click="selectedTargetIcon_clickHandler(event)"/>
							<c:BeveledImageButton id="filtersButton" 
												  source="{Radii8LibraryAssets.filters}" 
												  toolTip="Show Filters for layers"
												  click="filtersButton_clickHandler(event)"
												  baseline="-2"
												  />
							
							<s:Label id="targetNameLabel" width="100%" paddingLeft="6" color="#888888" 
									 visible="false" includeInLayout="false"/>
						</s:HGroup>
						
						<mx:ViewStack id="forthViewStack" 
										 width="100%"
										 height="100%"
										 minHeight="24"
										 top="28"
										 change="forthViewStack_changeHandler(event)"
										 creationComplete="forthViewStack_creationCompleteHandler(event)">
							
							<!-- DYNAMIC INSPECTOR -->
							<s:NavigatorContent label="COMMON">
								<panels:DynamicComponentInspector y="8" width="100%" height="100%"/>
							</s:NavigatorContent>
							
							<!-- PROPERTY INSPECTOR -->
							<s:NavigatorContent label="ALL">
								<panels:PropertyInspector minHeight="180" height="100%" width="100%"/>
							</s:NavigatorContent>
							
							<!-- STYLES -->
							<s:NavigatorContent label="STYLES">
								<panels:StylesInspector height="100%" width="100%"/>
							</s:NavigatorContent>
							
							<!-- HTML Adjustments-->
							<s:NavigatorContent label="HTML">
								<panels:HTMLInspector height="100%" width="100%"/>
							</s:NavigatorContent>
						</mx:ViewStack>
						<!--<mx:TabNavigator id="forthViewStack" 
										 borderStyle="none"
										 width="100%"
										 height="100%"
										 minHeight="24">
						</mx:TabNavigator>-->
					</s:NavigatorContent>
					
					<!-- LAYOUT CONSTRAINTS -->
					<s:NavigatorContent id="layoutTab" label="LAYOUT">
						<s:Scroller width="100%" height="100%">
							<panels:ConstraintsInspector height="100%" width="100%" />
						</s:Scroller>
					</s:NavigatorContent>
					
					<!-- LIBRARY -->
					<s:NavigatorContent id="libraryTab" label="LIBRARY">
						<panels:LibraryInspector id="libraryInspector" minHeight="180" height="100%" width="100%"/>
					</s:NavigatorContent>
					
					<!-- EVENTS -->
					<s:NavigatorContent label="EVENTS">
						<s:Scroller width="100%" height="100%">
							<panels:Events height="100%" width="100%"/>
						</s:Scroller>
					</s:NavigatorContent>
					
					<!-- EVENT LISTENERS -->
					<!--<s:NavigatorContent label="EVENTS">
						<s:Scroller width="100%" height="100%">
							<inspectors:EventListeners height="100%" width="100%"/>
						</s:Scroller>
					</s:NavigatorContent>-->
					
					<!-- ISSUES INSPECTOR -->
					<s:NavigatorContent width="100%" height="100%" label="ISSUES">
						<views:IssuesInspector id="issuesInspector" width="100%" height="100%" />
					</s:NavigatorContent>
					
					<!-- LOGS INSPECTOR -->
					<s:NavigatorContent width="100%" height="100%" label="LOGS">
						<panels:ConsoleLogsInspector id="logsInspector" width="100%" height="100%" />
					</s:NavigatorContent>
					
					<!-- PROFILING -->
					<!--<s:NavigatorContent width="100%" height="100%" label="PROFILE">
						<panels:Profiling height="100%" width="100%"/>
					</s:NavigatorContent>-->
					
					<!-- DESCRIPTION -->
					<!--<s:NavigatorContent width="100%" height="100%" label="DESCRIPTION">
						<views:Description showDescriptionLabel="false" left="10" right="10" top="10"/>
					</s:NavigatorContent>-->
					
				</c:TabNavigator>
				
			</mx:VDividedBox>
						
					<!-- DESCRIPTION -->
					<!--<s:Label text="DESCRIPTION" width="100%" styleName="formItem"/>-->
					<!--<inspectors:Description showDescriptionLabel="false" left="10" right="10" top="10"/>-->
					<!--</s:ArrayCollection>
				</s:DataGroup>
				
			</s:Scroller>-->
			
			<!-- EXAMPLE APPLICATION -->
			<mx:VDividedBox id="documentsGroup" 
							width="100%" height="100%" 
							liveDragging="true"
							dividerPress="documentsGroup_dividerPressHandler(event)"
							dividerRelease="documentsGroup_releaseDividerHandler(event)">
		
				
				<!-- DOCUMENTS TAB BAR-->
				<c:TabNavigator id="documentsTagNavigator" width="100%" height="100%"
								 childAdd="documentsTagNavigator_childAddHandler(event)"
								 childRemove="documentsTagNavigator_childRemoveHandler(event)"
								  change="navigatorContent_changeHandler(event)">
				</c:TabNavigator>
				
				<s:Label id="noDocumentLabel" 
						 text="To create a new project or document select File > New Project or File > New Document."
						 visible="false" 
						 includeInLayout="false"
						 height="100%"/>
				
				
				<!-- DOCUMENT FOOTER AREA -->
				<s:VGroup id="documentFooterArea" width="100%" height="45%" minHeight="0" includeIn="develop,code">
				
					<c:TabNavigator id="thirdViewStack" 
									 borderStyle="solid"
									 width="100%" pc:tag="value"
									 height="100%"
									 minHeight="24"
									 change="thirdViewStack_changeHandler(event)"
									 creationComplete="thirdViewStack_creationCompleteHandler(event)">
						
						
						<!-- CODE INSPECTOR -->
						<s:NavigatorContent width="100%" height="100%" label="CODE">
							<panels:CodeInspector id="code1" width="100%" height="100%" />
						</s:NavigatorContent>
					
						<!-- DOCUMENTATION INSPECTOR -->
						<s:NavigatorContent id="documentationTab" width="100%" height="100%" label="DOCUMENTATION">
							<panels:DocumentationInspector id="documentationInspector" width="100%" height="100%" />
						</s:NavigatorContent>
						
						<!-- API INSPECTOR -->
						<s:NavigatorContent id="apiTab" width="100%" height="100%" label="API DOCS">
							<panels:APIInspector id="apiInspector" width="100%" height="100%" />
						</s:NavigatorContent>
						
						<!-- METADATA INSPECTOR -->
						<s:NavigatorContent width="100%" height="100%" label="METADATA">
							<panels:MetaDataInspector id="metadataInspector" width="100%" height="100%" />
						</s:NavigatorContent>
						
						<!-- CONSOLE -->
						<s:NavigatorContent id="consoleTab" label="CONSOLE">
							<panels:ConsoleInspector width="100%" height="100%"/>
						</s:NavigatorContent>
					
						<!-- FEATURE INSPECTOR -->
						<!--<s:NavigatorContent width="100%" height="100%" label="FEATURE">
							<views:Features id="featureInspector" width="100%" height="100%" />
						</s:NavigatorContent>-->
					
						
					</c:TabNavigator>
				</s:VGroup>
				
				
			</mx:VDividedBox>
		
		</mx:HDividedBox>
		
			
		<c:BeveledImageButton id="closeDocumentButton" 
							  source="{Radii8LibraryAssets.clear}" 
							  toolTip="Closes the visible document. Use the open button to reopen the document."
							  right="8"
							  top="34"
							  width="16"
							  height="16"
							  horizontalAlign="center"
							  verticalAlign="middle"
							  click="closeDocumentIcon_clickHandler(event)"
							  />
	</s:Group>

	<!--<s:List id="shortcutList" 
			width="100%" 
			height="14" 
			bottom="8" 
			left="10"
			contentBackgroundAlpha="0"
			labelFunction="panelsLabelFunction"
			borderVisible="false"
			fontSize="8"
			color="#dddddd"
			rollOverColor="#222222"
			changing="list1_changeHandler(event)"
			horizontalScrollPolicy="off"
			dataProvider="{panels.dataProvider}"
			>
		<s:layout>
			<s:HorizontalLayout variableColumnWidth="true" 
								verticalAlign="middle"/>
		</s:layout>
	</s:List>-->
</s:Group>