<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:graphics="be.nascom.flash.graphics.*"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:flexcapacitor="flexcapacitor.*"
		 xmlns:c="com.flexcapacitor.controls.*"
		 
		 paddingLeft="4"
		 creationComplete="group1_creationCompleteHandler(event)"
		 fontSize="9"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.tools.ITool;
			import com.flexcapacitor.tools.Zoom;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.components.Application;
			import spark.components.Scroller;
			import spark.effects.Animate;
			import spark.effects.animation.MotionPath;
			import spark.effects.animation.SimpleMotionPath;
			import spark.events.IndexChangeEvent;
			
			public var radiate:Radiate;
			
			public var zoomTool:Zoom;
			
			public var toolDescription:ComponentDescription;
			
			/**
			 * Shows the show actual size button
			 * */
			[Bindable]
			public var showActualSize:Boolean = true;
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				radiate = Radiate.getInstance();
				
				radiate.addEventListener(RadiateEvent.SCALE_CHANGE, scaleChangedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChangeHandler, false, 0, true);
				
				toolDescription = radiate.getToolByType(Zoom);
				
				zoomTool = toolDescription.instance as Zoom;
				
				
				// temp to get reference
				//if (!tool) tool = new Zoom();
				
				updateTool(zoomTool);
			}
			
			/**
			 * Update UI components to tool value
			 * */
			public function updateTool(tool:ITool):void {
				var zoomValue:Number;
				zoomValue = zoomTool.getScale();
				
				updateZoomInComboBox(zoomValue);
			}
			
			/**
			 * Zoom combo box change handler. Update zoom level. 
			 * */
			protected function zoomComboBox_changeHandler(event:IndexChangeEvent):void {
				
				zoomTool.setScale(parseInt(zoomComboBox.selectedItem)/100);
			}
			
			/**
			 * 
			 * */
			protected function actualSize_clickHandler(event:MouseEvent):void {
				var currentScale:Number = radiate.getScale();
				
				if (zoomTool) {
					zoomTool.restoreDefaultScale();
					zoomComboBox.selectedItem = "100%";
				}
				else {
					radiate.restoreDefaultScale();
				}
				
				if (animate) {
					animateIntoView(1, currentScale);
				}
			}
			
			public var animate:Boolean;
			public var scaleAnimation:Animate;
			public var scaleAnimationDuration:int = 250;
			
			
			public function animateIntoView(newScale:Number, oldScale:Number = NaN):void {
				var newPoint:Point;
				var scrollMotionPaths:Vector.<MotionPath>;
				var horizontalScale:SimpleMotionPath;
				var verticalScale:SimpleMotionPath;
				
				if (!radiate.selectedDocument) {
					return;
				}
				
				scaleAnimation = new Animate();
				//scrollBarAnimation.addEventListener(EffectEvent.EFFECT_END, hideScrollBarAnimation_effectEndHandler);
				scaleAnimation.duration = scaleAnimationDuration;
				horizontalScale = new SimpleMotionPath("scaleX", oldScale, newScale);
				verticalScale = new SimpleMotionPath("scaleY", oldScale, newScale);
				scrollMotionPaths = Vector.<MotionPath>([horizontalScale, verticalScale]);
				scaleAnimation.motionPaths = scrollMotionPaths;
				scaleAnimation.play([radiate.selectedDocument.instance]);
			}
			
			/**
			 * Scale changed
			 * */
			protected function scaleChangedHandler(event:RadiateEvent):void {
				var zoomValue:Number;
				var zoomString:String;
				
				zoomValue = zoomTool.getScale();
				
				updateZoomInComboBox(zoomValue);
			}
			
			/**
			 * Format zoom value nicely.
			 * */
			public function updateZoomInComboBox(zoomValue:Number):void {
				var zoomString:String;
				
				if (!isNaN(zoomValue)) {
					
					if (String(zoomValue*100).indexOf(".")!=-1) {
						zoomString = Number(zoomValue*100).toFixed(1) + "%";
					}
					else {
						zoomString = Number(zoomValue*100) + "%";
					}
					
					if (zoomValue==1) {
						zoomComboBox.selectedItem = "100%";
					}
					else {
						zoomComboBox.selectedItem = zoomString;
					}
				}
			}
			
			/**
			 * Document changed
			 * */
			protected function documentChangeHandler(event:RadiateEvent):void {
				// since we use this independently of the tool being selected we need to make sure
				// the target application is set
				// we'll move this later
				var zoomValue:Number = zoomTool.getScale();
				
				updateZoomInComboBox(zoomValue);
			}
			
			/**
			 * Restore to 100%
			 * */
			protected function zoomComboBox_doubleClickHandler(event:MouseEvent):void {
				
				if (zoomTool) {
					zoomTool.restoreDefaultScale();
					zoomComboBox.selectedItem = "100%";
				}
			}
			
			protected function zoomOutButton_clickHandler(event:MouseEvent):void
			{
				Radiate.instance.decreaseScale();
			}
			
			protected function zoomInButton_clickHandler(event:MouseEvent):void
			{
				Radiate.instance.increaseScale();
			}
			
			protected function fitInButton_clickHandler(event:MouseEvent):void {
				var scroller:Scroller;
				var target:Application;
				var ws:Number;
				var hs:Number;
				
				if (animate && radiate.selectedDocument) {
					scroller = radiate.canvasScroller;
					target = radiate.selectedDocument.instance as Application;
					
					if (target && radiate.selectedDocument) {
						//ws = scroller.width/scroller.viewport.contentWidth;
						//hs = scroller.height/scroller.viewport.contentHeight;
						ws = target.width/target.contentGroup.contentWidth;
						hs = target.height/target.contentGroup.contentHeight;
						
						fitToScale.scaleXTo = ws;
						fitToScale.scaleYTo = hs;
						fitToScale.duration = 250;
						fitToScale.play([radiate.selectedDocument.instance]);
					}
				}
				
				radiate.scaleToFit(true);
				radiate.centerApplication(true, true);
			}
			
			protected function scrollToTopButton_clickHandler(event:MouseEvent):void {
				radiate.centerApplication(true, true, true);
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Scale id="fitToScale"  /> 
	</fx:Declarations>
	
	<!--<s:CheckBox label="Scrub Zoom" />-->
	<!--<c:BeveledImageButton id="actualSizeButton" 
						  visible="{showActualSize}"
						  includeInLayout="{showActualSize}"
						  source="{Radii8LibraryAssets.actualSize}" 
						  toolTip="Actual"
						  click="actualSize_clickHandler(event)"
						  height="100%"
						  />-->
	
	<c:SolidFillButton id="fitButton" 
					   width="30"
					   toolTip="Fit to available screen space"
					   click="fitInButton_clickHandler(event)"
					   label="fit"
					   />
	<c:SolidFillButton id="actualButton" 
					   width="50"
					   toolTip="Show at actual size"
					   click="actualSize_clickHandler(event)"
					   label="100%"
					   fontSize="8"
					   />
	<c:SolidFillButton id="topButton" 
					   width="35"
					   toolTip="Scroll to top and center"
					   click="scrollToTopButton_clickHandler(event)"
					   label="top"
					   includeInLayout="false"
					   visible="false"
					   />
	
	<c:SolidFillButton id="zoomOutButton" 
					   width="30"
					   toolTip="Zoom out"
					   click="zoomOutButton_clickHandler(event)"
					   label="-"/>
	<c:SolidFillButton id="zoomInButton" 
					   width="30"
					   toolTip="Zoom in"
					   click="zoomInButton_clickHandler(event)"
					   label="+"/>
	<!--<s:Button id="fitSize" label="Fit Size"
	visible="{showActualSize}"
	includeInLayout="{showActualSize}"
	click="actualSize_clickHandler(event)"/>-->
	
	<s:ComboBox id="zoomComboBox" 
				width="58" 
				height="21"
				focusAlpha="0" 
				selectedIndex="8"
				change="zoomComboBox_changeHandler(event)"
				openOnInput="true" 
				arrowKeysWrapFocus="false"
				doubleClickEnabled="true"
				doubleClick="zoomComboBox_doubleClickHandler(event)"
				>
		<!--
		Pressing ESC key in combox results in the error below when using a custom layout: 
		
	TypeError: Error #1009: Cannot access a property or method of a null object reference. at spark.components.supportClasses::DropDownListBase/http://www.adobe.com/2006/flex/mx/internal::positionIndexInView()[E:\dev\4.y\frameworks\projects\spark\src\spark\components\supportClasses\DropDownListBase.as:659]
		-->
<!--		<s:layout>
			<s:VerticalLayout gap="0"
							  horizontalAlign="contentJustify"
							  requestedRowCount="10" />
		</s:layout>-->
		<s:dataProvider>
			<s:ArrayList>
				<fx:String>1000%</fx:String>
				<fx:String>800%</fx:String>
				<fx:String>600%</fx:String>
				<fx:String>500%</fx:String>
				<fx:String>400%</fx:String>
				<fx:String>300%</fx:String>
				<fx:String>200%</fx:String>
				<fx:String>175%</fx:String>
				<fx:String>150%</fx:String>
				<fx:String>125%</fx:String>
				<fx:String>100%</fx:String>
				<fx:String>90%</fx:String>
				<fx:String>80%</fx:String>
				<fx:String>70%</fx:String>
				<fx:String>60%</fx:String>
				<fx:String>50%</fx:String>
				<fx:String>40%</fx:String>
				<fx:String>30%</fx:String>
				<fx:String>20%</fx:String>
				<fx:String>10%</fx:String>
			</s:ArrayList>
		</s:dataProvider>
	</s:ComboBox>
	
</s:HGroup>
