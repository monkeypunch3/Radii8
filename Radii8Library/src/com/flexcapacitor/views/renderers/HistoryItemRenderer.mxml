<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:controls="com.flexcapacitor.controls.*"
				width="100%" minHeight="18" 
				autoDrawBackground="false"
				typographicCase="capsToSmallCaps"
				useHandCursor="true"
				buttonMode="true"
				toolTip=" "
				toolTipShow="itemrenderer1_toolTipShowHandler(event)"
				>
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.model.HistoryEventData;
			import com.flexcapacitor.model.HistoryEventItem;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			
			import mx.core.IToolTip;
			import mx.effects.effectClasses.PropertyChanges;
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			import mx.utils.ObjectUtil;
			
			public var historyItem:HistoryEventData;
			public var myToolTip:IToolTip;
			
			override public function set data(value:Object):void {
				super.data = value;
				
				if (value) {
					historyItem = value as HistoryEventData;
					
					//rowGroup.enabled = !historyItem.reversed;
					//Radiate.info("updating row "  + itemIndex + " :" + label + " . Enabled " + rowGroup.enabled);
				}
				else {
					if (horizontalLine) {
						horizontalLine.visible = false;
					}
				}
			}
			
			
			protected function itemrenderer1_toolTipShowHandler(event:ToolTipEvent):void {
				var historyEventItems:Array;
				var message:String = "";
				var change:PropertyChanges;
				var excludes:Array = ["password", "credentials", "textFlow", "dataProvider"];
				
				if (data) {
					historyItem = data as HistoryEventData;
					
					if (historyItem) {
						historyEventItems = historyItem.historyEventItems;
						
						for each (var historyEventItem:HistoryEventItem in historyEventItems) {
							
							if (message!="") message +="\n";
							
							change = historyEventItem.propertyChanges;
							if (change) {
								message += "Start: " + ObjectUtil.toString(change.start, null, excludes) + "\n";
								message += "End: " + ObjectUtil.toString(change.end, null, excludes);
							}
						}
					}
				}
				
				myToolTip = ToolTipManager.currentToolTip;
				myToolTip.text = message=="" ? null : message;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
		<s:State name="hovered"/>
	</s:states>
	
	<s:HGroup id="rowGroup" enabled="{!data.reversed}" width="100%" height="100%" gap="0" verticalAlign="middle">
		  
		<s:Group height="12" width="10" includeIn="selected,hovered">
			<s:Path data="M 0 0 L 0 16 L 16 8 z" width="100%" height="100%" top="0">
				<s:fill>
					<s:SolidColor color="#000000" alpha=".5" alpha.hovered=".25"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke weight="0" color="#ffffff" />
				</s:stroke>
			</s:Path>
		</s:Group>
		
		<s:Spacer width="10" includeIn="normal"/>
		
		
		<s:BitmapImage source="{Radii8LibraryAssets.edit}"  />
		
		<s:Spacer width="4" />
		
		<s:Label id="labelDisplay" 
				 fontSize="11"
				 width="100%" 
				 paddingTop="2" />
	</s:HGroup>
	
	<controls:HorizontalLine id="horizontalLine" includeIn="hovered" color="#000000" bottom="0"
							 alpha.hovered=".15"
							 visible="false"/>
	
</s:ItemRenderer>