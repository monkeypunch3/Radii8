<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  width="100%" 
					  height="18" 
					  autoDrawBackground="false"
					  doubleClickEnabled="true"
					  doubleClick="itemrenderer1_doubleClickHandler(event)"
					  creationComplete="creationCompleteHandler(event)" xmlns:controls="com.flexcapacitor.controls.*"
					  >
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			import com.flexcapacitor.views.panels.LuminosityCallout;
			import com.flexcapacitor.views.panels.MaskTypeCallout;
			
			import mx.controls.Tree;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import spark.components.Application;
			import spark.components.supportClasses.GroupBase;
			/**
			 * TypeError: Error #1034: Type Coercion failed: cannot convert Object@391af1d2bb51 to com.flexcapacitor.utils.supportClasses.ComponentDescription.
	at Function/<anonymous>()[/Users/monkeypunch/Documents/ProjectsGithub/Radii8/Radii8Library/src/com/flexcapacitor/views/renderers/LayersRenderer.mxml:281]
	at Function/http://adobe.com/AS3/2006/builtin::apply()
	 * 
	 * Happened when dragging and dropping and holding alt key down (to make a copy) in Tree on LayersInspector
	 * 
	 * Might be caused by binding in 
<s:Rect id="parentVisibleGroup" width="16" height="16" alpha="0.3" 
					visible="{!ComponentDescription(data).parentVisible &amp;&amp; ComponentDescription(data).visible}">
changed to 
 *
 * <s:Rect id="parentVisibleGroup" width="16" height="16" alpha="0.3" 
					visible="{data as ComponentDescription && !ComponentDescription(data).parentVisible &amp;&amp; ComponentDescription(data).visible}">
			 * */
			override public function set data(value:Object):void {
				super.data = value;
				
				var componentDescription:ComponentDescription = value as ComponentDescription;
				var path:String;
				var instance:Object = componentDescription ? componentDescription.instance : null;
				var maskType:String;
				
				if (componentDescription) {
					if (componentDescription.icon) {
						
						if (componentDescription.icon!=iconImage.source) {
							iconImage.source = componentDescription.icon;
						}
					}
					else {
						if (componentDescription.instance is Application) {
							//path = Radiate.componentsIconNotFoundPath;
							iconImage.source = Radii8LibraryAssets.document;
						}
						else {
							path = Radiate.componentsIconPath + componentDescription.className + ".png";
							
							if (path!=iconImage.source) {
								iconImage.source = path;
							}
						}
					}
					
					if (treeListData) {
						labelDisplay.text = treeListData.label;
					}
					else {
						if (componentDescription.name) {
							if (componentDescription.instance is Application) {
								labelDisplay.text = "Document";
							}
							else {
								labelDisplay.text = componentDescription.name;
							}
						}
						else {
							labelDisplay.text = componentDescription.className=="application" || componentDescription.instance is Application ? "Document" : componentDescription.className;
						}
					}
					
					// show if visible
					if (componentDescription.instance && componentDescription.instance.visible) {
						visibleGroup.visible = true;
					}
					else {
						visibleGroup.visible = false;
					}
					
					// show if item has filters
					if (instance && instance.filters && instance.filters.length) {
						hasFiltersGroup.visible = true;
						hasFiltersGroup.includeInLayout = true;
					}
					else {
						hasFiltersGroup.visible = false;
						hasFiltersGroup.includeInLayout = false;
					}
					
					// show if item is locked
					if (componentDescription.locked) {
						lockedGroup.visible = true;
						lockedGroup.includeInLayout = true;
					}
					else {
						lockedGroup.visible = false;
						lockedGroup.includeInLayout = false;
					}
					
					// show if item is masked
					if (componentDescription.hasMask || 
						(instance && "mask" in instance && instance.mask)) {
						hasMaskGroup.visible = true;
						hasMaskGroup.includeInLayout = true;
						
						maskType = getMaskType(instance);
						maskTypeLabel.text = maskType;
						
						if (maskType=="L") {
							luminosityTypeLabel.visible = true;
							luminosityTypeLabel.includeInLayout = true;
						}
						else {
							luminosityTypeLabel.visible = false;
							luminosityTypeLabel.includeInLayout = false;
						}
					}
					else {
						hasMaskGroup.visible = false;
						hasMaskGroup.includeInLayout = false;
					}
					
					// show if item is mask
					if (componentDescription.isMask || componentDescription.getIsMask()) {
						isMaskGroup.visible = true;
						isMaskGroup.includeInLayout = true;
					}
					else {
						isMaskGroup.visible = false;
						isMaskGroup.includeInLayout = false;
					}
				}
				
				if (treeListData && treeListData.hasChildren) {
					disclosureGroup.visible = true;
				}
				else {
					disclosureGroup.visible = false;
				}
				
				if (componentDescription && componentDescription.instance is Application) {
					_visibleButtonGroup.visible = false;
					hgroup.left = 2;
				}
				else {
					_visibleButtonGroup.visible = true;
					hgroup.left = 0;
				}
			}
			
			protected function getMaskType(object:Object):String {
				var maskTypeString:String = "";
				if (object && "maskType" in object) {
					maskTypeString = object.maskType;
					
					if (maskTypeString=="clip") {
						return "C";
					}
					else if (maskTypeString=="alpha") {
						return "A";
					}
					else if (maskTypeString=="luminosity") {
						return "L";
					}
				}
				return "";
			}
			
			protected function iconImage_ioErrorHandler(event:IOErrorEvent):void {
				iconImage.source = Radiate.componentsIconNotFoundPath;
				//Radiate.info("LayersRenderer: "+event.text);
			}

			protected function visibleGroupClicked():void {
				var componentDescription:ComponentDescription = data as ComponentDescription;
				if (!componentDescription) return;
				var visible:Boolean = !componentDescription.instance.visible;
				var rootApplicationDescription:ComponentDescription;
				var visibility:Boolean;
				
				// setting visible with history support
				Radiate.setProperty(componentDescription.instance, "visible", visible);
				
				// old method not sure what parts are ok to remove
				componentDescription.instance.visible = visible;
				componentDescription.visible = visible;
				visibleGroup.visible = visible;
				
				if (owner is Tree) {
					rootApplicationDescription = Tree(owner).dataProvider.getItemAt(0) as ComponentDescription;
					
					visibility = DisplayObjectUtils.getGreatestVisibility(IVisualElement(componentDescription.instance), rootApplicationDescription); 
					
					DisplayObjectUtils.setVisibilityFlag(componentDescription, componentDescription.visible);
				}
				else if (owner) {
					
				}
				//parentVisibleGroup.visible = !visibility;
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				
				if (_visibleButtonGroup) {
					_visibleButtonGroup.addEventListener(MouseEvent.MOUSE_DOWN, visibleButtonGroup_mouseDownHandler);
					_visibleButtonGroup.addEventListener(MouseEvent.CLICK, visibleButtonGroup_clickHandler);
				}
			}
			
			/**
			 *  @private
			 *  Handle special behavior when mouse down on the visible icon
			 */
			protected function visibleButtonGroup_mouseDownHandler(event:MouseEvent):void {
				// stops selection of row
				// however we still handle action in the click event
				event.stopPropagation();
			}
			
			/**
			 *  @private
			 *  Handle special behavior when clicking on the visible icon
			 */
			protected function visibleButtonGroup_clickHandler(event:MouseEvent):void {
				visibleGroupClicked();
			}
			
			protected function textInputChangeHandler():void {
				//this.data = textInput.text;
				
				//dispatch the data update event
				//var list:ListBase = this.owner as ListBase; is null for mx.controls.Tree??
				var tree:Object = owner && "dataProvider" in owner ? owner : null;
				//var iDocument:IDocument = Radiate.instance.selectedDocument;
				var componentDescription:ComponentDescription = data as ComponentDescription;
				
				if (componentDescription && tree) {
					var oldName:String = componentDescription.name;
					var newName:String = textInput.text;
					
					if (newName!=null && newName!="" 
						&& newName!=oldName) {
						Radiate.setProperty(componentDescription, "name", newName);
						tree.dataProvider.itemUpdated(componentDescription, "name", oldName, newName); 
					}
					
					if (owner && "dragEnabled" in owner) {
						Object(owner).dragEnabled = previousDragEnabled;
					}
					
					if (owner && "enableKeyBoardHandling" in owner) {
						Object(owner).enableKeyboardHandling = previousKeyboardHandlingEnabled;
					}
					
					currentState = "normal";
				}
			}
			
			protected function textInput_focusOutHandler(event:FocusEvent):void {
				textInputChangeHandler();
				
				if (owner && "dragEnabled" in owner) {
					Object(owner).dragEnabled = previousDragEnabled;
				}
				
				if (owner && "enableKeyBoardHandling" in owner) {
					Object(owner).enableKeyboardHandling = previousKeyboardHandlingEnabled;
				}
				
				currentState = "normal";
			}
			
			protected function itemrenderer1_doubleClickHandler(event:MouseEvent):void {
				var iDocument:IDocument = Radiate.instance.selectedDocument;
				
				if (iDocument==null || !iDocument.isOpen) {
					return;
				}
				
				if (owner && "dragEnabled" in owner) {
					previousDragEnabled = Object(owner).dragEnabled;
					Object(owner).dragEnabled = false;
				}
				
				if (owner && "enableKeyboardHandling" in owner) {
					previousKeyboardHandlingEnabled = Object(owner).enableKeyboardHandling;
					Object(owner).enableKeyboardHandling = false;
				}
				
				currentState = "edit";
				
				textInput.text = labelDisplay.text;
				textInput.setFocus();
				textInput.selectAll();
			}
			
			
			override protected function getCurrentRendererState():String {
				// if in edit state don't change unless 
				if (currentState=="edit") return "edit";
				
				return super.getCurrentRendererState();
			}
			
			protected function changeMaskType_clickHandler(event:MouseEvent):void {

				if (!MaskTypeCallout(Object(owner).document.maskTypesCallout).isOpen) {
					MaskTypeCallout(Object(owner).document.maskTypesCallout).open(event.currentTarget as DisplayObjectContainer);
				}
			}
			
			private var previousDragEnabled:Boolean;
			private var previousKeyboardHandlingEnabled:Boolean;
			
			protected function hasFiltersGroup_clickHandler(event:MouseEvent):void {
				var componentDescription:ComponentDescription = data as ComponentDescription;
				
				if (componentDescription && componentDescription.instance) {
					Radiate.setTarget(componentDescription.instance);
				}
				
				Radiate.showFiltersPanel();
			}
			
			protected function luminosityTypeLabel_clickHandler(event:MouseEvent):void {
				var luminosityCallout:LuminosityCallout = LuminosityCallout(Object(owner).document.luminosityCallout);
				var groupBase:GroupBase = Radiate.instance.target as GroupBase;
				
				if (!luminosityCallout.isOpen) {
					luminosityCallout.open(event.currentTarget as DisplayObjectContainer);
					luminosityCallout.setGroupBase(groupBase);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
		<s:State name="edit"/>
	</s:states>
	
	<s:Group width="100%" height="100%" left="0" right="2">
		<s:Rect width="100%" height="100%" alpha="0">
			<s:fill>
				<s:SolidColor color="#f6f6f6"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	
	
	<s:HGroup id="hgroup" left="0"
			  right="0"
			  gap="2"
			  verticalCenter="0"
			  verticalAlign="middle">
		<s:Spacer width="0"/>
		
		<!--- visible -->
		<s:Group id="_visibleButtonGroup"
				 useHandCursor="true"
				 buttonMode="true">
			<!--- visible image -->
			<s:BitmapImage id="visibleGroup" 
						   clearOnLoad="false"
						   contentLoader="{Radiate.contentCache}"
						   source="{Radii8LibraryAssets.visible}" 
						   left="0"
						   verticalCenter="0"
						   height="14"/>
			
			<!--- fade out visible image if parent is not visible -->
			<s:Rect id="parentVisibleGroup" width="16" height="16" alpha="0.3" 
					visible="{data as ComponentDescription &amp;&amp; !ComponentDescription(data).parentVisible &amp;&amp; ComponentDescription(data).visible}">
				<s:fill>
					<s:SolidColor color="#666666"/>
				</s:fill>
			</s:Rect>
			
		</s:Group>
	
		<!--- divider -->
		<s:Rect width="1" height="100%" 
				visible="true" 
				includeInLayout="true"
				left="20"
				>
			<s:fill>
				<s:SolidColor color="#d4d4d4"/>
			</s:fill>
		</s:Rect>
		
		<!--- divider -->
		<s:Rect width="1" height="100%" visible="false" includeInLayout="false">
			<s:fill>
				<s:SolidColor color="#d4d4d4"/>
			</s:fill>
		</s:Rect>
		
		<s:Rect id="indentationSpacer" 
				width="{treeListData.indent}" 
				height="20" 
				alpha="0.1">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
		
		<s:Group id="disclosureGroup">
			<s:BitmapImage source="{treeListData.disclosureIcon}" 
						   height="16" 
						   visible="{treeListData.hasChildren}" />
		</s:Group>
		<s:BitmapImage id="iconImage" 
					   clearOnLoad="false"
					   source="{treeListData.icon}" 
					   contentLoader="{Radiate.contentCache}"
					   ioError="iconImage_ioErrorHandler(event)"
					   width="16" height="16" scaleMode="letterbox"/>
		<s:Label id="labelDisplay" 
				 fontSize="10"
				 paddingLeft="3"
				 paddingTop="1" 
				 itemCreationPolicy="immediate"
				 includeIn="normal,selected"/>
		
		<s:TextInput id="textInput" 
					 fontSize="10"
					 focusAlpha="0"
					 borderVisible="false"
					 enter="textInputChangeHandler()" 
					 focusOut="textInput_focusOutHandler(event)"
					 includeIn="edit"
					 itemCreationPolicy="immediate"
					 width="100%" height="100%"/>
		
		<s:Spacer width="100%"/>
		<!--- has mask -->
		<s:HGroup id="hasMaskGroup" visible="false" 
				  toolTip="Has mask applied">
			<controls:LabelButton id="maskTypeLabel" text="C" 
					 height="100%"
					 fontSize="10"
					 paddingTop="2"
					 verticalAlign="middle"
					 toolTip="Mask Type"
					 click="changeMaskType_clickHandler(event)"/>
			<controls:LabelButton id="luminosityTypeLabel" text="S" 
								  height="100%"
								  fontSize="10"
								  paddingTop="2"
								  verticalAlign="middle"
								  toolTip="Luminosity Type"
								  click="luminosityTypeLabel_clickHandler(event)"
								  visible="false"
								  includeInLayout="false"/>
			<s:BitmapImage source="{Radii8LibraryAssets.hasMask}" 
						   />
		</s:HGroup>
		
		<!--- is mask -->
		<s:Group id="isMaskGroup" visible="false" toolTip="Is used as mask">
			<s:BitmapImage source="{Radii8LibraryAssets.isMask}" />
		</s:Group>
		
		<!--- lock -->
		<s:Group id="lockedGroup" visible="false" toolTip="Is locked">
			<s:BitmapImage source="{Radii8LibraryAssets.locked}" />
		</s:Group>
		
		<!--- filters -->
		<s:Group id="hasFiltersGroup" visible="false" toolTip="Has filters" click="hasFiltersGroup_clickHandler(event)">
			<s:BitmapImage source="{Radii8LibraryAssets.filters}" />
		</s:Group>
		
		<s:Spacer width="4"/>
	</s:HGroup>
	
</s:MXTreeItemRenderer>