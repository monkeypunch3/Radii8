<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:controls="com.flexcapacitor.controls.*" 
				
				width="100%" 
				height="100%" 
				minHeight="36" 
				autoDrawBackground="false"
				mouseEnabledWhereTransparent="true"
				doubleClickEnabled="true"
				doubleClick="itemrenderer1_doubleClickHandler(event)"
				mouseDown="groupMouseDownHandler(event)"
				resize="itemrenderer1_resizeHandler(event)"
				>
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.managers.ComponentManager;
			import com.flexcapacitor.managers.DeferManager;
			import com.flexcapacitor.managers.LibraryManager;
			import com.flexcapacitor.model.AttachmentData;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.ImageData;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			
			import mx.events.ResizeEvent;
			import mx.graphics.BitmapFill;
			
			import spark.components.supportClasses.ListBase;
			import spark.layouts.VerticalLayout;
			
			public var imageData:ImageData;
			public var attachmentData:AttachmentData;
			public var checkeredFill:BitmapFill;
			
			// if you set the image to letterbox and the height or width is 
			// resampled to zero height or width an error is thrown 
			// in BitmapImage ctor()
			// this is a flex sdk bug i think. so use zoom instead of letterbox
			
			override public function set data(value:Object):void {
				super.data = value;
				var path:String;
				var imageID:String = "Not uploaded yet";
				var parentImageID:String = "Not uploaded yet";
				attachmentData = value as AttachmentData;
				imageData = value as ImageData;
				
				if (data) {
					
					if (imageData) {
						if (imageData.thumbnailURL) {
							iconImage.source = imageData.thumbnailURL;
						}
						else if (imageData.bitmapData) {
							
							// if you set the image to letterbox and the height or width is 
							// resampled to zero height or width an error is thrown 
							// in BitmapImage ctor()
							// this is a flex sdk bug i think. so use zoom instead of letterbox
							if (imageData.bitmapData.width<2 || imageData.bitmapData.height<2) {
								//iconImage.scaleMode = "zoom";
							}
							else {
								//iconImage.scaleMode = "letterbox";
							}
							
							iconImage.source = imageData.bitmapData;
						}
						
						if (imageData.id) {
							imageID = imageData.id;
						}
						if (imageData.parentId) {
							parentImageID = imageData.parentId;
						}
					}
					
				}
				
				if (checkeredFill==null) {
					checkeredFill = DisplayObjectUtils.createCheckeredFill(2, 2);
					backgroundIconImageFill.fill = checkeredFill;
				}
				
				// show the upload icon if not uploaded
				if (attachmentData && attachmentData.id==null) {
					uploadFileIcon.visible = true;
					uploadFileIcon.enabled = true;
				}
				else {
					uploadFileIcon.enabled = false;
					uploadFileIcon.visible = false;
				}
				
				// show the upload failed icon if not uploaded
				if (attachmentData && attachmentData.uploadFailed) {
					uploadFileErrorIcon.visible = true;
					uploadFileErrorIcon.enabled = true;
				}
				else {
					uploadFileErrorIcon.enabled = false;
					uploadFileErrorIcon.visible = false;
				}
				
				if (labelDisplay) {
					toolTip = label + " - ID: " +  imageID + " - Parent ID: " + parentImageID;
				}
				else {
					toolTip = "";
				}
			}
			
			protected function iconImage_ioErrorHandler(event:IOErrorEvent):void {
				iconImage.source = "assets/images/components/BorderContainer.png";
			}
			
			protected function groupMouseDownHandler(event:MouseEvent):void {
				Object(owner).document.rowGroupMouseDownHandler(event, data, itemIndex);
			}
			
			protected function iconImage_securityErrorHandler(event:SecurityErrorEvent):void {
				Radiate.warn("Library: Icon not found");
			}
			
			protected function uploadFileIcon_clickHandler(event:MouseEvent):void {
				
				if (Radiate.selectedDocument && Radiate.selectedDocument.id) {
					Radiate.info("Uploading item");
					DeferManager.callAfter(250, LibraryManager.uploadAttachmentData, attachmentData, Radiate.selectedDocument.id);
				}
				else {
					Radiate.warn("Save the document before uploading");
				}
			}
			
			protected function showPreview(event:MouseEvent):void {
				Object(owner).document.showSelectedItemInPopUp();
			}
			
			protected function itemrenderer1_resizeHandler(event:ResizeEvent):void {
				var verticalLayout:Boolean = owner ? ListBase(owner).layout is VerticalLayout : true;
				if (!verticalLayout) {
					preview.visible = false;
					preview.includeInLayout = false;
					uploadFileIcon.visible = false;
					uploadFileIcon.includeInLayout = false;
					labelDisplay.visible = false;
					labelDisplay.includeInLayout = false;
				}
				else {
					preview.includeInLayout = true;
					uploadFileIcon.includeInLayout = true;
					
					// show the upload icon if not uploaded
					if (attachmentData && attachmentData.id==null) {
						uploadFileIcon.visible = true;
						uploadFileIcon.enabled = true;
						uploadFileIcon.includeInLayout = true;
					}
					
					// show the upload failed icon if not uploaded
					if (attachmentData && attachmentData.uploadFailed) {
						uploadFileErrorIcon.visible = true;
						uploadFileErrorIcon.enabled = true;
						uploadFileErrorIcon.includeInLayout = true;
					}
					
					preview.visible = true;
					labelDisplay.visible = true;
					labelDisplay.includeInLayout = true;
				}
			}
			
			/**
			 * When editing turn off drag and drop and keyboard events
			 **/
			private var previousDragEnabled:Boolean;
			private var previousKeyboardHandlingEnabled:Boolean;
			
			protected function textInputChangeHandler():void {
				var componentOwner:Object = owner && "dataProvider" in owner ? owner : null;
				var documentData:AttachmentData = data as AttachmentData;
				
				if (documentData && componentOwner) {
					var oldName:String = documentData.name;
					var newName:String = textInput.text;
					
					if (newName!=null && 
						newName!="" && 
						newName!=oldName) {
						ComponentManager.setProperty(documentData, "name", newName);
						componentOwner.dataProvider.itemUpdated(documentData, "name", oldName, newName); 
					}
					
					if (owner && "dragEnabled" in owner) {
						Object(owner).dragEnabled = previousDragEnabled;
					}
					
					if (owner && "enableKeyboardHandling" in owner) {
						Object(owner).enableKeyboardHandling = previousKeyboardHandlingEnabled;
					}
					
					currentState = "normal";
				}
			}
			
			protected function textInput_focusOutHandler(event:FocusEvent):void {
				textInputChangeHandler();
				
				if (owner && "dragEnabled" in owner) {
					Object(owner).dragEnabled = previousDragEnabled;
				}
				
				if (owner && "enableKeyBoardHandling" in owner) {
					Object(owner).enableKeyboardHandling = previousKeyboardHandlingEnabled;
				}
				
				currentState = "normal";
			}
			
			protected function itemrenderer1_doubleClickHandler(event:MouseEvent):void {
				var iDocument:IDocument = Radiate.selectedDocument;
				
				if (iDocument==null || !iDocument.isOpen) {
					return;
				}
				
				if (owner && "dragEnabled" in owner) {
					previousDragEnabled = Object(owner).dragEnabled;
					Object(owner).dragEnabled = false;
				}
				
				if (owner && "enableKeyboardHandling" in owner) {
					previousKeyboardHandlingEnabled = Object(owner).enableKeyboardHandling;
					Object(owner).enableKeyboardHandling = false;
				}
				
				currentState = "edit";
				
				textInput.text = labelDisplay.text;
				textInput.setFocus();
				textInput.selectAll();
			}
			
			
			override protected function getCurrentRendererState():String {
				// if in edit state don't change unless 
				if (currentState=="edit") return "edit";
				
				return super.getCurrentRendererState();
			}
			
			protected function textInput_keyUpHandler(event:KeyboardEvent):void
			{
				if (currentState=="edit") {
					event.stopImmediatePropagation();
					event.stopPropagation();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />            
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="normalAndShowsCaret"/>
		<s:State name="hoveredAndShowsCaret"/>
		<s:State name="selectedAndShowsCaret"/>
		<s:State name="dragging"/>
		<s:State name="edit"/>
	</s:states>
	
	<s:Rect id="backgroundIconImageFill" width="40" height="100%" bottom="1" >
		
	</s:Rect>
	
	<s:HGroup id="rowGroup" 
			  width="100%" 
			  height="100%" 
			  verticalAlign="middle"
			  paddingLeft="5" 
			  paddingBottom="1" 
			  gap="12">
		<s:Image id="iconImage"
				 smooth="true"
				 smoothingQuality="high"
				 contentLoader="{Radiate.contentCache}"
				 ioError="iconImage_ioErrorHandler(event)"
				 securityError="iconImage_securityErrorHandler(event)"
				 width="30" 
				 height="30"
				 scaleMode="zoom"/>
		<s:Label id="labelDisplay" 
				 visible.dragging="false"
				 includeInLayout.dragging="false"
				 fontSize="11" 
				 width="100%" 
				 maxDisplayedLines="1"
				 itemCreationPolicy="immediate"
				 excludeFrom="edit"
				 />
		<s:TextInput id="textInput" 
					 fontSize="10"
					 focusAlpha="0"
					 borderVisible="false"
					 keyUp="textInput_keyUpHandler(event)"
					 enter="textInputChangeHandler()" 
					 focusOut="textInput_focusOutHandler(event)"
					 includeIn="edit"
					 itemCreationPolicy="immediate"
					 width="100%" height="100%"/>
		
		<controls:BeveledImageButton id="uploadFileErrorIcon" 
									 source="{Radii8LibraryAssets.error}" 
									 toolTip="Upload failed. Try again"
									 click="uploadFileIcon_clickHandler(event)"
									 />
		<controls:BeveledImageButton id="uploadFileIcon" 
							  source="{Radii8LibraryAssets.upload}" 
							  toolTip="Upload"
							  click="uploadFileIcon_clickHandler(event)"
							  visible="false"
							  visible.dragging="false"
							  alpha=".75"
							  />
		<controls:BeveledImageButton id="preview" 
									 source="{Radii8LibraryAssets.image}"
									 visible.dragging="false"
									 click="showPreview(event)"
									 />
		<s:Spacer width="1"/>
	</s:HGroup>
	
	
	<s:Rect id="selectedBox" width="40" height="100%" bottom="1" x="1"
			includeIn="selected,selectedAndShowsCaret">
		<s:fill>
			<s:SolidColor color="#989898" alpha="0"/>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="#989898" weight="2"/>
		</s:stroke>
	</s:Rect>
</s:ItemRenderer>
