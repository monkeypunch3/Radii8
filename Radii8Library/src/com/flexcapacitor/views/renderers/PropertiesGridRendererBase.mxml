<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx"
					
					clipAndEnableScrolling="true">
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.components.ColorChooser;
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.managers.ComponentManager;
			import com.flexcapacitor.model.AccessorMetaData;
			import com.flexcapacitor.model.MetaData;
			import com.flexcapacitor.model.StyleMetaData;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			
			import mx.collections.ArrayCollection;
			import mx.core.IFlexModuleFactory;
			import mx.utils.ArrayUtil;
			
			import spark.components.Button;
			import spark.components.ComboBox;
			import spark.components.DropDownList;
			import spark.components.NumericStepper;
			import spark.components.RadioButton;
			import spark.components.RadioButtonGroup;
			import spark.components.TextArea;
			import spark.components.supportClasses.DropDownListBase;
			
			/**
			 * Default value when none is found in the metadata. Used when reseting the previous values
			 * */
			public var defaultValue:Object;
			
			/**
			 * Set this to a property name if the property is an object on the target
			 * */
			public var subPropertyName:String;
			
			/**
			 * Set this to a property index if the sub property name is set
			 * */
			public var subPropertyIndex:String;
			
			/**
			 * This is for things like a filter which is in a property in an array on the target 
			 * */
			public var subTarget:String;
			
			/**
			 * Indicates if property selected events should be dispatched
			 * */
			public var dispatchProperySelectedEvents:Boolean;
			
			/**
			 * Group radio buttons, usually boolean true and false values, are part of. 
			 * */
			public var booleanGroup:RadioButtonGroup;
			
			/**
			 * Boolean true radio button value
			 * */
			public var booleanEnabledRadioButton:RadioButton;
			
			/**
			 * Boolean false radio button value
			 * */
			public var booleanDisabledRadioButton:RadioButton;
			
			/**
			 * Color chooser component
			 * */
			public var colorChooser:ColorChooser;
			public var colorChooser2:ColorChooser;
			
			/**
			 * Include second color picker
			 * */
			[Bindable]
			public var includeSecondColor:Boolean;
			
			/**
			 * In some cases we need the value to be a uint
			 * */
			public var convertColorToUInt:Boolean;
			
			/**
			 * Numeric stepper value 
			 * */
			public var numericStepper:NumericStepper;
			
			/**
			 * Combobox of choices
			 * */
			public var formatCombobox:ComboBox;
			
			/**
			 * Drop down list of choices
			 * */
			public var formatDropDownList:DropDownList;
			
			/**
			 * Text area for text values
			 * */
			public var targetValueText:TextArea;
			
			/**
			 * Flag indicating if setting properties
			 * */
			public var settingProperties:Boolean;
			
			/**
			 * Clear style button
			 * */
			public var clearStyleButton:Button;
			
			/**
			 * Label field of combobox, drop down list or list
			 * */
			public var labelField:String;
			
			/**
			 * Label function of combobox, drop down list or list
			 * */
			public var labelFunction:Function;
			
			
			[Bindable]
			public var labelWidth:int = 80;
			
			/**
			 * Option to show clear button if style
			 * */
			public var showClearButton:Boolean = true;
			
			/**
			 * If true the value to apply to the target is a field of the selected item
			 * */
			public var valueIsField:Boolean;
			
			/**
			 * If true then the selected item is selected by the value of the target
			 * */
			public var fieldIsValue:Boolean;
			
			/**
			 * If true then numeric stepper is handled as a percent
			 * */
			public var isPercent:Boolean;
			
			/**
			 * Collection of choices for combobox, drop down list or list
			 * */
			[Bindable]
			public var formatsCollection:ArrayCollection;
			
			[Bindable]
			public var stepSize:Number = 0.01;
			
			[Bindable]
			public var snapInterval:Number = 0;
			
			public var hasMinimumValue:Boolean;
			public var hasMaximumValue:Boolean;
			
			
			public var ignoreEmptyData:Boolean = true;
			
			/**
			 * Set data
			 * */
			override public function set data(value:Object):void {
				super.data = value;
				
				if (data is AccessorMetaData) {
					updateSubComponentsValue();
				}
				else if (data is StyleMetaData) {
					updateSubComponentsValue();
				}
				else if (data is XML) {
					updateSubComponentsValueXML();
				}
				else if (data==null) {
					
					// this error happens when we have something trying to get a property 
					// or style information and it doesn't exist on the target
					// so it's empty. 
					// this happens because the target changes and we have
					// a property inspector trying to get properties that don't exist
					// inspectors like this, are supposed to show values based
					// on their type. 
					// are specific this happens in a few cases where we haven't 
					// had a chance to remove the old target 
					// so we have been throwing an error but in test cases
					// the target is switched before the user even sees the inspector
					// so ignoring for now and will see how that goes
					// look at dynamic property inspector and propertyinspector 
					if (!ignoreEmptyData) {
						throw Error("Invalid property data");
					}
				}
			}
			
			/**
			 * Set the property on the target to the new value
			 * */
			public function setTargetValue(clearStyle:Boolean = false):void {
				var item:XML;
				var target:Object;
				var subTarget:Object;
				var targetProperty:String;
				var targetPropertyIndex:int;
				var actualValue:*;
				var textInputValue:String;
				var isStyle:int;
				var styleIsColor:Boolean;
				var valueSuccessfullyApplied:Boolean;
				var propertyObject:MetaData;
				var type:String;
				var enumeration:Array;
				var format:String;
				var inherit:Boolean;
				var property:String;
				var value:String;
				var nodename:String;
				var access:String;
				var textValue:String;
				var moduleFactory:IFlexModuleFactory;
				
				// does not support multiple targets yet
				target = Radiate.instance.target;
				targetProperty = Radiate.instance.property;
				targetPropertyIndex = Radiate.instance.propertyIndex;
				subTarget = Radiate.instance.subTarget;
				
				item = data as XML;
				
				if (targetProperty) {
					if (targetPropertyIndex!=-1) {
						target = target[targetProperty][targetPropertyIndex];
					}
					else {
						target = target[targetProperty];
					}
				}
				else if (subTarget) {
					target = subTarget;
				}
				
				if (item) {
					nodename = item.name();
					
					if (nodename=="metadata") {
						isStyle = 1;
						propertyObject = new StyleMetaData(item, target);
					}
					else if (nodename=="accessor") {
						propertyObject = new AccessorMetaData(item, target);
					}
					else {
						propertyObject = new MetaData(item, target);
					}
				}
				else if (data) {
					propertyObject = data as MetaData;
				}
				
				if (propertyObject is AccessorMetaData) {
					access = AccessorMetaData(propertyObject).access;
				}
				else if (propertyObject is StyleMetaData) {
					isStyle = 1;
				}
				
				// since we try to capture values for history 
				// ReferenceError: Error #1077: Illegal read of write-only property cacheHeuristic on application.
				if (access=="writeonly") {
					return;
				}
		
				
				// property or style was not found
				if (!propertyObject) {
					return;
				}
				
				value = String(propertyObject.value);
				textValue = propertyObject.textValue;
				property = propertyObject.name;
				type = propertyObject.type;
				format = propertyObject.format;
				enumeration = propertyObject.enumeration;
				
				/*
				var type:Type = Type.forInstance(target);
				var metadataItems:Array = type.metadata;
				var b:Array = type.getMetadata("Style");
				var metadata:Metadata = Metadata(metadataItems[0]);
				var hasFormat:Boolean = metadata.hasArgumentWithKey("type");
				var o:MetadataArgument = metadata.getArgument("type");
				var xc:XML = MetadataUtils.getFromObject(target);*/
				
			
				// dynamic way to set property or style in data grid
				if (type=="Boolean" && booleanGroup) {
					if (isStyle) {
						actualValue = booleanGroup.selection==null ? undefined : booleanGroup.selection==booleanEnabledRadioButton;
					}
					else {
						actualValue = booleanGroup.selection==booleanEnabledRadioButton;
					}
				}
				// let SetAction convert 0xFF, #ff and red, ReD
				else if (format=="Color" || colorChooser) {
					var secondValue:Array;
					
					if (includeSecondColor) {
						actualValue = [colorChooser.selectedColor, colorChooser2.selectedColor];
					}
					else {
						actualValue = colorChooser.selectedColor;
					}
					
					if (convertColorToUInt) {
						// todo: get module factory for target application
						moduleFactory = Radiate.getModuleFactory(target);
						actualValue = DisplayObjectUtils.getColorAsUInt(actualValue, moduleFactory);
					}
				}
				else if (type=="Number" || (type=="int" && targetValueText==null) || numericStepper) {
						actualValue = numericStepper.value;
						
						if (property.indexOf("lpha")!=-1) {//round down to two places
							actualValue = int(actualValue*100)/100;
						}
						else if (isPercent && numericStepper) {
							actualValue = numericStepper.value + "%";
						}
					}
				else if (type=="String" && (formatDropDownList || formatCombobox)) {
					var arrayItems:Array;
					
					if (formatDropDownList) {
						
						if (valueIsField && labelField) {
							
							if (formatDropDownList.selectedItem is String) {
								// user typed something into the combo box and now we are trying to find it
								arrayItems = formatsCollection.length > 0 ? formatsCollection.source : [];
								actualValue = ArrayUtil.getItemIndex(formatDropDownList.selectedItem, arrayItems);
							}
							else if (formatDropDownList.selectedItem==undefined) {
								actualValue = undefined;
							}
							else {
								actualValue = formatDropDownList.selectedItem[labelField];
							}
						}
						else {
							actualValue = formatDropDownList.selectedItem;
						}
					}
					else if (formatCombobox) {
						
						if (valueIsField && labelField) {
							
							if (formatCombobox.selectedItem is String) {
								// user typed something into the combo box and now we are trying to find it
								arrayItems = formatsCollection.length > 0 ? formatsCollection.source : [];
								actualValue = ArrayUtil.getItemIndex(formatCombobox.selectedItem, arrayItems);
							}
							else if (formatCombobox.selectedItem==undefined) {
								actualValue = undefined;
							}
							else {
								actualValue = formatCombobox.selectedItem[labelField];
							}
						}
						else {
							actualValue = formatCombobox.selectedItem;
						}
					}
				}
				else if (type=="Array") {
					if (targetValueText) {
						textInputValue = targetValueText.text;
						
						if (textInputValue=="" || textInputValue==null) {
							actualValue = [];
						}
						else {
							actualValue = String(textInputValue).split(",");
						}
					}
				}
				else {
					actualValue = ComponentManager.getTypedValue(targetValueText.text, type);
				}
				
				// do not auto update if setting properties
				settingProperties = true;
				
				var settableObject:Object;
				
				// for things like setting fill on graphic element
				if (subPropertyName==null) {
					settableObject = target;
				}
				else {
					settableObject = target[subPropertyName];
				}
				
				if (isStyle) {
					if (clearStyle) {
						valueSuccessfullyApplied = ComponentManager.clearStyle(settableObject, property);
					}
					else {
						valueSuccessfullyApplied = ComponentManager.setStyle(settableObject, property, actualValue);
					}
				}
				else {
					if (clearStyle) {
						valueSuccessfullyApplied = ComponentManager.clearProperty(settableObject, property, defaultValue);
					}
					else {
						valueSuccessfullyApplied = ComponentManager.setProperty(settableObject, property, actualValue);
					}
				}
				
				settingProperties = false;
			}
			
			/**
			 * Get the value from the datagrid and 
			 * show the correct sub component and
			 * set it's value.
			 * Depricated. Use non-XML data objects
			 * */
			public function updateSubComponentsValueXML():void {
				var item:XML;
				var target:Object;
				var subTarget:Object;
				var actualValue:*;
				var isStyle:Boolean;
				var type:String;
				var enumeration:Array;
				var format:String;
				var propertyObject:MetaData;
				var property:String;
				var value:String;
				var nodename:String;
				
				if (settingProperties) return;
				
				item = data as XML;
				target = Radiate.instance.target;
				subTarget = Radiate.instance.subTarget;
				target = subTarget ? subTarget : target;
				
				if (!target) return;
				
				if (item) {
					nodename = item.name();
					
					if (nodename=="metadata") {
						isStyle = true;
						propertyObject = new StyleMetaData(item, target);
					}
					else if (nodename=="accessor") {
						propertyObject = new AccessorMetaData(item, target);
					}
					else {
						propertyObject = new MetaData(item, target);
					}
					
					// property or style not found!
					if (!propertyObject) {
						return;
					}
					
					value = String(propertyObject.value);
					property = propertyObject.name;
					type = propertyObject.type;
					format = propertyObject.format;
					enumeration = propertyObject.enumeration;
					
					
					if (type=="Boolean") {
						booleanEnabledRadioButton.selected = false;
						booleanDisabledRadioButton.selected = false;
						
						if (value=="true") {
							booleanEnabledRadioButton.selected = true;
						}
						else if (value=="false") {
							booleanDisabledRadioButton.selected = true;
						}
					}
					else if (format=="Color") {
						var secondValue:Array;
						
						if (includeSecondColor) {
							secondValue = value ? value.split(",") : [value];
							colorChooser.selectedColor = secondValue[0];
							colorChooser2.selectedColor = secondValue.length>1 ? secondValue[1] : secondValue[0];
						}
						else {
							colorChooser.selectedColor = value;
						}
					}
					else if (enumeration && enumeration.length>0) {
						if (!formatsCollection) formatsCollection = new ArrayCollection();
						formatsCollection.source = enumeration;
						formatCombobox.selectedItem = propertyObject.value;
						
					}
					else if (type=="Number") {
						numericStepper.value = propertyObject.value;
						
						if (!isNaN(propertyObject.minValue)) {
							numericStepper.minimum = propertyObject.minValue;
						}
						else {
							numericStepper.minimum = Number(int.MIN_VALUE);
						}
						if (!isNaN(propertyObject.maxValue)) {
							numericStepper.maximum = propertyObject.maxValue;
						}
						else {
							numericStepper.maximum = Number(int.MAX_VALUE);
						}
						
						if (property.indexOf("lpha")!=-1) {
							numericStepper.stepSize = .1;
							
							if (isNaN(propertyObject.minValue)) {
								numericStepper.minimum = 0;
							}
							if (isNaN(propertyObject.maxValue)) {
								numericStepper.maximum = 1;
							}
						}
						else {
							numericStepper.stepSize = 1;
						}
						
					}
					else {
						actualValue = ComponentManager.getTypedValue(targetValueText.text, type);
						targetValueText.text= propertyObject.value;
					}
					
					if (showClearButton) { 
						showClearStyleButton(isStyle);
					}
					else {
						showClearStyleButton(false);
					}
					
					if (dispatchProperySelectedEvents) {
						Radiate.dispatchPropertySelectedEvent(property, propertyObject);
					}
				}
				
			}
			
			/**
			 * Get the value from the target and 
			 * show the correct inspector with the correct target value.
			 * */
			public function updateSubComponentsValue():void {
				var target:Object;
				var subTarget:Object;
				var propertyObject:MetaData;
				var isStyle:Boolean;
				var actualValue:*;
				var type:String;
				var enumeration:Array;
				var format:String;
				var property:String;
				var value:String;
				var nodename:String;
				
				//if (!target) return;
				
				if (settingProperties) return;
				
				target = Radiate.instance.target;
				subTarget = Radiate.instance.subTarget;
				target = subTarget ? subTarget : target;
				propertyObject = data as MetaData;
				isStyle = propertyObject is StyleMetaData;
				
				if (data) {
					
					value = String(propertyObject.value);
					value = propertyObject.textValue;
					property = propertyObject.name;
					type = propertyObject.type;
					format = propertyObject.format;
					enumeration = propertyObject.enumeration;
					actualValue = propertyObject.value;
					
					if (showClearButton) { 
						showClearStyleButton(showClearButton);
					}
					else {
						showClearStyleButton(false);
					}
						
					if (type=="Boolean") {
						booleanEnabledRadioButton.selected = false;
						booleanDisabledRadioButton.selected = false;
						
						if (value=="true") {
							booleanEnabledRadioButton.selected = true;
						}
						else if (value=="false") {
							booleanDisabledRadioButton.selected = true;
						}
						
					}
					else if (format=="Color" || colorChooser) {
						var secondValue:Array;
						
						if (includeSecondColor) {
							secondValue = value ? value.split(",") : [value];
							colorChooser.selectedColor = secondValue[0];
							colorChooser2.selectedColor = secondValue.length>1 ? secondValue[1] : secondValue[0];
						}
						else {
							colorChooser.selectedColor = value;
						}
					}
					else if ((enumeration && enumeration.length>0) || formatCombobox || formatDropDownList) {
						
						var dropDownListBase:DropDownListBase = formatCombobox ? formatCombobox : formatDropDownList;
						
						if (!formatsCollection) formatsCollection = new ArrayCollection();
						if (enumeration) formatsCollection.source = enumeration;
						
						if (labelField) dropDownListBase.labelField = labelField;
						
						if (labelFunction!=null) dropDownListBase.labelFunction = labelFunction;
						
						
						if (fieldIsValue && labelField) {
							var length:int = enumeration.length;
							//var value:Object = propertyObject.value;
							
							for (var i:int;i<length;i++) {
								var item:Object = enumeration[i];
								if (value == item[labelField]) {
									dropDownListBase.selectedItem = item;
									break;
								}
							}
							
						}
						else {
							dropDownListBase.selectedItem = propertyObject.value;
						}
					}
					else if (type=="Number" || (type=="int" && targetValueText==null) ||
							(type=="Object" && numericStepper)) { // trackingRight 
						
						numericStepper.value = propertyObject.value;
						
						if (!isNaN(propertyObject.minValue)) {
							numericStepper.minimum = propertyObject.minValue;
						}
						else if (!hasMinimumValue) {
							numericStepper.minimum = Number(int.MIN_VALUE);
						}
						
						if (!isNaN(propertyObject.maxValue)) {
							numericStepper.maximum = propertyObject.maxValue;
						}
						else if (!hasMaximumValue) {
							numericStepper.maximum = Number(int.MAX_VALUE);
						}
						
						if (property.indexOf("lpha")!=-1) {
							if (isNaN(stepSize)) {
								numericStepper.stepSize = .01;
							}
							else {
								numericStepper.stepSize = stepSize;
							}
							
							if (isNaN(propertyObject.minValue)) {
								numericStepper.minimum = 0;
							}
							if (isNaN(propertyObject.maxValue)) {
								numericStepper.maximum = 1;
							}
						}
						else {
							if (isNaN(stepSize)) {
								numericStepper.stepSize = 1;
							}
							else {
								numericStepper.stepSize = stepSize;
							}
						}
						
						if (snapInterval) {
							numericStepper.snapInterval = snapInterval;
						}
						
						if (isPercent) {
							if (value is String && value.indexOf("%")!=-1) {
								numericStepper.value = parseInt(value);
							}
						}
					}
					else if (targetValueText && actualValue is BitmapData) {
						//targetValueText.prompt = "BitmapData";
						targetValueText.text = "";
					}
					else if (targetValueText) {
						actualValue = ComponentManager.getTypedValue(targetValueText.text, type);
						targetValueText.text = propertyObject.value;
					}
				
					
					if (dispatchProperySelectedEvents) {
						Radiate.dispatchPropertySelectedEvent(property, propertyObject);
					}
				}
				
			}
			
			public function showClearStyleButton(isStyle:Boolean):void {
				clearStyleButton.visible = isStyle;
				clearStyleButton.includeInLayout = isStyle;
			}
			
		]]>
	</fx:Script>
	
</s:GridItemRenderer>
