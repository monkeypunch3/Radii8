<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:popup="com.flexcapacitor.effects.popup.*" 
		 xmlns:flexcapacitor="flexcapacitor.*"
		 xmlns:utils="com.flexcapacitor.utils.*" 
		 xmlns:model="com.flexcapacitor.model.*" 
		 xmlns:fc="com.flexcapacitor.effects.popup.*"
		 xmlns:flexiframe="com.google.code.flexiframe.*"
		 xmlns:core="com.flexcapacitor.effects.core.*"
		 xmlns:views="com.flexcapacitor.views.*"
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 xmlns:filters="com.flexcapacitor.filters.*"
		 xmlns:application="com.flexcapacitor.effects.application.*"
		 xmlns:file="com.flexcapacitor.effects.file.*" 
		 xmlns:ns="http://flex.apache.org/experimental/ns"
		 xmlns:local="*" 
		 
		 width="400" height="300" 
		 >
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.managers.DateManager;
			import com.flexcapacitor.managers.DocumentManager;
			import com.flexcapacitor.managers.HistoryManager;
			import com.flexcapacitor.managers.MenuManager;
			import com.flexcapacitor.managers.ProfileManager;
			import com.flexcapacitor.managers.ProjectManager;
			import com.flexcapacitor.model.MenuItemDataDescriptor;
			
			import spark.effects.easing.Linear;
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!--<handlers:EventHandler eventName="itemClick" target="{saveSnippetMenuItem}">
			<fc:OpenPopUp id="openExportSnippetPopUp" 
						  popUpType="{ExportSnippetWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="800"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler target="{contactLabel}" eventName="click" 
							   traceHandler="false">
			<fc:OpenPopUp id="openContactPopUp" 
						  popUpType="{ContactWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler targets="{[logoutLabel,logoutLabel2]}" eventName="click" >
			<fc:OpenPopUp id="openLogoutPopUp" 
						  popUpType="{LoginWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:LoginWindow.LOGOUT}}"
						  close="logoutPopUp_closeHandler(event)"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler targets="{[newProjectButton,menuNewProject]}" eventNames="{['click','itemClick']}" >
			<fc:OpenPopUp id="openNewProjectPopUp" 
						  popUpType="{NewDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:NewDocumentWindow.PROJECT}}"
						  close="createNewProjectLabel_clickHandler(event);"
						  />
		</handlers:EventHandler>
		
		<handlers:EventHandler target="{removeDocument}" eventName="itemClick" >
			<fc:OpenPopUp id="openDeleteDocumentPopUp" 
						  popUpType="{DeleteDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:DeleteDocumentWindow.DOCUMENT}}"
						  close="openDeleteDocumentPopUp_closeHandler(event)"
						  />
		</handlers:EventHandler>
		
		<handlers:EventHandler targets="{[deleteProjectIcon,removeProject]}" eventNames="{['click','itemClick']}" >
			<fc:OpenPopUp id="openDeleteProjectPopUp" 
						  popUpType="{DeleteDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:DeleteDocumentWindow.PROJECT, documentData:projectsList.selectedItem}}"
						  close="getProjectsByUser();"
						  />
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{exportDocumentAs}">
			<fc:OpenPopUp id="openExportPopUp" 
						  popUpType="{ExportDocumentWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="800"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{uploadMenuItem}" eventStart="uploadToServer_eventStartHandler(event)">
			<fc:OpenPopUp id="openFileTransferPopUp" 
						  popUpType="{fileTransferWindowClass}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="800"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		
		<handlers:EventHandler eventName="itemClick" target="{printItem}">
			<fc:OpenPopUp id="openPrintPopUp" 
						  popUpType="{PrintWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="click" target="{lostPasswordLabel2}">
			<fc:OpenPopUp id="openLostPasswordPopUp" 
						  popUpType="{LoginWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:LoginWindow.LOST_PASSWORD,openingState:LoginWindow.LOST_PASSWORD}}"
						  close="loginPopUp_closeHandler(LoginWindow.LOST_PASSWORD)"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="click" targets="{[loginLabel,loginLabel2]}">
			<fc:OpenPopUp id="openLoginPopUp" 
						  popUpType="{LoginWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:LoginWindow.LOGIN}}"
						  close="loginPopUp_closeHandler(LoginWindow.LOGIN)"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="click" targets="{[registerLabel,registerLabel2]}">
			<fc:OpenPopUp id="registrationWithSitePopUp" 
						  popUpType="{LoginWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:LoginWindow.REGISTRATION_WITH_SITE}}"
						  close="loginPopUp_closeHandler(LoginWindow.REGISTRATION_WITH_SITE)"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{creditsMenuItem}">
			<fc:OpenPopUp popUpType="{CreditsWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="720"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{helpMenuItem}">
			<fc:OpenPopUp popUpType="{HelpWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="720"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{settingsMenuItem}">
			<fc:OpenPopUp id="openSettingsWindow" 
						  popUpType="{SettingsWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="720"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>-->
		
		<handlers:EventHandler eventName="itemClick" target="{quitApplication}" eventStart="MenuManager.closeApplication_eventStartHandler(event)">
			<application:CloseApplication />
		</handlers:EventHandler>
		
		<file:BrowseForFile id="browseForPSD" 
							targetAncestor="{this}"
							fileTypes="psd">
			<file:selectionEffect>
				<file:LoadFile id="loadPSDFile" 
							   fileReference="{browseForPSD.fileReference}"
							   complete="MenuManager.psdLoadedHandler(event)"/>
			</file:selectionEffect>
		</file:BrowseForFile>
		
		<file:BrowseForFile id="browseForMXML" 
							targetAncestor="{this}"
							fileTypes="mxml">
			<file:selectionEffect>
				<file:LoadFile id="loadMXMLFile" 
							   fileReference="{browseForMXML.fileReference}"
							   complete="MenuManager.mxmlLoadedHandler(event)"/>
			</file:selectionEffect>
		</file:BrowseForFile>
		
		<handlers:EventHandler target="{logoPopUpGroup}" eventName="mouseDownOutside">
			<popup:HidePopupAnchor target="{logoPopUp}" />
		</handlers:EventHandler>
		
		<model:MenuItem id="workOfflineMenuItem" label="Work Offline" />
		
		<model:MenuItem id="rootMenu">
			<model:MenuItem label="File">
				<model:MenuItem id="menuNewDocument" label="New Document" itemClick="MenuManager.menuNewDocument_itemClickHandler(event)"/>
				<model:MenuItem id="menuNewProject" label="New Project" itemClick="MenuManager.newProjectButton_clickHandler()" />
				<model:MenuItem type="separator"/>
				<model:MenuItem label="Open Document" itemClick="MenuManager.openDocument_itemClickHandler(event)"/>
				<model:MenuItem label="Open Project" itemClick="MenuManager.openProject_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem label="Close Document" itemClick="DocumentManager.closeDocument(Radiate.selectedDocument)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="saveDocumentMenuItem" label="Save as..." itemClick="MenuManager.saveDocumentMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="saveMenuItem" label="Save online" itemClick="MenuManager.saveMenuItem_itemClickHandler(event)"
								keyEquivalent="s" commandKey="true"/>
				<model:MenuItem id="saveSnippetMenuItem" label="Save snippet online" itemClick="MenuManager.saveSnippetMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="saveAsImageMenuItem" label="Save as image" itemClick="MenuManager.saveAsImageMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="saveSelectionAsImageMenuItem" label="Save Selection as Image" itemClick="MenuManager.saveSelectionAsImageMenuItem_itemClickHandler(event)"/>
				<model:MenuItem label="Save Project" itemClick="ProjectManager.saveProject(Radiate.selectedProject)"/>
				<model:MenuItem label="Save All Documents" itemClick="DocumentManager.saveAllDocuments()"/>
				<model:MenuItem id="exportDocument" label="Export release..." itemClick="MenuManager.exportDocument_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="revertDocumentMenuItem" label="Revert..." itemClick="MenuManager.revertDocument()"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="uploadMenuItem" label="Upload to server..." itemClick="MenuManager.uploadToServer_eventStartHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="removeDocument" label="Remove Document" itemClick="MenuManager.deleteDocument_itemClickHandler(event)"/>
				<model:MenuItem id="removeProject" label="Remove Project" itemClick="MenuManager.deleteProjectIcon_clickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="printItem" label="Print" itemClick="MenuManager.printItem_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="importSnippetMenuItem" label="Import Snippet..." itemClick="MenuManager.importSnippetMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="importMXMLMenuItem" label="Import MXML..." itemClick="MenuManager.importMXMLMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="importImageMenuItem" label="Import Image..." itemClick="MenuManager.importImageMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="importPSDMenuItem" label="Import PSD..." itemClick="MenuManager.importPSDMenuItem_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="quitApplication" label="Quit" />
			</model:MenuItem>
			<model:MenuItem label="Edit" >
				<model:MenuItem id="undo" label="Undo" itemClick="MenuManager.undo_itemClickHandler(event)" 
								enabled="{HistoryManager.canUndo}"/>
				<model:MenuItem id="redo" label="Redo" itemClick="MenuManager.redo_itemClickHandler(event)"
								enabled="{HistoryManager.canRedo}"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="cut" label="Cut" name="cut" enabled="true" keyEquivalent="x" controlKey="true" itemClick="MenuManager.cut_itemClickHandler(event)"/>
				<model:MenuItem id="copy" label="Copy" name="copy" enabled="true" keyEquivalent="c" controlKey="true" itemClick="MenuManager.copy_itemClickHandler(event)"/>
				<model:MenuItem id="paste" label="Paste" name="paste" enabled="true" keyEquivalent="v" controlKey="true" itemClick="MenuManager.paste_itemClickHandler(event)"/>
				<model:MenuItem id="delete" label="Delete" name="delete" enabled="true" itemClick="MenuManager.delete_itemClickHandler(event)"/>
				<model:MenuItem id="selectAll" label="Select All" name="selectAll" enabled="true" keyEquivalent="a" controlKey="true"/>
				<model:MenuItem id="duplicate" label="Duplicate" name="Duplicate" enabled="true" keyEquivalent="d" controlKey="true" itemClick="MenuManager.duplicate_itemClickHandler(event)"/>
			</model:MenuItem>
			<model:MenuItem label="Layers" >
				<model:MenuItem id="arrangeLayers" label="Arrange Layer" >
					<model:MenuItem id="bringForwardLayer" label="Bring Forward" itemClick="MenuManager.bringForwardLayer_itemClickHandler(event)" />
					<model:MenuItem id="bringToFront" label="Bring to Front" itemClick="MenuManager.bringToFront_itemClickHandler(event)" />
					<model:MenuItem id="sendBackwardLayer" label="Send Backward" itemClick="MenuManager.sendBackwardLayer_itemClickHandler(event)" />
					<model:MenuItem id="sendToBack" label="Send to Back" itemClick="MenuManager.sendToBack_itemClickHandler(event)" />
				</model:MenuItem>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="lockLayerGroup" label="Lock Layer" >
					<model:MenuItem id="lockLayer" label="Lock layer" itemClick="MenuManager.lockLayer_itemClickHandler(event)" />
					<model:MenuItem id="unlockLayer" label="Unlock layer" itemClick="MenuManager.unlockLayer_itemClickHandler(event)" />
					<model:MenuItem id="lockDescendantLayers" label="Lock descendant layers" itemClick="MenuManager.lockDescendantLayers_itemClickHandler(event)" />
					<model:MenuItem id="unlockDescendantLayers" label="Unlock descendant layers" itemClick="MenuManager.unlockDescendantLayers_itemClickHandler(event)" />
				</model:MenuItem>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="rotateImage" label="Rotate Image" >
					<model:MenuItem id="rotateImage90" label="Rotate 90" itemClick="MenuManager.rotateImage_itemClickHandler(event)"/>
					<model:MenuItem id="rotateImage180" label="Rotate 180" itemClick="MenuManager.rotateImage_itemClickHandler(event)"/>
					<model:MenuItem id="rotateImage270" label="Rotate 270" itemClick="MenuManager.rotateImage_itemClickHandler(event)"/>
				</model:MenuItem>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="flipImage" label="Flip Image" >
					<model:MenuItem id="flipImageHorizontally" label="Flip Horizontally" itemClick="MenuManager.flipImage_itemClickHandler(event)"/>
					<model:MenuItem id="flipImageVertically" label="Flip Vertically" itemClick="MenuManager.flipImage_itemClickHandler(event)"/>
				</model:MenuItem>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="removeExplicitPosition" label="Remove explicit position" itemClick="MenuManager.removeExplicitPosition_itemClickHandler(event)" />
				<model:MenuItem id="sizeSelectionToContent" label="Remove explicit size" itemClick="MenuManager.removeExplicitSize_itemClickHandler(event)" />
				<model:MenuItem id="removeExplicitHeight" label="Remove explicit height" itemClick="MenuManager.removeExplicitHeight_itemClickHandler(event)" />
				<model:MenuItem id="removeExplicitWidth" label="Remove explicit width" itemClick="MenuManager.removeExplicitWidth_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="sizeDocumentToSelection" label="Size document to selection" itemClick="MenuManager.sizeDocumentToSelection_itemClickHandler(event)" />
				<model:MenuItem id="sizeSelectionToDocument" label="Size selection to document" itemClick="MenuManager.sizeSelectionToDocument_itemClickHandler(event)" />
				<model:MenuItem id="sizeDocumentToSelectionOriginalSize" label="Size document to original sized image" itemClick="MenuManager.sizeDocumentToOriginalImage_itemClickHandler(event)" />
				<model:MenuItem id="resizeDocumentToShowAllContent" label="Size document to show all content" itemClick="MenuManager.resizeDocumentToShowAllContent_itemClickHandler(event)" />
				<model:MenuItem id="resizeDocumentToFitContent" label="Size document to fit content" itemClick="MenuManager.resizeDocumentToFitContent_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="copySelectionIntoLibrary" label="Save selection snapshot to library" itemClick="MenuManager.copySelectionIntoLibrary_itemClickHandler(event)" />
				<model:MenuItem id="saveSnapshotToLibrary" label="Save document snapshot to library" itemClick="MenuManager.saveSnapshotToLibrary_itemClickHandler(event)" />
				<model:MenuItem id="copyDocumentToClipboard" label="Copy document snapshot to clipboard" itemClick="MenuManager.copyDocumentImageToClipboard_itemClickHandler(event)" />
				<model:MenuItem id="pasteImageFromClipboard" label="Paste image from clipboard" itemClick="MenuManager.pasteImageFromClipboardToDocument_itemClickHandler(event)" />
				<model:MenuItem id="trimImage" label="Trim transparent edges of image" itemClick="MenuManager.trimImage_itemClickHandler(event)" />
			</model:MenuItem>
			<model:MenuItem label="Commands" >
				<model:MenuItem id="openGallery" label="Open Gallery" itemClick="MenuManager.openGallery_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="refreshView" label="Refresh View" itemClick="MenuManager.refreshView_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="clearProjectHomePage" label="Clear home page" itemClick="MenuManager.clearProjectHomePage_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="showProjectSource" label="Show Project Source" itemClick="MenuManager.showProjectSource_itemClickHandler(event)" />
				<model:MenuItem id="showDocumentSource" label="Show Document Source" itemClick="MenuManager.showDocumentSource_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="getRevisions" label="Show Revisions" itemClick="MenuManager.getRevisions_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="viewInBrowserShots" label="View in Browser Shots" itemClick="MenuManager.viewInBrowserScreenshot_itemClickHandler(event)" />
				<model:MenuItem id="viewInSiteScanner" label="View in Site Scanner" itemClick="MenuManager.viewInSiteScanner_itemClickHandler(event)" />
			</model:MenuItem>
			<model:MenuItem id="windowMenu" label="Window">
				<model:MenuItem label="No documents" />
			</model:MenuItem>
			<model:MenuItem id="helpMenu" label="Help">
				<model:MenuItem id="helpMenuItem" label="Online Documentation" itemClick="MenuManager.helpMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="creditsMenuItem" label="Notices and Credits" itemClick="MenuManager.creditsMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="checkForUpdateMenuItem" label="Check for update" itemClick="MenuManager.checkForUpdateMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="settingsMenuItem" label="Settings" />
			</model:MenuItem>
		</model:MenuItem>
		
		<s:Parallel id="fadeInLogo">
			<s:Rotate3D angleZFrom="0" 
						angleZTo="90" 
						autoCenterProjection="true" 
						autoCenterTransform="true" 
						duration="250"
						target="{mainLogo}" />
			<s:Fade alphaFrom="0" alphaTo="1" target="{mainLogo}" duration="250" />
		</s:Parallel>
		
		<s:Parallel id="requestAnimation" >
			<s:Fade alphaFrom="0" alphaTo="1" target="{busyLogo}" duration="500" />
			<s:Sequence id="rotationAnimation" suspendBackgroundProcessing="true" repeatCount="0">
				<s:Rotate3D angleZFrom="0" 
							angleZTo="360" 
							easer="{new Linear(0,0)}" 
							autoCenterProjection="true" 
							autoCenterTransform="true" 
							duration="1000"
							target="{busyLogo}" />
			</s:Sequence>
		</s:Parallel>
		
		<s:Sequence id="fadeOutRequest" effectEnd="requestAnimation.end();">
			<mx:AnimateProperty property="alpha" fromValue="1" toValue="0" target="{busyLogo}" duration="1050" />
		</s:Sequence>
		
		<s:Fade id="fadeOutStatus" target="{statusLabel}" alphaFrom="1" alphaTo="0" 
				effectEnd="MenuManager.fadeOutStatus_effectEndHandler(event)"/>
		
		<s:Sequence id="notificationMessenger" target="{instantMessengerContainer}" >
			<mx:AnimateProperty duration="250" fromValue="-2" toValue="28" property="top"/>
			<mx:AnimateProperty startDelay="4000" duration="250" toValue="-2" fromValue="28" property="top"/>
		</s:Sequence>
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="home"/>
		<s:State name="login"/>
		<s:State name="homeLoggedIn" basedOn="home"/>
		<s:State name="homeLoggedOut" basedOn="home"/>
		<s:State name="design"/>
	</s:states>
	
	
	<s:Image id="backgroundLogoImage2" 
			 y="0" x="0" 
			 fillMode="repeat"
			 width="100%" height="100%" 
			 source="{Radii8LibraryAssets.wall2}"
			 alpha=".35"
			 includeIn="home"/>
	
	<s:Image id="backgroundLogoImage" 
			 y="0" x="-200" 
			 width="80%" height="80%" 
			 source="{Radii8LibraryAssets.logo256}"
			 alpha=".05"
			 includeIn="home"/>
	
	<!-- HOME SCREEN MENU SHADOW -->
	<s:RectangularDropShadow id="welcomeContainerShadow" 
							 minHeight="380" 
							 height="60%" 
							 minWidth="640"
							 width="80%"
							 horizontalCenter="0" 
							 verticalCenter="-20"
							 includeIn="home"
							 blurX="6" blurY="6"
							 distance="0"
							 />
	
	<!-- HOME SCREEN MENU -->
	<s:BorderContainer id="welcomeContainer" 
					   minHeight="380" 
					   height="60%" 
					   minWidth="640"
					   width="80%"
					   horizontalCenter="0" verticalCenter="-20" 
					   includeIn="home">
		<s:Rect left="0" x="81" top="0" y="82" height="120" right="0">
			<s:fill>
				<mx:SolidColor color="#CCCCCC">
				</mx:SolidColor>
			</s:fill>
		</s:Rect>
		
		<s:Image id="mainLogo" x="0" y="0" width="128" height="128" 
				 source="{Radii8LibraryAssets.logo256}"
				 smooth="true"
				 rollOver="{fadeInLogo.play()}" 
				 rollOut="{fadeInLogo.play(null, true)}"
				 alpha="0"/>
		<s:BitmapImage id="logo4" x="32" y="32" 
					   smooth="true"
					   source="{Radii8LibraryAssets.logo64}"/>
		<s:Label x="130" y="44" text="Radiate" fontSize="45" fontWeight="bold">
			<s:filters> 
				<filters:BorderStrokeFilter color="#EEEEEE" weight=".4"/>
				<filters:BorderStrokeFilter color="#DDDDDD" weight="1"/>
				<filters:BorderStrokeFilter color="#585858" weight="2"/>
			</s:filters>
		</s:Label>
		<s:Image id="busyLogo" 
				 source="{Radii8LibraryAssets.logo256}" 
				 width="60" height="60"
				 verticalAlign="middle" 
				 horizontalAlign="center"
				 useHandCursor="true"
				 buttonMode="true"
				 right="40"
				 y="10"
				 includeInLayout="false"
				 visible="false"
				 >
		</s:Image>
		
		<s:HGroup left="20" top="160" bottom="60" width="100%" height="100%" right="20">
			<s:VGroup width="100%" height="100%">
				<c:LabelButton id="examplesLabel" 
							   text="Starter Projects" 
							   fontWeight="bold" 
							   click="MenuManager.examplesLabel_clickHandler(event)"/>
				<s:Label id="checkingForExampleProjectsLabel" 
						 text="" 
						 fontStyle="italic"
						 color="#989898"
						 visible="false"
						 includeInLayout="false"/>
				<s:List id="examplesList"
						width="100%" 
						borderVisible="false"
						dataProvider="{MenuManager.examplesCollection}"
						labelField="name"
						minHeight="110"
						height="100%"
						doubleClickEnabled="true"
						itemRenderer="com.flexcapacitor.views.renderers.ProjectRenderer"
						change="MenuManager.examplesList_changeHandler(event)"
						doubleClick="MenuManager.examplesList_doubleClickHandler(event)"
						/>
			</s:VGroup>
			
			<s:VGroup width="100%" height="100%">
				<c:LabelButton id="projectsLabel" 
						 text="Projects" 
						 fontWeight="bold"
						 click="MenuManager.projectsLabel_clickHandler(event)"/>
				<s:Label id="checkingForProjectsLabel" 
						 text="Checking for projects..." 
						 fontStyle="italic"
						 color="#989898"
						 visible="false"
						 includeInLayout="false"/>
				<s:List id="projectsList" 
						width="100%"
						minHeight="110"
						height="100%"
						borderVisible="false"
						dataProvider="{MenuManager.projectsCollection}"
						labelField="name"
						doubleClickEnabled="true"
						itemRenderer="com.flexcapacitor.views.renderers.ProjectRenderer"
						doubleClick="MenuManager.projectsList_doubleClickHandler(event)"
						change="MenuManager.projectsList_changeHandler(event)"
						/>
				<s:Label id="projectLastSavedLabel" 
						 text="" 
						 visible="false" 
						 includeInLayout="false"/>
			</s:VGroup>
			
			<s:VGroup width="100%" includeInLayout="false" visible="false">
				<c:LabelButton text="Templates" 
							   fontWeight="bold"/>
				<s:List width="100%" 
						dataProvider="{MenuManager.templatesCollection}"
						/>
			</s:VGroup>
			
			<s:VGroup width="100%" height="100%">
				
				<c:LabelButton text="News and Tutorials" 
							   fontWeight="bold" 
							   click="MenuManager.news_clickHandler(event)"/>
				<s:Label id="checkingForNewsLabel" 
						 text="Checking for news..." 
						 fontStyle="italic"
						 color="#989898"
						 visible="false"
						 includeInLayout="false"/>
				<s:List id="newsList" 
						width="100%"
						minHeight="110"
						height="100%"
						borderVisible="false"
						dataProvider="{MenuManager.newsCollection}"
						labelField="title"
						doubleClickEnabled="true"
						click="MenuManager.newsList_doubleClickHandler(event)"
						change="MenuManager.newsList_changeHandler(event)"
						/>
			</s:VGroup>
		</s:HGroup>
		
		<s:Label id="statusLabel" bottom="50" left="20" textAlign="left" fontStyle="italic"/>
		
		<s:HGroup bottom="20" left="20" right="20"
				  width="100%"
				  verticalAlign="middle">
			<c:LabelButton id="logoutLabel2" 
					 text="Logout" 
					 verticalAlign="middle" 
					 textAlign="center"
					 styleName="loginLabel"
					 visible="{ProfileManager.isUserLoggedIn}"
					 includeInLayout="{ProfileManager.isUserLoggedIn}"
					 click="MenuManager.logoutLabel_clickHandler(event)"
					 />
			
			<c:LabelButton id="loginLabel2" 
					 text="Login" 
					 verticalAlign="middle" 
					 textAlign="center"
					 styleName="loginLabel"
					 visible="{!ProfileManager.isUserLoggedIn}"
					 includeInLayout="{!ProfileManager.isUserLoggedIn}"
					 click="MenuManager.loginLabel_clickHandler(event)"
					 />
			
			<c:VerticalLine visible="{!ProfileManager.isUserLoggedIn}"
							includeInLayout="{!ProfileManager.isUserLoggedIn}"/>
			
			<c:LabelButton id="registerLabel2" 
						   text="Register" 
						   verticalAlign="middle" 
						   textAlign="center"
						   styleName="loginLabel"
						   visible="{!ProfileManager.isUserLoggedIn}"
						   includeInLayout="{!ProfileManager.isUserLoggedIn}"
						   click="MenuManager.registerLabel_clickHandler(event)"
						   />
			
			<c:VerticalLine visible="{!ProfileManager.isUserLoggedIn}"
							includeInLayout="{!ProfileManager.isUserLoggedIn}"/>
			
			<c:LabelButton id="lostPasswordLabel2" 
						   text="Lost Password" 
						   verticalAlign="middle" 
						   textAlign="center"
						   styleName="loginLabel"
						   visible="{!ProfileManager.isUserLoggedIn}"
						   includeInLayout="{!ProfileManager.isUserLoggedIn}"
						   click="MenuManager.lostPasswordLabel_clickHandler(event)"
						   />
			
			<s:Spacer width="100%" />
			
			<s:HGroup id="_visibleButtonGroup" 
					  mouseEnabledWhereTransparent="true"
					  right="0" 
					  height="100%" 
					  >
				
				
				<renderers:ItemRendererButton id="openProjectButton" 
											  iconSource="{Radii8LibraryAssets.openFolder}"
											  label="Open Project"
											  click="MenuManager.openProjectButton_clickHandler(event)"
											  enabled="{projectsList.selectedItem!=null || examplesList.selectedItem!=null}"
											  />
				<renderers:ItemRendererButton id="openPreviousProject" 
											  iconSource="{Radii8LibraryAssets.openFolder}"
											  label="Open Previous Project"
											  click="MenuManager.openLastProject()"
											  enabled="false"
											  visible="false"
											  includeInLayout="false"
											  />
				
				<renderers:ItemRendererButton id="deleteProjectIcon" 
											  iconSource="{Radii8LibraryAssets.trashCan}"
											  label="Remove"
											  enabled="{projectsList.selectedItem!=null}"
											  click="MenuManager.deleteProjectIcon_clickHandler(event)"
											  />
				
				<renderers:ItemRendererButton id="newProjectButton" 
										   iconSource="{Radii8LibraryAssets.project}"
										   bottom="20" 
										   horizontalCenter="0" 
										   label="New Project" 
										   autoDrawBackground="true"
										   click="MenuManager.newProjectButton_clickHandler(event)"/>
				
				<renderers:ItemRendererButton id="newDocumentButton" 
										   iconSource="{Radii8LibraryAssets.document}"
										   bottom="20" 
										   horizontalCenter="0" 
										   label="New Document" 
										   autoDrawBackground="true"
										   click="MenuManager.newDocumentAndProjectButton_clickHandler(event)"/>
				
				
				<renderers:ItemRendererButton id="openGalleryButton" 
											  iconSource="{Radii8LibraryAssets.document}"
											  bottom="20" 
											  horizontalCenter="0" 
											  label="Open Gallery" 
											  autoDrawBackground="true"
											  click="MenuManager.openGalleryButton_clickHandler(event)"/>
			</s:HGroup>
		</s:HGroup>
		
	</s:BorderContainer>
	
	<s:Label id="productionLabel" 
			 text="Radiate is in development. Email features and bug reports." 
			 typographicCase="lowercaseToSmallCaps" 
			 bottom="60" horizontalCenter="0" 
			 textAlign="left"
			 color="#888888"
			 includeIn="home"
			 fontSize="10"
			 />
	
	<views:Remote id="remote" itemCreationPolicy="immediate" width="100%" height="100%" top="38" includeIn="design" />
	
	<s:PopUpAnchor id="logoPopUp" width="100" height="100" top="34" left="10" >
		<s:Group id="logoPopUpGroup" 
				 mouseEnabledWhereTransparent="true" 
				 width="100" height="100" 
				 >
			<s:filters>
				<s:DropShadowFilter distance="3" strength=".75"/>
			</s:filters>
			
			
			<s:Rect width="100%" height="100%" radiusX="8" radiusY="8">
				<s:fill>
					<s:SolidColor color="#ffffff" alpha=".9" />
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#000000" pixelHinting="true" weight="0" />
				</s:stroke>
			</s:Rect>
			
			<s:BitmapImage id="logo2" 
						   source="assets/images/logo2.png" 
						   width="68" height="69"
						   verticalCenter="0"
						   horizontalCenter="0"
						   >
			</s:BitmapImage>
		</s:Group>
	</s:PopUpAnchor>
	
	
	
	<!-- MESSAGES BAR --> 
	<c:BorderContainer id="instantMessengerContainer" 
					   width="100%" 
					   height="30" 
					   top="-2" 
					   borderColor="#0000ff"
					   borderAlpha="0" 
					   borderWeight="0"
					   borderVisible="false"
					   backgroundAlpha=".8"
					   click="MenuManager.instantMessengerContainer_clickHandler(event)">
		<s:Label id="instantMessageLabel" width="100%" height="100%"
				 verticalAlign="middle" textAlign="center"/>
	</c:BorderContainer>
	
	<!-- TOP MENU BAR --> 
	<s:BorderContainer backgroundColor="#3d3d3d"
					   borderVisible="false"
					   width="100%" height="28" 
					   top="0"
					   color="#DFDFDF"
					   >
		
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" 
								paddingLeft="8" 
								paddingRight="8"
								gap="8"/>
		</s:layout>
		
		<s:Group >
			<s:Image id="cornerLogo" 
					 smooth="true"
					 source="{Radii8LibraryAssets.logo}" 
					 width="20" height="20"
					 verticalAlign="middle" 
					 horizontalAlign="center"
					 includeInLayout="true"
					 useHandCursor="true"
					 buttonMode="true"
					 click="MenuManager.cornerLogo_clickHandler(event)"
					 >
			</s:Image>
		</s:Group>
		
		<s:Spacer width="-6"/>
		
		<c:LabelButton id="homeLabel" text="RADIATE" text.design="HOME" 
				 fontSize="12" 
				 fontWeight="bold"
				 color="#ffffff"
				 paddingTop="2"
				 top="10"
				 left="10"
				 click="MenuManager.logo_clickHandler(event)">
			<c:filters> 
				<filters:BorderStrokeFilter color="#585858" weight=".5"/>
				<filters:BorderStrokeFilter color="#EEEEEE" weight=".5"/>
			</c:filters>
		</c:LabelButton>
		<s:Label text="beta" text.design=""
				 fontSize="7" 
				 fontWeight="bold"
				 color="#ffffff"
				 paddingBottom="6"
				 top="10"
				 left="10"/>
		
		<c:VerticalLine id="mainMenuBarLine" 
						itemCreationPolicy="immediate"
						includeIn="design"/>
		
		<mx:MenuBar id="mainMenuBar" 
					dataDescriptor="{new MenuItemDataDescriptor()}"
					dataProvider="{rootMenu}"
					labelField="label"
					height="100%"
					useHandCursor="true"
					buttonMode="true"
					showRoot="false"
					includeIn="design"
					
					itemCreationPolicy="immediate"
					menuShow="MenuManager.menuItemEventHandler(event)" 
					menuHide="MenuManager.menuItemEventHandler(event)"
					itemClick="MenuManager.menuItemEventHandler(event)" 
					itemRollOut="MenuManager.menuItemEventHandler(event)"
					itemRollOver="MenuManager.menuItemEventHandler(event)" 
					change="MenuManager.menuItemEventHandler(event)"
					>
		</mx:MenuBar>
		
		<s:Spacer width="100%"/>
		
		<c:LabelButton id="loginLabel" 
				 text="Login" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{!ProfileManager.isUserLoggedIn}"
				 includeInLayout="{!ProfileManager.isUserLoggedIn}"
				 click="MenuManager.loginLabel_clickHandler(event)"
				 />
		
		<s:Label text="|" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{!ProfileManager.isUserLoggedIn}"
				 includeInLayout="{!ProfileManager.isUserLoggedIn}"
				 />
		
		
		<c:LabelButton id="registerLabel" 
				 text="Register" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{!ProfileManager.isUserLoggedIn}"
				 includeInLayout="{!ProfileManager.isUserLoggedIn}"
				 click="MenuManager.registerLabel_clickHandler(event)"
				 />
		
		<c:VerticalLine visible="{!ProfileManager.isUserLoggedIn}"
						includeInLayout="{!ProfileManager.isUserLoggedIn}"
						/>
		
		<c:LabelButton id="userLabel" 
				 text="Hello, {ProfileManager.userDisplayName}" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 toolTip="Open website dashboard"
				 visible="{ProfileManager.isUserLoggedIn}"
				 includeInLayout="{ProfileManager.isUserLoggedIn}"
				 click="MenuManager.userLabel_clickHandler(event)"
				 />
		
		<s:Image id="userIcon" 
				 width="22" height="22" 
				 top="3"
				 useHandCursor="true"
				 buttonMode="true"
				 source="{ProfileManager.defaultUserAvatarPath}"
				 showErrorSkin="false"
				 smooth="true"
				 clearOnLoad="false"
				 toolTip="Open website profile"
				 securityError="MenuManager.userIcon_securityErrorHandler(event)"
				 ioError="MenuManager.userIcon_ioErrorHandler(event)"
				 click="MenuManager.userIcon_clickHandler(event)"
				 />
		
		<c:VerticalLine />
		
		<c:LabelButton id="visitSiteLabel" 
				 text="Visit Site" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{ProfileManager.isUserLoggedIn}"
				 includeInLayout="{ProfileManager.isUserLoggedIn}"
				 click="MenuManager.visitSiteLabel_clickHandler(event)"
				 />
		
		
		<c:VerticalLine 
			visible="{ProfileManager.isUserLoggedIn}"
			includeInLayout="{ProfileManager.isUserLoggedIn}"/>
		
		
		<c:LabelButton id="logoutLabel" 
				 text="Logout" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{ProfileManager.isUserLoggedIn}"
				 includeInLayout="{ProfileManager.isUserLoggedIn}"
				 click="MenuManager.logoutLabel_clickHandler(event)"
				 />
		
		<s:ToggleButton id="isConnectedCheckbox" 
						selected="{ProfileManager.isUserConnected}"
						skinClass="com.flexcapacitor.views.skins.OnlineToggleButton"
						useHandCursor="true"
						buttonMode="true"
						enabled="true"
						toolTip="Indicates if Radii8 service is reachable. Click to refresh."
						click="MenuManager.isConnectedCheckbox_clickHandler(event)"
						/>
	</s:BorderContainer>
	
	
	<c:BorderContainer width="100%" 
					   height="28" 
					   bottom="0" 
					   backgroundColor="#3d3d3d"
					   borderWeight="0"
					   >
					   <!--click="instantMessageLabel.text='test'; moveInstantMessanger.play()"-->

	</c:BorderContainer>
	
	
	
	<s:HGroup verticalAlign="middle"
			  right="10" 
			  bottom="5"
			  left="10"
			  color="#888888"
			  >
		<views:Breadcrumbs width="100%" includeIn="design"/>
		<s:Spacer width="100%"/>
		<mx:ProgressBar id="savingLogo" x="0" y="0" width="100" height="12" 
						indeterminate="true" label=""
				 visible="{DocumentManager.saveDocumentInProgress}"
				 includeInLayout="{DocumentManager.saveDocumentInProgress}"/>
		<s:Label text="Last saved:" 
				 includeInLayout="{DateManager.lastSaveDateFormatted!=null}" 
				 visible="{DateManager.lastSaveDateFormatted!=null}"/>
		<s:Label id="lastSavedDate" 
				 text="{DateManager.lastSaveDateFormatted}" 
				 includeInLayout="{DateManager.lastSaveDateFormatted!=null}" 
				 visible="{DateManager.lastSaveDateFormatted!=null}"/>
		<s:Spacer width="1"/>
		<c:VerticalLine height="16" 
						includeInLayout="{DateManager.lastSaveDateFormatted!=null}" 
						visible="{DateManager.lastSaveDateFormatted!=null}"/>
		
		<s:Spacer width="1"/>
		<s:Label id="versionNumber" text="{Radiate.versionNumber}" />
		<s:Spacer width="1"/>
		<c:VerticalLine height="16" />
		<s:Spacer width="1"/>
		<c:LabelButton id="contactLabel" 
					   bottom="6" 
					   left="10" 
					   text="Contact" 
					   color="#888888" 
					   typographicCase="capsToSmallCaps"
					   click="MenuManager.contactLabel_clickHandler(event)"
					   />
		<c:VerticalLine height="100%" includeInLayout="{false}" visible="{false}"/>
		
		<s:Label id="usefulLabel" 
				 right="10" 
				 bottom="6"
				 textAlign="right" 
				 text="{DateManager.lastSaveDateDifference}"
				 />
		
		<s:Label id="performanceLabel" 
				 textAlign="right" 
				 color="white"
				 />
	</s:HGroup>
	
	<s:BorderContainer id="dropImagesLocation" 
					   width="100%" height="100%" 
					   backgroundColor="#757575" 
					   backgroundAlpha=".75" 
					   visible="false" 
					   click="MenuManager.dropImagesLocation_clickHandler(event)">
		<s:VGroup verticalCenter="0" horizontalCenter="0" horizontalAlign="center"
				  fontWeight="bold"
				  color="#ffffff">
			<s:Label text="Drop files here" 
					 fontSize="28"/>
			<s:Label text="Hold SHIFT to preserve content original size" />
			<s:Label text="Hold CMD or CTRL to size document to content" />
		</s:VGroup>
	</s:BorderContainer>
</s:Group>
