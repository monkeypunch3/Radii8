<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:popup="com.flexcapacitor.effects.popup.*" 
		 xmlns:flexcapacitor="flexcapacitor.*"
		 xmlns:utils="com.flexcapacitor.utils.*" 
		 xmlns:model="com.flexcapacitor.model.*" 
		 xmlns:fc="com.flexcapacitor.effects.popup.*"
		 xmlns:flexiframe="com.google.code.flexiframe.*"
		 xmlns:core="com.flexcapacitor.effects.core.*"
		 xmlns:views="com.flexcapacitor.views.*"
		 xmlns:renderers="com.flexcapacitor.views.renderers.*"
		 xmlns:filters="com.flexcapacitor.filters.*"
		 xmlns:application="com.flexcapacitor.effects.application.*"
		 xmlns:file="com.flexcapacitor.effects.file.*" 
		 xmlns:local="*" 

		 dragEnter="mainView_dragEnterHandler(event)"
		 dragExit="mainView_dragExitHandler(event)"
		 dragOver="mainView_dragOverHandler(event)"
		 dragDrop="mainView_dragDropHandler(event)"
		 
		 creationComplete="group1_creationCompleteHandler(event)"
		 width="400" height="300" xmlns:ns="http://flex.apache.org/experimental/ns"
		 >

	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.controller.RadiateUtilities;
			import com.flexcapacitor.effects.popup.OpenPopUp;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.managers.ArrangeLayers;
			import com.flexcapacitor.managers.ClipboardManager;
			import com.flexcapacitor.managers.HistoryManager;
			import com.flexcapacitor.managers.ServicesManager;
			import com.flexcapacitor.managers.ToolManager;
			import com.flexcapacitor.managers.ViewManager;
			import com.flexcapacitor.model.DocumentData;
			import com.flexcapacitor.model.DocumentMetaData;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.IProject;
			import com.flexcapacitor.model.MenuItem;
			import com.flexcapacitor.model.MenuItemDataDescriptor;
			import com.flexcapacitor.tools.ITool;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			import com.flexcapacitor.utils.supportClasses.log;
			import com.flexcapacitor.views.windows.ContactWindow;
			import com.flexcapacitor.views.windows.CopyImageToClipboardWindow;
			import com.flexcapacitor.views.windows.CreditsWindow;
			import com.flexcapacitor.views.windows.DeleteDocumentWindow;
			import com.flexcapacitor.views.windows.ExportDocumentWindow;
			import com.flexcapacitor.views.windows.ExportSnippetWindow;
			import com.flexcapacitor.views.windows.GalleryWindow;
			import com.flexcapacitor.views.windows.HelpWindow;
			import com.flexcapacitor.views.windows.LoginWindow;
			import com.flexcapacitor.views.windows.NewDocumentWindow;
			import com.flexcapacitor.views.windows.PasteImageFromClipboardWindow;
			import com.flexcapacitor.views.windows.PrintWindow;
			import com.flexcapacitor.views.windows.SettingsWindow;
			
			import flash.net.navigateToURL;
			import flash.utils.setTimeout;
			
			import mx.controls.Menu;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.managers.DragManager;
			import mx.utils.Platform;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.Application;
			import spark.effects.easing.Linear;
			import spark.events.IndexChangeEvent;
	/**
	 * the library would not compile and had random errors that were not errors. 
		I couldn't figure out what it was. it looks like it's fixed. 
		what i did was change -swf-version=18 from -swf-version=19 and 
		also went into properties then classes and instead of include all i selected
		the files to include. which were not the assets directory but the com.flexcapacitor directory
		let's hope it stays fixed
		 
		 * it did not stay fixed. it complained about PNGEncoderOptions which isn't available below 
		 * swf version 18 or 19. so i tried cleaning, changing swf version up and down 
		 * and many other things and nothing worked still errors. so i switched sdk and that 
		 * removed the errors. 
		 * 
		 * UPDATE: THE PREVIOUS ISSUE WAS POSSIBLY BECAUSE THE playerglobal.swc in the 11.2 or 11.5 was not correct
		 * check date of both they are the same. 
		 * download the playerglobal again. OR its because the playerglobal is not there. add 11.2,11.3,11.5 etc
		
		 * Update 8/28/15 : had to add swf-version=16 and it now works. using sdk 4.6 and air 3.6
		 * 12/18/15 - changed to swf-version=19 or AIR 19 and it works
		 * 
		i still get this warning: 
		The swc '/Users/monkeypunch/Documents/ProjectsGithub/flexcapacitor/MainLibrary/bin/FCLibrary.swc' 
		has style defaults and is in the library-path, which means dependencies will be linked in without the styles.  
		This can cause applications, which use the output swc, to have missing skins.  
		The swc should be put in the external-library-path.
		
		i think i fixed the above warning by putting adding the FCLibrary.swc as a swc rather than a project
		 * 
		 * UPDATE: NEED TO SELECT THE SWC AND CHOOSE EXTERNAL PATH
		
		i added all other projects except the radiate projects as swc instead of as projects
		
		i also added reference to PNGEncoderOptions encoder to RadiateReferences.as
		 * 
		 */
			[Bindable]
			public var fileTransferWindowClass:String = "com.flexcapacitor.views.FileTransferWindow";
			private var remoteTestURL:String = "";
			private var testURL:String = "";
			
			//include "build.as";
			
			public static const HOME_STATE:String = "home";
			public static const DESIGN_STATE:String = "design";
			public static const DESCRIPTION_STATE:String = "description";
			
			public static var debug:Boolean;
			
			/**
			 * 
			 * */
			[Bindable]
			public var radiate:Radiate;
			public var clipboardManager:ClipboardManager;
			
			[Bindable]
			public var serviceManager:ServicesManager;
			
			public function startup():void {
				radiate = Radiate.getInstance();
				clipboardManager= ClipboardManager.getInstance();
				serviceManager = ServicesManager.getInstance();
				
				Radiate.showMessageLabel = instantMessageLabel;
				Radiate.showMessageAnimation = notificationMessenger;
				
				//PerformanceManager.addItem(Radiate.SET_TARGET_TEST, performanceLabel, "text", 500);
				
				updateCheckExamples();
				updateCheckProjects();
				updateCheckNews();
				updateCheckLoginStatus();
				
				serviceManager.getLoggedInStatus();
				serviceManager.getNewsPosts();
				serviceManager.getExampleProjects();
				
				if (radiate.userID!=-1) {
					serviceManager.getProjectsByUser(radiate.userID);
				}
				else {
					updateCheckProjects(0);
				}
				
				serviceManager.addEventListener(RadiateEvent.BLOG_POSTS_RECEIVED, blogPostsReceivedHandler, false, 0, true);
				serviceManager.addEventListener(RadiateEvent.LOGGED_IN_STATUS, loggedInStatusHandler, false, 0, true);
				serviceManager.addEventListener(RadiateEvent.LOGIN_RESULTS, loggedInStatusHandler, false, 0, true);
				serviceManager.addEventListener(RadiateEvent.EXAMPLE_PROJECTS_LIST_RECEIVED, receivedExampleProjectsHandler, false, 0, true);
				serviceManager.addEventListener(RadiateEvent.PROJECTS_LIST_RECEIVED, receivedProjectsHandler, false, 0, true);
				serviceManager.addEventListener(RadiateEvent.PROJECT_SET_HOME_PAGE, clearHomePageHandler, false, 0, true);
				
				radiate.addEventListener(RadiateEvent.DOCUMENT_ADDED, documentChangeEventHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_REMOVED, documentChangeEventHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.DOCUMENT_RENAME, documentChangeEventHandler, false, 0, true);
				
				
				if (Capabilities.touchscreenType==TouchscreenType.FINGER) {
					cornerLogo_clickHandler(null);
				}
				
				if (Radiate.startInDesignView) {
					radiate.createNewDocumentAndSwitchToDesignView();
					radiate.addEventListener(RadiateEvent.DOCUMENT_OPEN, documentOpenedHandler, false, 0, true);
					isCreatingDocument = true;
				}
				//PerformanceManager.start();
				//trace(radiate.isUserLoggedIn);
			}
			
			/**
			 * On desktop on Mac hide the menu bar since we use the native menu bar
			 * */
			public function showMenuBar(value:Boolean):void {
				mainMenuBar.visible = value;
				mainMenuBar.includeInLayout = value;
				mainMenuBar.visible = value;
				mainMenuBar.includeInLayout = value;
			}
			
			/**
			 * Check for news items
			 * */
			protected function news_clickHandler(event:MouseEvent):void {
				updateCheckNews(-1);
				
				serviceManager.getNewsPosts();
			}
			
			/**
			 * Check for projects
			 * */
			protected function projectsLabel_clickHandler(event:MouseEvent):void {
				updateCheckProjects(-1);
				
				serviceManager.getProjectsByUser(radiate.userID);
			}
			
			/**
			 * Check for examples
			 * */
			protected function examplesLabel_clickHandler(event:MouseEvent):void
			{
				updateCheckExamples(-1);
				
				serviceManager.getExampleProjects();
			}
			
			protected function cornerLogo_clickHandler(event:MouseEvent):void {
				
				openSettingsWindow.play();
				
				// was trying to add fancy special effects to home screen
				// but disabling for now
				return;
				
				if (!ee) {
					if (!ripple) {
						ripple = ApplicationDomain.currentDomain.getDefinition(String.fromCharCode(99,111,109,46,102,108,101,120,99,97,112,97,99,105,116,111,114,46,103,114,97,112,104,105,99,115,46,82,105,112,112,108,101,114));
						
						if (ripple) {
							ripple = new ripple;
						}
					}
					//e.event = MouseEvent.CLICK;
					//e.target = backgroundLogoImage;
					ripple.event = MouseEvent.MOUSE_MOVE;
					
					if (targetEffect==null) targetEffect = backgroundLogoImage;
					//ripple.useLocalCoordinates = true;
					ripple.target = targetEffect;
					//backgroundLogoImage.source = "background01.jpg";
					//e.target = radiate.canvasBackground; 
					//e.target = FlexGlobals.topLevelApplication; 
					ee = true;
				}
				else {
					ee = false;
					//removeEventListener(MouseEvent.CLICK, stageHandler);
					if (ripple) {
						ripple.destroy();
					}
				}
			}
			
			public var ee:Boolean;
			public var ripple:Object;
			public var targetEffect:Object;
			
			/**
			 * Switch views on logo click
			 * */
			protected function logo_clickHandler(event:MouseEvent):void {
				
				if (currentState==HOME_STATE) {
					if (ripple) ripple.destroy();
					if (radiate.projects.length!=0) {
						currentState = DESIGN_STATE;
					}
				}
				else {
					currentState = HOME_STATE;
				}
				
			}
			
			/**
			 * Open project
			 * */
			protected function openProject_itemClickHandler(event:Event):void {
				radiate.openProject(radiate.selectedProject);
			}
			
			/**
			 * Open document
			 * */
			private function openDocument_itemClickHandler(event:Event):void {
				browseForMXML.play();
			}

			/**
			 * Redispatches on our custom menu items to our menu item models
			 * The models have event listeners that handle the events 
			 * The models expect mx.events.MenuEvent but in a desktop application
			 * we get FlexNativeMenuEvent. So we get an error if we don't use generic events
			 * in the model menu event handlers
			 * 
			 * In this function we are responding to 
			 * - rollover
			 * - rollout
			 * - show
			 * - hide
			 * - click
			 * 
			 * We really only need to handle click. 
			 * so someday we may only respond to that one event 
			 * */
			public function menuItemEventHandler(event:Event, menuItem:MenuItem = null):void {
				var iDocument:IDocument;
				var item:MenuItem;
				var menu:Object;
				var menuList:Menu;
				var label:String;
				var index:int = -1;
				var flexNativeMenu:Object;
				var menuEvent:MenuEvent;
				var applicableEvent:Boolean;
				
				if (event.type == MenuEvent.MENU_SHOW) {
					menuList = MenuEvent(event).menu as Menu;
					if (menuList.variableRowHeight != true) {
						menuList.rowHeight = 22;
						//menuList.variableRowHeight = true;
					}
				}
				
				if (event) {
					if (event.type==MenuEvent.ITEM_CLICK || event.type=="select") {
						applicableEvent = true;
					}
				}
				
				if (menuItem) {
					item = menuItem;
					label = menuItem.label;
					//index = menuItem.index;
				}
				else {
					menu = "menu" in event ? Object(event).menu : null;
					label = "label" in event ? Object(event).label : null;
					index = "index" in event ? Object(event).index : -1;
					flexNativeMenu = "nativeMenuItem" in event ? Object(event).nativeMenuItem : null;
					item = "item" in event ? Object(event).item : null;
				}
				
				
				if (label && item && applicableEvent) {
					menuEvent = new MenuEvent(MenuEvent.ITEM_CLICK, event.bubbles, event.cancelable);
					menuEvent.index = index;
					menuEvent.item = item;
					menuEvent.label = label;
				}
				
				if (item && menuEvent) {
					EventDispatcher(item).dispatchEvent(menuEvent);
				}
				else if (menu && menu.dataProvider && 
					menu.dataProvider[0] is MenuItem && 
					menu.dataProvider[0].parent is MenuItem) {
					menuEvent = new MenuEvent(event.type, event.bubbles, event.cancelable);
					EventDispatcher(menu.dataProvider[0].parent).dispatchEvent(menuEvent);
				}
				
				if (item && item.data is IDocument && applicableEvent) {
					iDocument = item.data as IDocument;
					
					// we need to deselect other windows in the menu 
					if (iDocument.isOpen) {
						radiate.showDocument(iDocument);
						//radiate.selectDocument(iDocument);
					}
					
					if (!iDocument.isOpen) {
						radiate.openDocumentByData(iDocument, true);
					}
					
					if (flexNativeMenu) {
						flexNativeMenu.checked = true;
						//radiate.updateWindowMenu(item, nativeMenuItem);
					}
				}
				
			}
			
			/**
			 * Handle when getting result of call that checks if user is logged in
			 * */
			protected function loggedInStatusHandler(event:RadiateEvent):void {
				
				if (radiate.isUserLoggedIn) {
					updateCheckLoginStatus(1);
					updateCheckProjects(-1);
					serviceManager.getProjectsByUser(radiate.userID);
					userIcon.source = radiate.userAvatar;
				}
				else {
					updateCheckLoginStatus(0);
					userIcon.source = radiate.defaultUserAvatarPath;
				}
				
				isConnectedCheckbox.selected = radiate.isUserConnected;
			}
			
			/**
			 * Handle when getting result of list of projects
			 * */
			protected function receivedProjectsHandler(event:RadiateEvent):void {
				var iProject:IProject;
				var projects:Array;
				var sortFields:Array = [];
				var dateSortField:SortField;
				var descending:Boolean = true;
				
				dateSortField = new SortField("dateSaved", descending);
				sortFields.push(dateSortField);
				
				projects = radiate.parseProjectsData(event.data);
				projectsCollection.sort = new Sort(sortFields);
				projectsCollection.source = projects;
				documentsCollection.source = [];
				
				for (var i:int = 0; i < projects.length; i++) 
				{
					iProject = projects[i];
					radiate.addProject(iProject);
				}
				
				
				if (projectsCollection.length==0 && checkingForProjectsLabel) {
					updateCheckProjects(0);
					openPreviousProject.enabled = false;
				}
				else if (checkingForProjectsLabel) {
					updateCheckProjects(1);
					openPreviousProject.enabled = true;
					iProject = projectsCollection.getItemAt(0) as IProject;
					openPreviousProject.label = "Open " + iProject.name;
				}
				
			}
			
			protected function examplesList_changeHandler(event:IndexChangeEvent):void {
				var selectedItem:Object = examplesList.selectedItem;
				
				//examplesList.selectedItem = null;
				projectsList.selectedItem = null;
			}
			
			
			/**
			 * Handle when getting result of example list of projects
			 * */
			protected function receivedExampleProjectsHandler(event:RadiateEvent):void {
				var projects:Array = radiate.parseProjectsData(event.data);
				examplesCollection.source = projects;
				
				if (examplesCollection.length==0 && checkingForExampleProjectsLabel) {
					updateCheckExamples(0);
				}
				else if (checkingForExampleProjectsLabel) {
					updateCheckExamples(1);
				}
				
			}
			
			
			/**
			 * Show project info and show documents in the project
			 * */
			protected function projectsList_changeHandler(event:IndexChangeEvent = null):void {
				var project:IProject = projectsList.selectedItem;
				examplesList.selectedItem = null;
				
				if (project && project is IProject) {
					projectLastSavedLabel.text = "" + project.dateSaved;
					documentsCollection.source = project.documentsMetaData;
				}
			}
			
			/**
			 * Open last project selected in project list
			 * */
			protected function openLastProject():void {
				var project:IProject = projectsCollection.length ? projectsCollection.getItemAt(0) as IProject : null;
				
				if (project && project is IProject) {
					currentState = DESIGN_STATE;
					validateNow();
					radiate.addProject(project, false);
					//radiate.openProject(project, DocumentData.REMOTE_LOCATION, true);
					radiate.openProjectFromMetaData(project, DocumentData.REMOTE_LOCATION, true);
					radiate.setProject(project, true);
					//projectsList.selectedIndex = -1;
				}
			}
			
			/**
			 * Handle login result
			 * */
			protected function loginPopUp_closeHandler(eventName:String):void {
				var loginWindow:LoginWindow;
				var action:String;
				
				if (LoginWindow.LOGIN==eventName) {
					loginWindow = LoginWindow(openLoginPopUp.popUp);
				}
				else if (LoginWindow.LOST_PASSWORD==eventName) {
					loginWindow = LoginWindow(openLostPasswordPopUp.popUp);
				}
				else if (LoginWindow.REGISTRATION_WITH_SITE==eventName) {
					loginWindow = LoginWindow(registrationWithSitePopUp.popUp);
				}
				
				action = loginWindow ? loginWindow.action : null;
				
				if (action==LoginWindow.CANCEL) {
					return;
				}
				
				if (radiate.isUserLoggedIn) {
					updateCheckProjects(-1);
					checkForProjects();
					updateCheckLoginStatus(1);
					radiate.saveExampleProjects();
				}
				else {
					serviceManager.getLoggedInStatus();
					updateCheckProjects(0);
				}
				
				//radiate.addEventListener(RadiateEvent.EXAMPLE_PROJECTS_LIST_RECEIVED, receivedExampleProjectsHandler, false, 0, true);
				//checkForExampleProjects();
			}
			
			/**
			 * Check online status after logout
			 * */
			protected function logoutPopUp_closeHandler(event:Event):void {
				var loginWindow:LoginWindow = LoginWindow(openLogoutPopUp.popUp);
				var action:String = loginWindow ? loginWindow.action : null;
				
				if (action==LoginWindow.CANCEL || action==null) {
					return;
				}
				
				setTimeout(Radiate.info, 1000, ["Logout successful"]);
				
				updateCheckProjects(0);
				//checkForProjects();
				projectsCollection.removeAll();
				projectsCollection.refresh();
				checkOnline();
			}
			
			/**
			 * Check if the user is online
			 * */
			protected function checkOnline():void {
				//trace("checking online status");
				serviceManager.getLoggedInStatus();
				updateCheckLoginStatus(-1);
			}
			
			/**
			 * Work offline clicked. May not be functioning at this time? 
			 * */
			protected function workOfflineMenuItem_itemClickHandler(event:Event):void {
				if (workOfflineMenuItem.toggled) {
					checkOnlineEffect.stop();
				}
				else {
					if (!checkOnlineEffect.isPlaying) {
						checkOnlineEffect.play();
					}
				}
			}
			
			/**
			 * Create a new project
			 * */
			protected function createNewProjectLabel_clickHandler(event:Event):void {
				var openNewProject:OpenPopUp = event.currentTarget as OpenPopUp;
				var popUp:NewDocumentWindow = openNewProject.popUp as NewDocumentWindow;
				var projectName:String = popUp.projectName;
				var documentName:String = popUp.documentName;
				
				if (popUp.action==NewDocumentWindow.FINISH) {
					currentState = DESIGN_STATE;
					validateNow();
					radiate.createBlankDemoDocument(projectName, documentName);
					
					if (radiate.isUserLoggedIn) {
						radiate.saveProject(radiate.selectedProject);
					}
					else {
						//Radiate.info("The project will not be saved");
					}
				}
			}
			
			/**
			 * Get projects by user that is logged in. 
			 * Right now this is checking a remote WP server. We could have it point 
			 * to a local directory of projects or workspace. 
			 * */
			protected function getProjectsByUser_clickHandler(event:MouseEvent):void {
				getProjectsByUser();
			}
			
			/**
			 * Get public projects / examples. There are no public or shared examples yet. 
			 * */
			protected function getPublicProjects_clickHandler(event:MouseEvent):void {
				checkForExampleProjects();
			}
			
			/**
			 * Get projects by current user
			 * */
			public function getProjectsByUser():void {
				checkForProjects();
			}
			
			/**
			 * Get a list of projects by user or that are shared by the public or are examples. 
			 * Shared public projects and example projects should be in their own category. 
			 * */
			protected function checkForProjects():void {
				projectsList.selectedItem = null;
				
				serviceManager.getProjectsByUser(radiate.userID);
				
				if (checkingForProjectsLabel) {
					updateCheckProjects(-1);
				}
			}
			
			/**
			 * Get a list of example projects 
			 * Shared public projects and example projects should be in their own category. 
			 * */
			protected function checkForExampleProjects(byUser:Boolean = false):void {
				//projectsList.dataProvider = null;
				examplesList.selectedItem = null;
				
				serviceManager.getExampleProjects();
				
				updateCheckExamples(-1);
			}
			
			/**
			 * Check for projects 
			 * */
			protected function removeProject_itemClickHandler(event:Event):void {
				checkForProjects();
			}
			
			/**
			 * Undo last action
			 * */
			protected function undo_itemClickHandler(event:Event):void {
				HistoryManager.undo(radiate.selectedDocument, true);
			}
			
			/**
			 * Redo last action
			 * */
			protected function redo_itemClickHandler(event:Event):void {
				HistoryManager.redo(radiate.selectedDocument, true);
			}
			
			/**
			 * Check if connected to remote WP server and update checkbox
			 * */
			protected function isConnectedCheckbox_clickHandler(event:MouseEvent):void {
				
				isConnectedCheckbox.selected = radiate.isUserConnected;
				
				
				checkOnline();
			}
			
			/**
			 * Show project string for debugging purposes
			 * */
			protected function showProjectSource_itemClickHandler(event:Event):void {
				var iProject:IProject = radiate.selectedProject;
				var output:String;
				
				if (iProject) {
					output = "\nSource for project, '" + iProject.name + "':\n";
					output += iProject.post ? JSON.stringify(iProject.post) + "\n" : "";
					output += iProject.toString();
					ViewManager.showConsolePanel(output);
					//Radiate.info();
				}
				else {
					Radiate.warn("No project selected");
				}
			}
			
			/**
			 * Show document string for debugging purposes
			 * */
			protected function showDocumentSource_itemClickHandler(event:Event):void {
				var iDocument:IDocument = radiate.selectedDocument;
				var output:String;
				
				if (iDocument) {
					output = "\nSource for document, '" + iDocument.name + "':\n";
					output += iDocument.post ? JSON.stringify(iDocument.post) + "\n" : "";
					output += iDocument.marshall(DocumentMetaData.STRING_TYPE, true) as String;
					
					ViewManager.showConsolePanel(output);
				}
				else {
					Radiate.warn("No document selected");
				}
				
			}
			
			/**
			 * Handle if user icon is not available
			 * */
			protected function userIcon_securityErrorHandler(event:SecurityErrorEvent):void {
				if (debug) {
					log("User icon security error: ", event);
				}
				//trace("security error ");
			}
			
			/**
			 * Handle if user icon is not available
			 * */
			protected function userIcon_ioErrorHandler(event:IOErrorEvent):void {
				if (debug) {
					log("User icon io error: ", event);
				}
				
				// keeps looping when icon can't be found
				if (userIcon.source!=radiate.defaultUserAvatarPath) {
					userIcon.source = radiate.defaultUserAvatarPath;
				}
				else {
					userIcon.source = null;
				}
			}
			
			protected function fadeOutStatus_effectEndHandler(event:EffectEvent):void {
				updateCheckLoginStatus(1);
			}
			
			protected function examplesList_doubleClickHandler(event:MouseEvent):void {
				var project:IProject = examplesList.selectedItem;
				
				if (project) {
					Radiate.info("Opening example project '" + project.name + "'");
					
					Radiate.callAfter(250, openExampleProject, project);
				}
				
			}
			
			/**
			 * Makes a duplicate of the example project
			 * Once it's loaded we need to clear the fields out and
			 * then save the project
			 * */
			protected function openExampleProject(project:IProject):void {
				
				if (project && project is IProject) {
					currentState = DESIGN_STATE;
					validateNow();
					exampleProject = project;
					radiate.addProject(project, false);
					//radiate.openProject(project, DocumentData.REMOTE_LOCATION, true);
					radiate.openProjectFromMetaData(project, DocumentData.REMOTE_LOCATION, true);
					radiate.addEventListener(RadiateEvent.PROJECT_OPENED, exampleProjectOpened, false, 0, true);
					radiate.setProject(project, true);
					//projectsList.selectedIndex = -1;
				}
			}
			
			protected function exampleProjectOpened(event:Event):void {
				if (exampleProject) {
					radiate.clearExampleProjectData(exampleProject);
					radiate.saveExampleProject(exampleProject);
					updateCheckExamples(-1);
					serviceManager.getExampleProjects();
					updateCheckProjects(-1);
					setTimeout(serviceManager.getProjectsByUser, 6000, radiate.userID);
					setTimeout(serviceManager.getProjectsByUser, 12000, radiate.userID);
					exampleProject = null;
				}
			}
			
			public var exampleProject:IProject;
			
			protected function projectsList_doubleClickHandler(event:MouseEvent):void {
				var project:IProject = projectsList.selectedItem;
				
				if (project) {
					Radiate.info("Opening project '" + project.name + "'");
					
					Radiate.callAfter(250, radiate.openProjectFromMainView, project);
				}
			}
			
			
			protected function newsList_doubleClickHandler(event:MouseEvent):void {
				var request:URLRequest;
				
				if (newsList.selectedItem) {
					request = new URLRequest();
					request.url = newsList.selectedItem.url;
					navigateToURL(request, "previewInBrowser");
				}
				
			}
			
			protected function newsList_changeHandler(event:IndexChangeEvent):void
			{
				
				
			}
			
			protected function blogPostsReceivedHandler(event:RadiateEvent):void
			{
				var posts:Array = serviceManager.parsePostsData(event.data);
				newsCollection.source = posts;
				
				if (newsCollection.length==0) {
					updateCheckNews(0);
					//openPreviousProject.enabled = false;
				}
				else {
					updateCheckNews(1);
				}
			}
			
			/**
			 * Updates the label checking for examples
			 * -1 = checking
			 * 0 = no examples available
			 * 1 = examples found
			 * */
			private function updateCheckExamples(param0:int = -1):void
			{
				
				if (param0==-1) {
					checkingForExampleProjectsLabel.text = "Checking for examples...";
					checkingForExampleProjectsLabel.includeInLayout = true;
					checkingForExampleProjectsLabel.visible = true;
				}
				else if (param0==0) {
					checkingForExampleProjectsLabel.text = "No examples available";
					checkingForExampleProjectsLabel.includeInLayout = true;
					checkingForExampleProjectsLabel.visible = true;
				}
				else if (param0==1) {
					checkingForExampleProjectsLabel.text = "";
					checkingForExampleProjectsLabel.includeInLayout = false;
					checkingForExampleProjectsLabel.visible = false;
				}
			}
			
			/**
			 * Updates the label checking for projects
			 * -1 = checking
			 * 0 = no projects available
			 * 1 = projects found
			 * */
			private function updateCheckProjects(param0:int = -1):void
			{
				
				if (param0==-1) {
					checkingForProjectsLabel.text = "Checking for projects...";
					checkingForProjectsLabel.includeInLayout = true;
					checkingForProjectsLabel.visible = true;
				}
				else if (param0==0) {
					checkingForProjectsLabel.text = "No projects available";
					checkingForProjectsLabel.includeInLayout = true;
					checkingForProjectsLabel.visible = true;
				}
				else if (param0==1) {
					checkingForProjectsLabel.text = "";
					checkingForProjectsLabel.includeInLayout = false;
					checkingForProjectsLabel.visible = false;
				}
			}
			
			/**
			 * Updates the label checking for news
			 * -1 = checking
			 * 0 = no news available
			 * 1 = projects found
			 * */
			private function updateCheckNews(param0:int = -1):void
			{
				
				if (param0==-1) {
					checkingForNewsLabel.text = "Checking for news...";
					checkingForNewsLabel.includeInLayout = true;
					checkingForNewsLabel.visible = true;
				}
				else if (param0==0) {
					checkingForNewsLabel.text = "No tutorials available";
					checkingForNewsLabel.includeInLayout = true;
					checkingForNewsLabel.visible = true;
				}
				else if (param0==1) {
					checkingForNewsLabel.text = "";
					checkingForNewsLabel.includeInLayout = false;
					checkingForNewsLabel.visible = false;
				}
			}
			
			/**
			 * Updates the label checking for login status
			 * -1 = checking if logged in
			 * 0 = not logged in
			 * 1 = hidden
			 * */
			private function updateCheckLoginStatus(param0:int = -1):void {
				
				if (param0==-1) {
					statusLabel.text = "Checking to see if you're logged in... one second.";
					statusLabel.includeInLayout = true;
					statusLabel.visible = true;
				}
				else if (param0==0) {
					statusLabel.text = "You are not logged in. You must be logged in to save projects";
					statusLabel.includeInLayout = true;
					statusLabel.visible = true;
				}
				else if (param0==1) {
					statusLabel.text = "";
					statusLabel.includeInLayout = false;
					statusLabel.visible = false;
				}
			}
			
			
			private function revertDocument():void {
				var success:Boolean = radiate.revertDocument(radiate.selectedDocument);
				if (success) {
					Radiate.info("Document reverted");
				}
				else {
					// revertDocument will display any errors
					//Radiate.info("Document was not reverted");
				}
			}
			
			protected function instantMessengerContainer_clickHandler(event:MouseEvent):void
			{
				if (notificationMessenger.isPlaying) {
					notificationMessenger.end();
					notificationMessenger.stop();
					notificationMessenger.play(null, true);
				}
				else {
					//notificationMessenger.play();
					notificationMessenger.end();
				}
			}
			
			protected function sizeDocumentToImage_itemClickHandler(event:MenuEvent):void
			{
				var iDocument:IDocument = radiate.selectedDocument;
				var componentDescription:ComponentDescription = iDocument ? iDocument.getItemDescription(radiate.target) : null;
				var image:Image = componentDescription ? componentDescription.instance as Image : null;
				var bitmapData:BitmapData = image ? image.bitmapData : null;
				
				if (bitmapData && bitmapData.width>0 && bitmapData.height>0) {
					RadiateUtilities.restoreImageToOriginalSize(image);
					RadiateUtilities.sizeDocumentToBitmapData(iDocument, image.bitmapData);
					
					//radiate.scaleToFit(false);
					//radiate.centerApplication();
				}
			}
			
			protected function sizeDocumentToSelection_itemClickHandler(event:MenuEvent):void
			{
				RadiateUtilities.sizeDocumentToSelection();
			}
			
			protected function sizeSelectionToDocument_itemClickHandler(event:MenuEvent):void
			{
				RadiateUtilities.sizeSelectionToDocument();
			}
			
			protected function resizeDocumentToContent_itemClickHandler(event:MenuEvent):void
			{
				RadiateUtilities.expandDocumentToContents();
			}
			
			protected function copyDocumentImageToClipboard_itemClickHandler(event:MenuEvent):void
			{
				if (Platform.isBrowser) {
					openImageToClipboardWindow.play();
				}
				else {
					RadiateUtilities.copyDocumentImageToClipboard(Radiate.instance.selectedDocument);
				}
			}
			
			protected function pasteClipboardToDocument_itemClickHandler(event:MenuEvent):void
			{
				if (Platform.isBrowser) {
					ViewManager.showPasteImagePanel();
				}
			}
			
			protected function saveSnapshotToLibrary_itemClickHandler(event:MenuEvent):void {
				var imageDataOrError:Object;
				
				// drag manager creates a raster snapshot when on desktop so don't use that
				if (radiate.selectedDocument) {
					imageDataOrError = RadiateUtilities.saveToLibrary(radiate.selectedDocument.instance, false);
				}
				
				if (imageDataOrError is Error) {
					Radiate.error("Could not create a snapshot of the selected item. " + imageDataOrError); 
				}
				else if (imageDataOrError) {
					
					ViewManager.showLibraryPanel(imageDataOrError as DocumentData, true);
					
					Radiate.info("Selection was saved as an image into the library.");
				}
			}
			
			protected function restoreImageToOriginalSize_itemClickHandler(event:MenuEvent):void
			{
				var iDocument:IDocument = radiate.selectedDocument;
				var componentDescription:ComponentDescription = iDocument ? iDocument.getItemDescription(radiate.target) : null;
				var image:Image = componentDescription ? componentDescription.instance as Image : null;
				var bitmapData:BitmapData = image ? image.bitmapData : null;
				
				if (bitmapData && bitmapData.width>0 && bitmapData.height>0) {
					RadiateUtilities.restoreImageToOriginalSize(image);
				}
			}
			
			protected function removeExplicitPosition_itemClickHandler(event:MenuEvent):void {
				
				RadiateUtilities.removeExplicitPositionFromSelection(radiate.target);
			}
			
			protected function removeExplicitSize_itemClickHandler(event:MenuEvent):void {
				
				RadiateUtilities.removeExplicitSizingFromSelection(radiate.target);
			}
			
			protected function removeExplicitHeight_itemClickHandler(event:MenuEvent):void {
				
				RadiateUtilities.removeExplicitHeightFromSelection(radiate.target);
			}
			
			protected function removeExplicitWidth_itemClickHandler(event:MenuEvent):void {
				
				RadiateUtilities.removeExplicitWidthFromSelection(radiate.target);
			}
			
			protected function refreshView_itemClickHandler(event:MenuEvent):void {
				
				if (radiate.selectedDocument) {
					Radiate.refreshDocument(radiate.selectedDocument);
				}
				else {
					Radiate.info("There is no document selected.");
				}
			}
			
			protected function copySelectionIntoLibrary_itemClickHandler(event:MenuEvent):void
			{
				var result:Object = RadiateUtilities.saveToLibrary(radiate.target);
				
				if (result is Error) {
					Radiate.error("Could not create a snapshot of the selected item. " + result); 
				}
				else if (result) {
					Radiate.info("Selection was saved as an image into the library.");
				}
			}
			
			protected function userLabel_clickHandler(event:MouseEvent):void
			{
				Radiate.openUsersLoginPage();
			}
			
			protected function userIcon_clickHandler(event:MouseEvent):void
			{
				if (radiate.isUserLoggedIn) {
					Radiate.openUsersProfile();
				}
				else {
					Radiate.info("You must be logged into to view your profile website");
				}
			}
			
			protected function visitSiteLabel_clickHandler(event:MouseEvent):void
			{
				Radiate.openUsersWebsite();
			}
			
			private var isWin:Boolean; 
			private var isMac:Boolean; 
			
			private function init():void { 
				isWin = Platform.isWindows; 
				isMac = Platform.isMac; 
			} 
			
			private function keyEquivalentModifiers(item:Object):Array { 
				var result:Array = new Array();
				var menu:Object;
				
				//var keyEquivField:String = menu.keyEquivalentField;
				var keyEquivField:String = menu.keyEquivalentField;
				var altKeyField:String;
				var controlKeyField:String;
				var shiftKeyField:String;
				
				if (item is XML) { 
					altKeyField = "@altKey";
					controlKeyField = "@controlKey";
					shiftKeyField = "@shiftKey";
				}
				else if (item is Object) { 
					altKeyField = "altKey";
					controlKeyField = "controlKey";
					shiftKeyField = "shiftKey";
				}
				
				if (item[keyEquivField] == null || item[keyEquivField].length == 0) { 
					return result;
				}
				
				if (item[altKeyField] != null && item[altKeyField] == true) 
				{
					if (isWin)
					{
						result.push(Keyboard.ALTERNATE); 
					}
				}
				
				if (item[controlKeyField] != null && item[controlKeyField] == true) 
				{
					if (isWin)
					{
						result.push(Keyboard.CONTROL);
					}
					else if (isMac) 
					{
						result.push(Keyboard.COMMAND);
					}
				}
				
				if (item[shiftKeyField] != null && item[shiftKeyField] == true) 
				{
					result.push(Keyboard.SHIFT);
				}
				
				return result;
			}
			
			protected function saveMenuItem_itemClickHandler(event:MenuEvent):void {
				//Radiate.info("Saved");
				
				if (radiate.isUserLoggedIn==false) {
					Radiate.info("You must be logged in to save");
					return;
				}
				
				if (radiate.selectedDocument) {
					radiate.saveDocument(radiate.selectedDocument);
				}
			}
			
			protected function saveAsImageMenuItem_itemClickHandler(event:MenuEvent):void {
				
				if (radiate.selectedDocument) {
					radiate.saveAsImage(radiate.selectedDocument);
				}
				else {
					Radiate.info("No document is open");
				}
			}
			
			protected function saveSelectionAsImageMenuItem_itemClickHandler(event:MenuEvent):void {
				
				if (radiate.selectedDocument) {
					if (radiate.target) {
						radiate.saveAsImage(radiate.target);
					}
					else {
						Radiate.info("Nothing is selected");
					}
				}
				else {
					Radiate.info("No document is open");
				}
			}
			
			protected function clearProjectHomePage_itemClickHandler(event:MenuEvent):void {
				var project:IProject = projectsList.selectedItem;
				
				if (radiate.isUserLoggedIn==false) {
					Radiate.info("You must be logged in");
					return;
				}
				
				if (project==null) {
					project = examplesList.selectedItem;
				}
				
				Radiate.info("Clearing home page for '" + project.name + "'");
				
				Radiate.callAfter(250, serviceManager.setProjectHomePage, 0);
				//serviceManager.setProjectHomePage(0);
			}
			
			protected function clearHomePageHandler(event:RadiateEvent):void
			{
				if (event.successful) {
					Radiate.info("Home page cleared");
				}
			}
			
			protected function openProjectButton_clickHandler(event:MouseEvent):void {
				var project:IProject = projectsList.selectedItem;
				
				if (project==null) {
					project = examplesList.selectedItem;
				}

				if (project) {
					
					Radiate.info("Opening project '" + project.name + "'");
					
					Radiate.callAfter(250, radiate.openProjectFromMainView, project);
					//openProject(project);
				}
				
			}
			
			/**
			 * Returns true if it's a type of content we can accept to be dragged and dropped
			 * */
			public function acceptableFileFormat(dragSource:DragSource):Boolean {
				if (dragSource==null) return false;
				
				if (dragSource.hasFormat("air:file list") || 
					dragSource.hasFormat("air:url")) {
					return true;
				}
				
				return false;
			}
			
			protected function mainView_dragEnterHandler(event:DragEvent):void {
				
				// if drag initiator is null it means it was 
				// dragged in from outside of the application
				if (event.dragInitiator==null && Radiate.isAcceptableDragAndDropFormat(event.dragSource)) {
					DragManager.acceptDragDrop(IUIComponent(event.currentTarget));
					dropImagesLocation.visible = true;
				}
			}
			
			protected function mainView_dragOverHandler(event:DragEvent):void {
				
				// todo check if html element is visible in browser to ignore accidental drag of elements
				if (event.dragInitiator==null && Radiate.isAcceptableDragAndDropFormat(event.dragSource)) {
					DragManager.acceptDragDrop(IUIComponent(event.currentTarget));
					dropImagesLocation.visible = true;
				}
				
			}
			
			public function mainView_dragDropHandler(event:DragEvent):void {
				var dragSource:DragSource;
				var hasFileListFormat:Boolean;
				var hasFilePromiseListFormat:Boolean;
				var isSelf:Boolean;
				
				dropImagesLocation.visible = false;
				
				
				if (event.dragInitiator) {
					isSelf = this.contains(event.dragInitiator as DisplayObject);
					return;
				}
				
				// TODO: Add option to not resize by holding down the shift key 
				if (currentState==DESIGN_STATE) {
					radiate.dropItem(event);
				}
				else {
					radiate.dropItem(event, true);
				}
			}
			
			protected function mainView_dragExitHandler(event:DragEvent):void
			{
				dropImagesLocation.visible = false;
				
				
			}
			
			protected function openDeleteDocumentPopUp_closeHandler(event:Event):void
			{
				if (radiate.selectedProject) {
					radiate.selectedProject.save();
				}
			}
			
			protected function loginThroughWebsite_itemClickHandler(event:MenuEvent):void
			{
				if (radiate.isUserLoggedIn) {
					Radiate.loginThroughBrowser();
				}
			}
			
			protected function miniinspector1_changeHandler(event:MouseEvent):void
			{
				if (event.relatedObject as DisplayObject) {
					targetEffect = event.relatedObject;
					if (ee) {
						ripple.destroy();
						ripple.target = targetEffect;
					}
				}
			}
			
			protected function documentChangeEventHandler(event:Event):void
			{
				radiate.updateWindowMenu(windowMenu);
			}
			
			protected function importPSDMenuItem_itemClickHandler(event:MenuEvent):void
			{
				if (!radiate.selectedDocument) {
					Radiate.info("Please open a document or project first");
					return;
				}
				
				browseForPSD.play();
			}
			
			protected function browseForFile_selectHandler(event:Event):void {
				
				if (browseForImage) {
					radiate.selectItem(browseForImage);
				}
				
			}
			
			protected function psdLoadedHandler(event:Event):void {
				if (radiate.selectedDocument) {
					Radiate.info("Importing PSD");
					Radiate.callAfter(250, radiate.addPSDToDocument, loadPSDFile.data, radiate.selectedDocument);
				}
			}
			
			protected function mxmlLoadedHandler(event:Event):void {
				if (radiate.selectedDocument) {
					radiate.openMXMLDocument(loadMXMLFile.fileName, loadMXMLFile.dataAsString);
				}
			}
			
			protected function selectSelectionTool_itemClickHandler(event:MenuEvent):void {
				var componentDescription:ComponentDescription;
				componentDescription = ToolManager.getToolByName("Selection");
				
				if (componentDescription) {
					ToolManager.setTool(componentDescription.instance as ITool);
				}
			}
			
			protected function getRevisions_itemClickHandler(event:MenuEvent):void
			{
				//var data:Object = radiate.getSavedData();
				var selectedDocument:IDocument = radiate.selectedDocument;
				
				if (selectedDocument) {
					radiate.openImportMXMLWindow("Import MXML", selectedDocument.originalSource, true);
				}
				else {
					Radiate.info("You need to open a document before you can show revisions");
				}
			}
			
			protected function importMXMLMenuItem_itemClickHandler(event:MenuEvent):void
			{
				radiate.openImportMXMLWindow("Import MXML");
			}
			
			protected function importSnippetMenuItem_itemClickHandler(event:MenuEvent):void
			{
				radiate.openImportMXMLWindow("Import Snippet");
			}
			
			protected function viewInBrowserScreenshot_itemClickHandler(event:MenuEvent):void
			{
				Radiate.openInBrowserScreenshot(radiate.selectedDocument);
			}
			
			protected function viewInSiteScanner_itemClickHandler(event:MenuEvent):void
			{
				Radiate.openInBrowserSiteScanner(radiate.selectedDocument);
			}
			
			protected function menuNewDocument_itemClickHandler(event:MenuEvent):void
			{
				radiate.createNewDocument();
			}
			
			public var isCreatingDocument:Boolean;
			
			/**
			 * Create a new document with default project for quick mockups
			 * */
			protected function newDocumentAndProjectButton_clickHandler(event:MouseEvent):void {
				
				if (!isCreatingDocument) {
					Radiate.info("Creating a new document");
					Radiate.callAfter(250, radiate.createNewDocumentAndSwitchToDesignView);
					radiate.addEventListener(RadiateEvent.DOCUMENT_OPEN, documentOpenedHandler, false, 0, true);
					isCreatingDocument = true;
				}
				
			}
			
			public function goToDesignState(validate:Boolean = true):void {
				ViewManager.goToDesignScreen(validate);
			}
			
			
			protected function checkForUpdateMenuItem_itemClickHandler(event:MenuEvent):void
			{
				radiate.checkForUpdate();
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				
			}
			
			protected function uploadToServer_eventStartHandler(event:Event):void
			{
				if (Platform.isBrowser==true) {
					event.preventDefault();
					Radiate.info("This feature is only available in the desktop version");
				}
			}
			
			protected function dropImagesLocation_clickHandler(event:MouseEvent):void
			{
				dropImagesLocation.visible = false;
				Radiate.info("Drag and drop did not finish apparently.");
			}
			
			protected function closeApplication_eventStartHandler(event:Event):void
			{
				if (Platform.isBrowser) {
					event.preventDefault();
					Radiate.info("The feature is only available in the desktop version");
				}
			}
			
			
			protected function rotateImage_itemClickHandler(event:MenuEvent):void{
				var angle:Number = 0;
				var eventTarget:Object = event.currentTarget;
				var image:Image = radiate.target as Image;
					
				if (eventTarget==rotateImage90) {
					angle = 90;
				}
				else if (eventTarget==rotateImage180) {
					angle = 180;
				}
				else if (eventTarget==rotateImage270) {
					angle = 270;
				}
				
				RadiateUtilities.rotateImage(image, angle);
			}
			
			protected function lockLayer_itemClickHandler(event:MenuEvent):void {
				var selectedDocument:IDocument = radiate.selectedDocument;
				var componentDescription:ComponentDescription;
				var collection:ArrayCollection;
				
				if (selectedDocument) {
					componentDescription = selectedDocument.getItemDescription(radiate.target);
					
					if (radiate.target is Application) return;
					
					if (componentDescription) {
						componentDescription.locked = true;
					}
				}
				
			}
			
			protected function unlockLayer_itemClickHandler(event:MenuEvent):void {
				var selectedDocument:IDocument = radiate.selectedDocument;
				var componentDescription:ComponentDescription;
				var collection:ArrayCollection;
				
				if (selectedDocument) {
					componentDescription = selectedDocument.getItemDescription(radiate.target);
					
					if (componentDescription) {
						componentDescription.locked = false;
					}
				}
				
			}
			
			protected function lockDescendantLayers_itemClickHandler(event:MenuEvent):void {
				var selectedDocument:IDocument = radiate.selectedDocument;
				var componentDescription:ComponentDescription;
				var collection:ArrayCollection;
				
				if (selectedDocument) {
					componentDescription = selectedDocument.getItemDescription(radiate.target);
					
					if (componentDescription) {
						componentDescription.lockChildDescriptors();
					}
				}
				
			}
			
			protected function unlockDescendantLayers_itemClickHandler(event:MenuEvent):void {
				var selectedDocument:IDocument = radiate.selectedDocument;
				var componentDescription:ComponentDescription;
				var collection:ArrayCollection;
				
				if (selectedDocument) {
					componentDescription = selectedDocument.getItemDescription(radiate.target);
					
					if (componentDescription) {
						componentDescription.lockChildDescriptors(false);
					}
				}
				
			}
			
			protected function trimImage_itemClickHandler(event:MenuEvent):void {
				var image:Image;
				image = radiate.target as Image;
				
				RadiateUtilities.trimImage(image);
			}
			
			protected function bringForwardLayer_itemClickHandler(event:MenuEvent):void {
				ArrangeLayers.bringForwards(radiate.target, radiate.selectedDocument);
			}
			
			protected function sendBackwardLayer_itemClickHandler(event:MenuEvent):void {
				ArrangeLayers.sendBackwards(radiate.target, radiate.selectedDocument);
			}
			
			protected function bringToFront_itemClickHandler(event:MenuEvent):void {
				ArrangeLayers.bringToFront(radiate.target, radiate.selectedDocument);
			}
			
			protected function sendToBack_itemClickHandler(event:MenuEvent):void {
				ArrangeLayers.sendToBack(radiate.target, radiate.selectedDocument);
			}
			
			protected function documentOpenedHandler(event:Event):void {
				isCreatingDocument = false;
			}
			
			protected function openGallery_itemClickHandler(event:MenuEvent):void {
				ViewManager.showGalleryPanel();
			}
			
			protected function saveDocumentMenuItem_itemClickHandler(event:MenuEvent):void {
				openExportPopUp.play();				
			}
			
			protected function cut_itemClickHandler(event:MenuEvent):void {
				if (radiate.target) {
					clipboardManager.cutItem(radiate.target, radiate.selectedDocument);
				}
			}
			
			protected function copy_itemClickHandler(event:MenuEvent):void {
				if (radiate.target) {
					clipboardManager.copyItem(radiate.target, radiate.selectedDocument);
				}				
			}
			
			protected function duplicate_itemClickHandler(event:MenuEvent):void {
				if (radiate.target) {
					clipboardManager.duplicateItem(radiate.target, radiate.selectedDocument);
				}				
			}
			
			protected function paste_itemClickHandler(event:MenuEvent):void {
				if (radiate.target) {
					clipboardManager.pasteItem(radiate.target, radiate.selectedDocument);
				}
			}
			
			protected function delete_itemClickHandler(event:MenuEvent):void {
				if (radiate.target) {
					Radiate.removeElement(radiate.target);
				}
			}
			
			public var browseForImage:FileReference;
			
			protected function importImageMenuItem_itemClickHandler(event:MenuEvent):void {
				var fileFilter:FileFilter;
				var filtersString:String;
				var acceptedFileTypes:Array;
				var fileFilterDescription:String;
				var fileFilters:Array;
				
				fileFilters = [];
				fileFilterDescription = "Images";
				acceptedFileTypes = ["png", "jpg", "jpeg", "gif", "psd"];
				
				filtersString = "*." + acceptedFileTypes.join(";*.");
				
				fileFilter = new FileFilter(fileFilterDescription, filtersString);
				fileFilters.push(fileFilter);
				
				try {
					browseForImage = new FileReference();
					browseForImage.browse(fileFilters);
					browseForImage.addEventListener(Event.SELECT, browseForFile_selectHandler, false, 0, true);
				}
				catch (error:Error) {
					
				}
			}
			
			protected function openGalleryButton_clickHandler(event:MouseEvent):void
			{
				ViewManager.showGalleryPanel();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<handlers:EventHandler eventName="itemClick" target="{saveSnippetMenuItem}">
			<fc:OpenPopUp id="openExportSnippetPopUp" 
						  popUpType="{ExportSnippetWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="800"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<!--- show about popup
		<handlers:EventHandler target="{cornerLogo}" eventName="click">
			<popup:ShowPopupAnchor target="{aboutPopUp}" closeOnMouseOut="true" displayObjectExceptions="{[cornerLogo]}"/>
		</handlers:EventHandler>
		
		 hide about popup 
		<handlers:EventHandler target="{popUpGroup}" eventName="mouseDownOutside">
			<popup:HidePopupAnchor target="{aboutPopUp}" />
		</handlers:EventHandler>
		
		show contact popup 
		-->
		<handlers:EventHandler target="{contactLabel}" eventName="click" 
							   traceHandler="false">
			<fc:OpenPopUp id="openContactPopUp" 
						  popUpType="{ContactWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler targets="{[logoutLabel,logoutLabel2]}" eventName="click" >
			<fc:OpenPopUp id="openLogoutPopUp" 
						  popUpType="{LoginWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:LoginWindow.LOGOUT}}"
						  close="logoutPopUp_closeHandler(event)"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler targets="{[newProjectButton,menuNewProject]}" eventNames="{['click','itemClick']}" >
			<fc:OpenPopUp id="openNewProjectPopUp" 
						  popUpType="{NewDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:NewDocumentWindow.PROJECT}}"
						  close="createNewProjectLabel_clickHandler(event);"
						  />
		</handlers:EventHandler>
		
		<handlers:EventHandler target="{removeDocument}" eventName="itemClick" >
			<fc:OpenPopUp id="openDeleteDocumentPopUp" 
						  popUpType="{DeleteDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:DeleteDocumentWindow.DOCUMENT}}"
						  close="openDeleteDocumentPopUp_closeHandler(event)"
						  />
		</handlers:EventHandler>
		
		<handlers:EventHandler target="{logoPopUpGroup}" eventName="mouseDownOutside">
			<popup:HidePopupAnchor target="{logoPopUp}" />
		</handlers:EventHandler>
		
		<!--<handlers:EventHandler target="{moreInfoLabel}" eventName="click">
			<popup:HidePopupAnchor target="{aboutPopUp}" />
			<navigation:OpenURL URL="http://www.radii8.com/blog/?page_id=2" window="_blank" />
		</handlers:EventHandler>-->
		
		<handlers:EventHandler targets="{[deleteProjectIcon,removeProject]}" eventNames="{['click','itemClick']}" >
			<fc:OpenPopUp id="openDeleteProjectPopUp" 
						  popUpType="{DeleteDocumentWindow}" 
						  modalDuration="100" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:DeleteDocumentWindow.PROJECT, documentData:projectsList.selectedItem}}"
						  close="getProjectsByUser();"
						  />
		</handlers:EventHandler>
		
		<fc:OpenPopUp id="openImageToClipboardWindow" 
					  popUpType="{CopyImageToClipboardWindow}" 
					  modalDuration="100" 
					  backgroundAlpha=".5"
					  autoCenter="false"
					  parent="{parentApplication}"/>
		
		<file:BrowseForFile id="browseForPSD" 
							targetAncestor="{this}"
							fileTypes="psd">
			<file:selectionEffect>
				<file:LoadFile id="loadPSDFile" 
							   fileReference="{browseForPSD.fileReference}"
							   complete="psdLoadedHandler(event)"/>
			</file:selectionEffect>
		</file:BrowseForFile>
		
		<file:BrowseForFile id="browseForMXML" 
							targetAncestor="{this}"
							fileTypes="mxml">
			<file:selectionEffect>
				<file:LoadFile id="loadMXMLFile" 
							   fileReference="{browseForMXML.fileReference}"
							   complete="mxmlLoadedHandler(event)"/>
			</file:selectionEffect>
		</file:BrowseForFile>
		
		<handlers:EventHandler eventName="itemClick" target="{revertDocumentMenuItem}">
			<core:CallMethod method="revertDocument"/> 
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{saveDocumentAs}">
			<fc:OpenPopUp id="openExportPopUp" 
						  popUpType="{ExportDocumentWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="800"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{uploadMenuItem}" eventStart="uploadToServer_eventStartHandler(event)">
			<fc:OpenPopUp id="openFileTransferPopUp" 
						  popUpType="{fileTransferWindowClass}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="800"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		
		<handlers:EventHandler eventName="itemClick" target="{printItem}">
			<fc:OpenPopUp id="openPrintPopUp" 
						  popUpType="{PrintWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="click" target="{lostPasswordLabel2}">
			<fc:OpenPopUp id="openLostPasswordPopUp" 
						  popUpType="{LoginWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:LoginWindow.LOST_PASSWORD,openingState:LoginWindow.LOST_PASSWORD}}"
						  close="loginPopUp_closeHandler(LoginWindow.LOST_PASSWORD)"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="click" targets="{[loginLabel,loginLabel2]}">
			<fc:OpenPopUp id="openLoginPopUp" 
						  popUpType="{LoginWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:LoginWindow.LOGIN}}"
						  close="loginPopUp_closeHandler(LoginWindow.LOGIN)"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="click" targets="{[registerLabel,registerLabel2]}">
			<fc:OpenPopUp id="registrationWithSitePopUp" popUpType="{LoginWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="600"
						  parent="{parentApplication}"
						  popUpOptions="{{currentState:LoginWindow.REGISTRATION_WITH_SITE}}"
						  close="loginPopUp_closeHandler(LoginWindow.REGISTRATION_WITH_SITE)"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{creditsMenuItem}">
			<fc:OpenPopUp popUpType="{CreditsWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="720"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{helpMenuItem}">
			<fc:OpenPopUp popUpType="{HelpWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="720"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{settingsMenuItem}">
			<fc:OpenPopUp id="openSettingsWindow" popUpType="{SettingsWindow}" 
						  modalDuration="150" 
						  percentWidth="75"
						  percentHeight="90"
						  width="720"
						  parent="{parentApplication}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="itemClick" target="{quitApplication}" eventStart="closeApplication_eventStartHandler(event)">
			<application:CloseApplication />
		</handlers:EventHandler>
		
		<model:MenuItem id="workOfflineMenuItem" label="Work Offline" type="check" itemClick="workOfflineMenuItem_itemClickHandler(event)"/>
		
		<model:MenuItem id="rootMenu">
			<model:MenuItem label="File">
				<!--<model:MenuItem type="separator" isSpacer="true" spacerHeight="6"/>-->
				<model:MenuItem id="menuNewDocument" label="New Document" itemClick="menuNewDocument_itemClickHandler(event)"/>
				<model:MenuItem id="menuNewProject" label="New Project" />
				<model:MenuItem type="separator"/>
				<model:MenuItem label="Open Document" itemClick="openDocument_itemClickHandler(event)"/>
				<model:MenuItem label="Open Project" itemClick="openProject_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem label="Close Document" itemClick="radiate.closeDocument(radiate.selectedDocument)"/>
				<!--<model:MenuItem label="Close Project" itemClick="{radiate.closeProject(radiate.selectedProject)}"/>-->
				<model:MenuItem type="separator"/>
				<!-- keyEquivalent="s" seemed to be catching the s key everywhere. needs cmd for mac and ctrl for win-->
				<model:MenuItem id="saveDocumentMenuItem" label="Save as..." itemClick="saveDocumentMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="saveMenuItem" label="Save online" itemClick="saveMenuItem_itemClickHandler(event)"
								keyEquivalent="s" commandKey="true"/>
				<model:MenuItem id="saveSnippetMenuItem" label="Save snippet online" />
				<model:MenuItem id="saveAsImageMenuItem" label="Save as image" itemClick="saveAsImageMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="saveSelectionAsImageMenuItem" label="Save Selection as Image" itemClick="saveSelectionAsImageMenuItem_itemClickHandler(event)"/>
				<model:MenuItem label="Save Project" itemClick="{radiate.saveProject(radiate.selectedProject)}"/>
				<model:MenuItem label="Save All Documents" itemClick="{radiate.saveAllDocuments()}"/>
				<model:MenuItem id="saveDocumentAs" label="Export release..." />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="revertDocumentMenuItem" label="Revert..." />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="uploadMenuItem" label="Upload to server..." />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="removeDocument" label="Remove Document" />
				<model:MenuItem id="removeProject" label="Remove Project" itemClick="removeProject_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="printItem" label="Print" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="importSnippetMenuItem" label="Import Snippet..." itemClick="importSnippetMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="importMXMLMenuItem" label="Import MXML..." itemClick="importMXMLMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="importImageMenuItem" label="Import Image..." itemClick="importImageMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="importPSDMenuItem" label="Import PSD..." itemClick="importPSDMenuItem_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="quitApplication" label="Quit" />
			</model:MenuItem>
			<model:MenuItem label="Edit" >
				<model:MenuItem id="undo" label="Undo" itemClick="undo_itemClickHandler(event)" 
								enabled="{HistoryManager.canUndo}"/>
				<model:MenuItem id="redo" label="Redo" itemClick="redo_itemClickHandler(event)"
								enabled="{HistoryManager.canRedo}"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="cut" label="Cut" name="cut" enabled="true" keyEquivalent="x" controlKey="true" itemClick="cut_itemClickHandler(event)"/>
				<model:MenuItem id="copy" label="Copy" name="copy" enabled="true" keyEquivalent="c" controlKey="true" itemClick="copy_itemClickHandler(event)"/>
				<model:MenuItem id="paste" label="Paste" name="paste" enabled="true" keyEquivalent="v" controlKey="true" itemClick="paste_itemClickHandler(event)"/>
				<model:MenuItem id="delete" label="Delete" name="delete" enabled="true" itemClick="delete_itemClickHandler(event)"/>
				<model:MenuItem id="selectAll" label="Select All" name="selectAll" enabled="true" keyEquivalent="a" controlKey="true"/>
				<model:MenuItem id="duplicate" label="Duplicate" name="Duplicate" enabled="true" keyEquivalent="d" controlKey="true" itemClick="duplicate_itemClickHandler(event)"/>
			</model:MenuItem>
			<!--<model:MenuItem label="Tools" >
				<model:MenuItem id="selectSelectionTool" label="Selection" itemClick="selectSelectionTool_itemClickHandler(event)" />
			</model:MenuItem>-->
			<model:MenuItem label="Layers" >
				<model:MenuItem id="arrangeLayers" label="Arrange Layer" >
					<model:MenuItem id="bringForwardLayer" label="Bring Forward" itemClick="bringForwardLayer_itemClickHandler(event)" />
					<model:MenuItem id="bringToFront" label="Bring to Front" itemClick="bringToFront_itemClickHandler(event)" />
					<model:MenuItem id="sendBackwardLayer" label="Send Backward" itemClick="sendBackwardLayer_itemClickHandler(event)" />
					<model:MenuItem id="sendToBack" label="Send to Back" itemClick="sendToBack_itemClickHandler(event)" />
				</model:MenuItem>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="lockLayerGroup" label="Lock Layer" >
					<model:MenuItem id="lockLayer" label="Lock layer" itemClick="lockLayer_itemClickHandler(event)" />
					<model:MenuItem id="unlockLayer" label="Unlock layer" itemClick="unlockLayer_itemClickHandler(event)" />
					<model:MenuItem id="lockDescendantLayers" label="Lock descendant layers" itemClick="lockDescendantLayers_itemClickHandler(event)" />
					<model:MenuItem id="unlockDescendantLayers" label="Unlock descendant layers" itemClick="unlockDescendantLayers_itemClickHandler(event)" />
				</model:MenuItem>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="rotateImage" label="Rotate Image" >
					<model:MenuItem id="rotateImage90" label="Rotate 90" itemClick="rotateImage_itemClickHandler(event)"/>
					<model:MenuItem id="rotateImage180" label="Rotate 180" itemClick="rotateImage_itemClickHandler(event)"/>
					<model:MenuItem id="rotateImage270" label="Rotate 270" itemClick="rotateImage_itemClickHandler(event)"/>
				</model:MenuItem>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="removeExplicitPosition" label="Remove explicit position" itemClick="removeExplicitPosition_itemClickHandler(event)" />
				<model:MenuItem id="sizeSelectionToContent" label="Remove explicit size" itemClick="removeExplicitSize_itemClickHandler(event)" />
				<model:MenuItem id="removeExplicitHeight" label="Remove explicit height" itemClick="removeExplicitHeight_itemClickHandler(event)" />
				<model:MenuItem id="removeExplicitWidth" label="Remove explicit width" itemClick="removeExplicitWidth_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="sizeDocumentToSelection" label="Size document to selection" itemClick="sizeDocumentToSelection_itemClickHandler(event)" />
				<model:MenuItem id="sizeSelectionToDocument" label="Size selection to document" itemClick="sizeSelectionToDocument_itemClickHandler(event)" />
				<model:MenuItem id="sizeDocumentToSelectionOriginalSize" label="Size document to original sized image" itemClick="sizeDocumentToImage_itemClickHandler(event)" />
				<model:MenuItem id="resizeDocumentToFitContent" label="Size document to show all content" itemClick="resizeDocumentToContent_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="copySelectionIntoLibrary" label="Save selection snapshot to library" itemClick="copySelectionIntoLibrary_itemClickHandler(event)" />
				<model:MenuItem id="saveSnapshotToLibrary" label="Save document snapshot to library" itemClick="saveSnapshotToLibrary_itemClickHandler(event)" />
				<model:MenuItem id="copyDocumentToClipboard" label="Copy document snapshot to clipboard" itemClick="copyDocumentImageToClipboard_itemClickHandler(event)" />
				<model:MenuItem id="pasteImageFromClipboard" label="Paste image from clipboard" itemClick="pasteClipboardToDocument_itemClickHandler(event)" />
				<model:MenuItem id="trimImage" label="Trim transparent edges of image" itemClick="trimImage_itemClickHandler(event)" />
				<!--<model:MenuItem id="restoreImageToOriginalSize" label="Restore image to original size" itemClick="restoreImageToOriginalSize_itemClickHandler(event)" />-->
				<!--<model:MenuItem id="cropSelection" label="Crop Selection" itemClick="cropSelection_itemClickHandler(event)" />
				<model:MenuItem id="cropDocument" label="Crop Document" itemClick="cropDocument_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>-->
			</model:MenuItem>
			<model:MenuItem label="Commands" >
				<model:MenuItem id="clearProjectHomePage" label="Clear home page" itemClick="clearProjectHomePage_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="openGallery" label="Open Gallery" itemClick="openGallery_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="refreshView" label="Refresh View" itemClick="refreshView_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="showProjectSource" label="Show Project Source" itemClick="showProjectSource_itemClickHandler(event)" />
				<model:MenuItem id="showDocumentSource" label="Show Document Source" itemClick="showDocumentSource_itemClickHandler(event)"/>
				<model:MenuItem type="separator"/>
				<model:MenuItem id="getRevisions" label="Show Revisions" itemClick="getRevisions_itemClickHandler(event)" />
				<model:MenuItem type="separator"/>
				<model:MenuItem id="viewInBrowserShots" label="View in Browser Shots" itemClick="viewInBrowserScreenshot_itemClickHandler(event)" />
				<model:MenuItem id="viewInSiteScanner" label="View in Site Scanner" itemClick="viewInSiteScanner_itemClickHandler(event)" />
				<!--<model:MenuItem id="loginThroughWebsite" label="Login to your website" itemClick="loginThroughWebsite_itemClickHandler(event)"/>-->
			</model:MenuItem>
			<!--			<model:MenuItem label="Edit" menuShow="editHandler(event)">
			<model:MenuItem id="cut" label="Cut" itemClick="cutHandler(event)"/>
			<model:MenuItem id="copy" label="Copy" itemClick="copyHandler(event)"/>
			<model:MenuItem id="paste" label="Paste" enabled="false" name="paste"/>
			<model:MenuItem type="separator"/>
			<model:MenuItem label="Other menu item"/>
			</model:MenuItem>-->
			<model:MenuItem id="windowMenu" label="Window">
				<!--<model:MenuItem id="d1" label="Document 1" group="docs" toggled="false" type="radio"/>
				<model:MenuItem label="Document 2" group="docs" toggled="true" type="radio"/>
				<model:MenuItem id="d3" label="Document 3" group="docs" name="d3" toggled="false"
				type="radio"/>
				<model:MenuItem label="Document 4" group="docs" toggled="false" type="radio"/>-->
				<model:MenuItem label="No documents" />
			</model:MenuItem>
			<model:MenuItem id="helpMenu" label="Help">
				<model:MenuItem id="helpMenuItem" label="Online Documentation" />
				<model:MenuItem id="creditsMenuItem" label="Notices and Credits"/>
				<model:MenuItem id="checkForUpdateMenuItem" label="Check for update" itemClick="checkForUpdateMenuItem_itemClickHandler(event)"/>
				<model:MenuItem id="settingsMenuItem" label="Settings" />
			</model:MenuItem>
		</model:MenuItem>
		
		<mx:ArrayCollection id="projectsCollection" />
		<mx:ArrayCollection id="newsCollection" />
		<mx:ArrayCollection id="documentsCollection" />
		<mx:ArrayCollection id="examplesCollection" />
		<mx:ArrayCollection id="templatesCollection" />
		
		<s:Parallel id="fadeInLogo">
			<s:Rotate3D angleZFrom="0" 
						angleZTo="90" 
						autoCenterProjection="true" 
						autoCenterTransform="true" 
						duration="250"
						target="{mainLogo}" />
			<s:Fade alphaFrom="0" alphaTo="1" target="{mainLogo}" duration="250" />
		</s:Parallel>
		<!--
		<s:Rotate3D id="rotateTargetEffect" angleZFrom="0" 
					angleZTo="90" 
					autoCenterProjection="true" 
					autoCenterTransform="true" 
					duration="250"
					target="{savingLogo}"/>-->
		
		<s:Parallel id="requestAnimation" >
			<s:Fade alphaFrom="0" alphaTo="1" target="{busyLogo}" duration="500" />
			<s:Sequence id="rotationAnimation" suspendBackgroundProcessing="true" repeatCount="0">
				<s:Rotate3D angleZFrom="0" 
							angleZTo="360" 
							easer="{new Linear(0,0)}" 
							autoCenterProjection="true" 
							autoCenterTransform="true" 
							duration="1000"
							target="{busyLogo}" />
			</s:Sequence>
		</s:Parallel>
		
		<s:Sequence id="fadeOutRequest" effectEnd="requestAnimation.end();">
			<mx:AnimateProperty property="alpha" fromValue="1" toValue="0" target="{busyLogo}" duration="1050" />
		</s:Sequence>
		
		<s:Fade id="fadeOutStatus" target="{statusLabel}" alphaFrom="1" alphaTo="0" 
				effectEnd="fadeOutStatus_effectEndHandler(event)"/>
		
		<core:CallMethod id="checkOnlineEffect" 
						 repeatCount="0" 
						 method="checkOnline" 
						 repeatDelay="60000"/>
		
		<s:Sequence id="notificationMessenger" target="{instantMessengerContainer}" >
			<mx:AnimateProperty duration="250" fromValue="-2" toValue="28" property="top"/>
			<mx:AnimateProperty startDelay="4000" duration="250" toValue="-2" fromValue="28" property="top"/>
		</s:Sequence>
		

		
	</fx:Declarations>
	
	<s:states>
		<s:State name="home"/>
		<s:State name="login"/>
		<s:State name="homeLoggedIn" basedOn="home"/>
		<s:State name="homeLoggedOut" basedOn="home"/>
		<s:State name="design"/>
	</s:states>
	
	
	<s:Image id="backgroundLogoImage2" 
			 y="0" x="0" 
			 fillMode="repeat"
			 width="100%" height="100%" 
			 source="{Radii8LibraryAssets.wall2}"
			 alpha=".35"
			 includeIn="home"/>
	
	<s:Image id="backgroundLogoImage" 
			 y="0" x="-200" 
			 width="80%" height="80%" 
			 source="{Radii8LibraryAssets.logo256}"
			 alpha=".05"
			 includeIn="home"/>
	
	<!-- HOME SCREEN MENU SHADOW -->
	<s:RectangularDropShadow id="welcomeContainerShadow" 
							 minHeight="380" 
							 height="60%" 
							 minWidth="640"
							 width="80%"
							 horizontalCenter="0" 
							 verticalCenter="-20"
							 includeIn="home"
							 blurX="6" blurY="6"
							 distance="0"
							 />
	
	<!-- HOME SCREEN MENU -->
	<s:BorderContainer id="welcomeContainer" 
					   minHeight="380" 
					   height="60%" 
					   minWidth="640"
					   width="80%"
					   horizontalCenter="0" verticalCenter="-20" 
					   includeIn="home">
		<s:Rect left="0" x="81" top="0" y="82" height="120" right="0">
			<s:fill>
				<mx:SolidColor color="#CCCCCC">
				</mx:SolidColor>
			</s:fill>
		</s:Rect>
		
		<!--<s:BorderContainer left="0" x="81" top="0" y="82" height="120" 
						   right="0" borderVisible="false" backgroundColor="#CCCCCC"/>-->
		<s:Image id="mainLogo" x="0" y="0" width="128" height="128" 
				 source="{Radii8LibraryAssets.logo256}"
				 smooth="true"
				 rollOver="{fadeInLogo.play()}" 
				 rollOut="{fadeInLogo.play(null, true)}"
				 alpha="0"/>
		<s:BitmapImage id="logo4" x="32" y="32" 
					   smooth="true"
					   source="{Radii8LibraryAssets.logo64}"/>
		<s:Label x="130" y="44" text="Radiate" fontSize="45" fontWeight="bold">
			<s:filters> 
				<filters:BorderStrokeFilter color="#EEEEEE" weight=".4"/>
				<filters:BorderStrokeFilter color="#DDDDDD" weight="1"/>
				<filters:BorderStrokeFilter color="#585858" weight="2"/>
			</s:filters>
		</s:Label>
		<s:Image id="busyLogo" 
				 source="{Radii8LibraryAssets.logo256}" 
				 width="60" height="60"
				 verticalAlign="middle" 
				 horizontalAlign="center"
				 useHandCursor="true"
				 buttonMode="true"
				 right="40"
				 y="10"
				   includeInLayout="false"
				   visible="false"
				 >
		</s:Image>
		
		<s:HGroup left="20" top="160" bottom="60" width="100%" height="100%" right="20">
			
			
			<s:VGroup width="100%" height="100%">
				<c:LabelButton id="examplesLabel" text="Starter Projects" fontWeight="bold" click="examplesLabel_clickHandler(event)"/>
				<s:Label id="checkingForExampleProjectsLabel" 
						 text="" 
						 fontStyle="italic"
						 color="#989898"
						 visible="false"
						 includeInLayout="false"/>
				<s:List id="examplesList"
						width="100%" 
						borderVisible="false"
						dataProvider="{examplesCollection}"
						labelField="name"
						minHeight="110"
						height="100%"
						doubleClickEnabled="true"
						doubleClick="examplesList_doubleClickHandler(event)"
						change="examplesList_changeHandler(event)"
						itemRenderer="com.flexcapacitor.views.renderers.ProjectRenderer"
						/>
			</s:VGroup>
			
			<s:VGroup width="100%" height="100%">
				<c:LabelButton id="projectsLabel" 
						 text="Projects" 
						 fontWeight="bold"
						 click="projectsLabel_clickHandler(event)"/>
				<s:Label id="checkingForProjectsLabel" 
						 text="Checking for projects..." 
						 fontStyle="italic"
						 color="#989898"
						 visible="false"
						 includeInLayout="false"/>
				<s:List id="projectsList" 
						width="100%"
						minHeight="110"
						height="100%"
						borderVisible="false"
						dataProvider="{projectsCollection}"
						labelField="name"
						doubleClickEnabled="true"
						doubleClick="projectsList_doubleClickHandler(event)"
						change="projectsList_changeHandler(event)"
						itemRenderer="com.flexcapacitor.views.renderers.ProjectRenderer"
						/>
				<s:Label id="projectLastSavedLabel" text="" 
						 visible="false" includeInLayout="false"/>
			</s:VGroup>
			
			<s:VGroup width="100%" includeInLayout="false" visible="false">
				<c:LabelButton text="Templates" fontWeight="bold"/>
				<s:List width="100%" 
						dataProvider="{templatesCollection}"
						/>
			</s:VGroup>
			
			<s:VGroup width="100%" height="100%">
				
				<c:LabelButton text="News and Tutorials" fontWeight="bold" click="news_clickHandler(event)"/>
				<s:Label id="checkingForNewsLabel" 
						 text="Checking for news..." 
						 fontStyle="italic"
						 color="#989898"
						 visible="false"
						 includeInLayout="false"/>
				<s:List id="newsList" 
						width="100%"
						minHeight="110"
						height="100%"
						borderVisible="false"
						dataProvider="{newsCollection}"
						labelField="title"
						doubleClickEnabled="true"
						click="newsList_doubleClickHandler(event)"
						change="newsList_changeHandler(event)"
						/>
				<!--<renderers:ProjectRenderer id="newDocumentButton" label="New Document" width="100%"
				autoDrawBackground="true"/>
				<renderers:ProjectRenderer label="Get My Projects" width="100%"
				click="getProjectsByUser_clickHandler(event)"
				visible="{radiate.isUserLoggedIn}"
				includeInLayout="{radiate.isUserLoggedIn}"
				/>
				<renderers:ProjectRenderer label="Get All Projects" width="100%"
				useHandCursor="true" buttonMode="true"
				click="getPublicProjects_clickHandler(event)"
				
				visible="false"
				includeInLayout="false"/>-->
			</s:VGroup>
			
		</s:HGroup>
		
		
		<s:Label id="statusLabel" bottom="50" left="20" textAlign="left" fontStyle="italic"/>
		
		<s:HGroup bottom="20" left="20" right="20"
				  width="100%"
				  verticalAlign="middle">
			<c:LabelButton id="logoutLabel2" 
					 text="Logout" 
					 verticalAlign="middle" 
					 textAlign="center"
					 styleName="loginLabel"
					 visible="{radiate.isUserLoggedIn}"
					 includeInLayout="{radiate.isUserLoggedIn}"
					 />
			
			<c:LabelButton id="loginLabel2" 
					 text="Login" 
					 verticalAlign="middle" 
					 textAlign="center"
					 styleName="loginLabel"
					 visible="{!radiate.isUserLoggedIn}"
					 includeInLayout="{!radiate.isUserLoggedIn}"
					 />
			
			<c:VerticalLine visible="{!radiate.isUserLoggedIn}"
							includeInLayout="{!radiate.isUserLoggedIn}"/>
			
			<c:LabelButton id="registerLabel2" 
						   text="Register" 
						   verticalAlign="middle" 
						   textAlign="center"
						   styleName="loginLabel"
						   visible="{!radiate.isUserLoggedIn}"
						   includeInLayout="{!radiate.isUserLoggedIn}"
						   />
			
			<c:VerticalLine visible="{!radiate.isUserLoggedIn}"
							includeInLayout="{!radiate.isUserLoggedIn}"/>
			
			<c:LabelButton id="lostPasswordLabel2" 
						   text="Lost Password" 
						   verticalAlign="middle" 
						   textAlign="center"
						   styleName="loginLabel"
						   visible="{!radiate.isUserLoggedIn}"
						   includeInLayout="{!radiate.isUserLoggedIn}"
						   />
			
			<s:Spacer width="100%" />
			
			<s:HGroup id="_visibleButtonGroup" 
					  mouseEnabledWhereTransparent="true"
					  right="0" 
					  height="100%" 
					  >
				
				
				<renderers:ItemRendererButton id="openProjectButton" iconSource="{Radii8LibraryAssets.openFolder}"
											  label="Open Project"
											  click="openProjectButton_clickHandler(event)"
											  enabled="{projectsList.selectedItem!=null || examplesList.selectedItem!=null}"
											  />
				<renderers:ItemRendererButton id="openPreviousProject" 
											  iconSource="{Radii8LibraryAssets.openFolder}"
											  label="Open Previous Project"
											  click="openLastProject()"
											  enabled="false"
											  visible="false"
											  includeInLayout="false"
											  />
				
				<renderers:ItemRendererButton id="deleteProjectIcon" 
											  iconSource="{Radii8LibraryAssets.trashCan}"
											  label="Remove"
											  enabled="{projectsList.selectedItem!=null}"
											  />
				
				<renderers:ItemRendererButton id="newProjectButton" 
										   iconSource="{Radii8LibraryAssets.project}"
										   bottom="20" 
										   horizontalCenter="0" 
										   label="New Project" 
										   autoDrawBackground="true"/>
				
				<renderers:ItemRendererButton id="newDocumentButton" 
										   iconSource="{Radii8LibraryAssets.document}"
										   bottom="20" 
										   horizontalCenter="0" 
										   label="New Document" 
										   autoDrawBackground="true"
										   click="newDocumentAndProjectButton_clickHandler(event)"/>
				
				
				<renderers:ItemRendererButton id="openGalleryButton" 
											  iconSource="{Radii8LibraryAssets.document}"
											  bottom="20" 
											  horizontalCenter="0" 
											  label="Open Gallery" 
											  autoDrawBackground="true"
											  click="openGalleryButton_clickHandler(event)"/>
			</s:HGroup>
		</s:HGroup>
		
	</s:BorderContainer>
	
	<s:Label id="productionLabel" 
			 text="Radiate is in development. Email features and bug reports." 
			 typographicCase="lowercaseToSmallCaps" 
			 bottom="60" horizontalCenter="0" 
			 textAlign="left"
			 color="#888888"
			 includeIn="home"
			 fontSize="10"
			 />
	
	<views:Remote id="remote" itemCreationPolicy="immediate" width="100%" height="100%" top="38" includeIn="design" />
	
	<s:PopUpAnchor id="logoPopUp" width="100" height="100" top="34" left="10" >
		<s:Group id="logoPopUpGroup" 
				 mouseEnabledWhereTransparent="true" 
				 width="100" height="100" 
				 >
			<s:filters>
				<s:DropShadowFilter distance="3" strength=".75"/>
			</s:filters>
			
			
			<s:Rect width="100%" height="100%" radiusX="8" radiusY="8">
				<s:fill>
					<s:SolidColor color="#ffffff" alpha=".9" />
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#000000" pixelHinting="true" weight="0" />
				</s:stroke>
			</s:Rect>
			
			<s:BitmapImage id="logo2" 
						   source="assets/images/logo2.png" 
						   width="68" height="69"
						   verticalCenter="0"
						   horizontalCenter="0"
						   >
			</s:BitmapImage>
		</s:Group>
	</s:PopUpAnchor>
	
	
	
	<!-- MESSAGES BAR --> 
	<c:BorderContainer id="instantMessengerContainer" 
					   width="100%" 
					   height="30" 
					   top="-2" 
					   borderColor="#0000ff"
					   borderAlpha="0" 
					   borderWeight="0"
					   borderVisible="false"
					   backgroundAlpha=".8"
					   click="instantMessengerContainer_clickHandler(event)">
		<s:Label id="instantMessageLabel" width="100%" height="100%"
				 verticalAlign="middle" textAlign="center"/>
	</c:BorderContainer>
	
	<!-- TOP MENU BAR --> 
	<s:BorderContainer backgroundColor="#3d3d3d"
					   borderVisible="false"
					   width="100%" height="28" 
					   top="0"
					   color="#DFDFDF"
					   >
		
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" 
								paddingLeft="8" 
								paddingRight="8"
								gap="8"/>
		</s:layout>
		
		<s:Group >
			<s:Image id="cornerLogo" 
					 smooth="true"
					 source="{Radii8LibraryAssets.logo}" 
					 width="20" height="20"
					 verticalAlign="middle" 
					 horizontalAlign="center"
					 includeInLayout="true"
					 useHandCursor="true"
					 buttonMode="true"
					 click="cornerLogo_clickHandler(event)"
					 >
			</s:Image>
		</s:Group>
		
		<s:Spacer width="-6"/>
		
		<c:LabelButton id="homeLabel" text="RADIATE" text.design="HOME" 
				 fontSize="12" 
				 fontWeight="bold"
				 color="#ffffff"
				 paddingTop="2"
				 top="10"
				 left="10"
				 click="logo_clickHandler(event)">
			<c:filters> 
				<filters:BorderStrokeFilter color="#585858" weight=".5"/>
				<filters:BorderStrokeFilter color="#EEEEEE" weight=".5"/>
			</c:filters>
		</c:LabelButton>
		<s:Label text="beta" text.design=""
				 fontSize="7" 
				 fontWeight="bold"
				 color="#ffffff"
				 paddingBottom="6"
				 top="10"
				 left="10"/>
		
		<c:VerticalLine id="mainMenuBarLine" 
						itemCreationPolicy="immediate"
						includeIn="design"/>
		
		<mx:MenuBar id="mainMenuBar" 
					dataDescriptor="{new MenuItemDataDescriptor()}"
					dataProvider="{rootMenu}"
					labelField="label"
					height="100%"
					useHandCursor="true"
					buttonMode="true"
					showRoot="false"
					includeIn="design"
					
					itemCreationPolicy="immediate"
					menuShow="menuItemEventHandler(event)" 
					menuHide="menuItemEventHandler(event)"
					itemClick="menuItemEventHandler(event)" 
					itemRollOut="menuItemEventHandler(event)"
					itemRollOver="menuItemEventHandler(event)" 
					change="menuItemEventHandler(event)"
					>
		</mx:MenuBar>
		
		<s:Spacer width="100%"/>
		
		<c:LabelButton id="loginLabel" 
				 text="Login" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{!radiate.isUserLoggedIn}"
				 includeInLayout="{!radiate.isUserLoggedIn}"
				 />
		
		<s:Label text="|" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{!radiate.isUserLoggedIn}"
				 includeInLayout="{!radiate.isUserLoggedIn}"
				 />
		
		
		<c:LabelButton id="registerLabel" 
				 text="Register" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{!radiate.isUserLoggedIn}"
				 includeInLayout="{!radiate.isUserLoggedIn}"
				 />
		
		<c:VerticalLine visible="{!radiate.isUserLoggedIn}"
						includeInLayout="{!radiate.isUserLoggedIn}"
						/>
		
		<c:LabelButton id="userLabel" 
				 text="Hello, {radiate.userDisplayName}" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 toolTip="Open website dashboard"
				 visible="{radiate.isUserLoggedIn}"
				 includeInLayout="{radiate.isUserLoggedIn}"
				 click="userLabel_clickHandler(event)"
				 />
		
		<s:Image id="userIcon" 
				 width="22" height="22" 
				 top="3"
				 useHandCursor="true"
				 buttonMode="true"
				 source="{radiate.defaultUserAvatarPath}"
				 showErrorSkin="false"
				 smooth="true"
				 clearOnLoad="false"
				 toolTip="Open website profile"
				 securityError="userIcon_securityErrorHandler(event)"
				 ioError="userIcon_ioErrorHandler(event)"
				 click="userIcon_clickHandler(event)"
				 />
		
		<c:VerticalLine />
		
		<c:LabelButton id="visitSiteLabel" 
				 text="Visit Site" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{radiate.isUserLoggedIn}"
				 includeInLayout="{radiate.isUserLoggedIn}"
				 click="visitSiteLabel_clickHandler(event)"
				 />
		
		
		<c:VerticalLine 
			visible="{radiate.isUserLoggedIn}"
			includeInLayout="{radiate.isUserLoggedIn}"/>
		
		
		<c:LabelButton id="logoutLabel" 
				 text="Logout" 
				 verticalAlign="middle" 
				 textAlign="center"
				 color="#DDDDDD"
				 visible="{radiate.isUserLoggedIn}"
				 includeInLayout="{radiate.isUserLoggedIn}"
				 />
		
		<s:ToggleButton id="isConnectedCheckbox" 
						selected="{radiate.isUserConnected}"
						skinClass="com.flexcapacitor.views.skins.OnlineToggleButton"
						useHandCursor="true"
						buttonMode="true"
						enabled="true"
						toolTip="Indicates if Radii8 service is reachable. Click to refresh."
						click="isConnectedCheckbox_clickHandler(event)"
						/>
		
		
		<!---http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=96 // assets/avatar/gravar-default-96.png -->
	</s:BorderContainer>
	
	
	<c:BorderContainer width="100%" 
					   height="28" 
					   bottom="0" 
					   backgroundColor="#3d3d3d"
					   borderWeight="0"
					   >
					   <!--click="instantMessageLabel.text='test'; moveInstantMessanger.play()"-->

	</c:BorderContainer>
	
	
	
	<s:HGroup verticalAlign="middle"
			  right="10" 
			  bottom="5"
			  left="10"
			  color="#888888"
			  >
		<views:Breadcrumbs width="100%" includeIn="design"/>
		<s:Spacer width="100%"/>
		<mx:ProgressBar id="savingLogo" x="0" y="0" width="100" height="12" 
						indeterminate="true" label=""
				 visible="{radiate.saveDocumentInProgress}"
				 includeInLayout="{radiate.saveDocumentInProgress}"/>
		<s:Label text="Last saved:" 
				 includeInLayout="{radiate.lastSaveDateFormatted!=null}" 
				 visible="{radiate.lastSaveDateFormatted!=null}"/>
		<s:Label id="lastSavedDate" 
				 text="{radiate.lastSaveDateFormatted}" 
				 includeInLayout="{radiate.lastSaveDateFormatted!=null}" 
				 visible="{radiate.lastSaveDateFormatted!=null}"/>
		<s:Spacer width="1"/>
		<c:VerticalLine height="16" 
						includeInLayout="{radiate.lastSaveDateFormatted!=null}" 
						visible="{radiate.lastSaveDateFormatted!=null}"/>
		<!--<s:Label text="Build Date:"  />
		<s:Label id="buildDate" text="{radiate.buildDate}" />
		<s:Label text="Build Time:" /> 
		<s:Label id="buildTime" text="{radiate.buildTime}" />
		<s:Label text="Build Number:" />
		<s:Label id="buildNumber" text="{radiate.buildNumber}" />
		<s:Label text="Version:" />-->
		
		
		<s:Spacer width="1"/>
		<s:Label id="versionNumber" text="{radiate.versionNumber}" />
		<s:Spacer width="1"/>
		<c:VerticalLine height="16" />
		<s:Spacer width="1"/>
		<c:LabelButton id="contactLabel" 
					   bottom="6" 
					   left="10" 
					   text="Contact" 
					   color="#888888" 
					   typographicCase="capsToSmallCaps"
					   />
		<c:VerticalLine height="100%" includeInLayout="{false}" visible="{false}"/>
		
		<s:Label id="usefulLabel" 
				 right="10" 
				 bottom="6"
				 textAlign="right" 
				 text="{radiate.lastSaveDateDifference}"
				 />
		
		<s:Label id="performanceLabel" 
				 textAlign="right" 
				 color="white"
				 />
	</s:HGroup>
	
	<s:BorderContainer id="dropImagesLocation" 
					   width="100%" height="100%" 
					   backgroundColor="#757575" 
					   backgroundAlpha=".75" 
					   visible="false" 
					   click="dropImagesLocation_clickHandler(event)">
		<s:VGroup verticalCenter="0" horizontalCenter="0" horizontalAlign="center"
				  fontWeight="bold"
				  color="#ffffff">
			<s:Label text="Drop files here" 
					 fontSize="28"/>
			<s:Label text="Hold SHIFT to preserve content original size" />
			<s:Label text="Hold CMD or CTRL to size document to content" />
			
		</s:VGroup>
	</s:BorderContainer>
</s:Group>
