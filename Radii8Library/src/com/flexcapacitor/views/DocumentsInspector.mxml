<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:views="com.flexcapacitor.views.*"
		 xmlns:c="com.flexcapacitor.controls.*"
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:popup="com.flexcapacitor.effects.popup.*" 
		 
		 width="100%" 
		 height="100%"
		 creationComplete="creationCompleteHandler(event)" 
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.model.IDocument;
			import com.flexcapacitor.model.IProject;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var rootDisplayObject:DisplayObject;
			private var displayList:Array = [];
			
			[Bindable]
			private var radiate:Radiate;
			private var designDocument:IEventDispatcher;
			
			public var project:IProject;
			
			
			/**
			 * Listen for any changes to the display list
			 * */
			protected function creationCompleteHandler(event:FlexEvent):void {
				radiate = Radiate.instance;
				
				radiate.addEventListener(RadiateEvent.PROJECT_CHANGE, projectChangeHandler);
				radiate.addEventListener(RadiateEvent.DOCUMENT_CHANGE, documentChangeHandler);
				radiate.addEventListener(RadiateEvent.DOCUMENT_OPENING, documentOpeningHandler);
				
				if (radiate.project) {
					updateDocuments(radiate.project);
				}
				
				if (radiate.document) {
					updateDocument(radiate.document);
				}
				
			}
			
			/**
			 * Label of the list
			 * */
			public function labelFunction(data:Object):String {
				return data && data.instance ? data.instance.name : data.name;
			}
			
			protected function projectChangeHandler(event:RadiateEvent):void {
				updateDocuments(radiate.project);
			}
			
			protected function documentChangeHandler(event:RadiateEvent):void {
				var document:IDocument = event.selectedItem as IDocument;
				if (document && (radiate.project!=document.project || documents.length==0)) {
					updateDocuments(document.project);
				}
				updateDocument(document);
			}
			
			/**
			 * Update document
			 * */
			private function updateDocument(document:IDocument):void {
				if (list.selectedItem != document) {
					list.selectedItem = document;
				}
			}
			
			/**
			 * Update documents
			 * */
			private function updateDocuments(project:IProject):void {
				documents = project.documents;
			}
			
			protected function newDocumentIcon_clickHandler(event:MouseEvent):void {
				radiate.addDocument();
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void {
				var document:IDocument = list.selectedItem ? IDocument(list.selectedItem) : null;
				
				if (document) {
					radiate.openDocument(document);
				}
			}
			
			protected function documentOpeningHandler(event:RadiateEvent):void {
				//event.preventDefault();
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="documents" />
		
		<!--- show new document popup -->
		<!--<handlers:EventHandler target="{newDocumentIcon}" eventName="click">
			<popup:OpenPopUp popUpType="{namePopUp}" modalDuration="100" keepReference="true">
				
			</popup:OpenPopUp>
		</handlers:EventHandler>-->

		<!--- hide new document popup -->
		<handlers:EventHandler target="{this}" eventName="mouseDownOutside">
			<!--<popup:ClosePopUp target="{newDocumentPopUp}" />-->
		</handlers:EventHandler>
		
		<fx:Component className="namePopUp">
			
			<s:Group mouseEnabledWhereTransparent="true" 
					 width="100%" height="100%" 
					 >
<!--					 creationComplete="nameInput.setFocus()"-->
				
				<fx:Script>
					<![CDATA[
						import mx.events.FlexEvent;
						protected function nameInput_enterHandler(event:FlexEvent):void {
							
						}
					]]>
				</fx:Script>
				
				
				<fx:Declarations>
					<handlers:EventHandler target="{this}" eventName="mouseDownOutside">
						<!--<popup:ClosePopUp target="{newDocumentPopUp}" />-->
					</handlers:EventHandler>
				</fx:Declarations>
				
				
				<s:Rect width="100%" height="100%" radiusX="0" radiusY="0">
					<s:fill>
						<s:SolidColor color="#ffffff" alpha=".9" />
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="#000000" pixelHinting="true" weight="0" />
					</s:stroke>
					<s:filters>
						<s:DropShadowFilter distance="3" strength=".75"/>
					</s:filters>
				</s:Rect>
				
				<s:Group width="100%" height="100%">
					<s:layout>
						<s:HorizontalLayout paddingLeft="5" paddingRight="5"
											paddingTop="5" paddingBottom="5"/>
					</s:layout>
						
					
					<s:Label text="Name:"/>
					
					<s:TextInput id="nameInput" width="100%" enter="nameInput_enterHandler(event)"/>
				</s:Group>
			</s:Group>
		</fx:Component>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="8" paddingRight="8" paddingBottom="8"/>
	</s:layout>
	
	<s:List id="list" 
			focusAlpha="0"
			minHeight="20"
			width="100%" 
			height="100%"
			labelFunction="labelFunction"
			borderAlpha=".2"
			dataProvider="{documents}"
			change="list_changeHandler(event)"
			doubleClickEnabled="true"
			itemRenderer="com.flexcapacitor.views.renderers.EditableDocumentRenderer"
			>
	</s:List>
	
	
	<s:HGroup width="100%"
			 height="24"
			 minHeight="24"
			 verticalAlign="middle"
			 >
		<s:Spacer width="100%"/>
		<c:ImageButton id="newDocumentIcon" 
					   source="{Radii8LibraryAssets.newFile}" 
					   toolTip="New Document"
					   click="newDocumentIcon_clickHandler(event)"
					   />
	</s:HGroup>
	

</s:Group>
