<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 
		 width="100%" 
		 xmlns:controls="com.flexcapacitor.controls.*" 
		 creationComplete="group2_creationCompleteHandler(event)"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.utils.ClassUtils;
			
			import mx.events.FlexEvent;
			
			[Bindable]
			public var showIcon:Boolean = true;
			
			[Bindable]
			public var showCopyIcon:Boolean;
			
			[Bindable]
			public var showDescriptionLabel:Boolean = true;
			
			public var describedType:XML;
			
			[Bindable]
			public var selectedItemClass:String;
			
			[Bindable]
			public var selectedItemQualifiedClass:String;
			
			[Bindable]
			public var selectedItemDescription:String;
			
			[Bindable]
			public var selectedItemPackage:String;
			
			[Bindable]
			public var selectedItemName:String;
			
			[Bindable]
			public var selectedItemID:String;
			
			[Bindable]
			public var selectedItemSuperClass:String;
			
			[Bindable]
			public var selectedItemSuperClassPackage:String;
			
			[Bindable]
			public var selectedItemDocument:String;
			
			[Bindable]
			public var selectedItemParentDocument:String;
			
			/**
			 * A list of attributes that can be displayed and their order. 
			 * Items are "normal", "id", "name", "class", "superClass", "document", "package", "parentDocument"
			 * */
			[Bindable]
			public var includedItems:Array = ["normal","id","name","class","superClass","document","package","parentDocument"];
			
			private var _target:Object;
			
			public function get target():Object {
				if (_target==null) return "";
				return _target;
			}
			
			/**
			 * This is set automatically when a new target is selected
			 * This can be any type. You must disable this component if the 
			 * type is not what you can process.
			 * */
			[Bindable]
			public function set target(value:Object):void {
				
				// the target 
				if (value==null) {
					_target = null;
					selectedItemDescription = "No Selection";
					return;
				}
				
				_target = value;
				
				
				// description of target  
				selectedItemQualifiedClass 			= ClassUtils.getQualifiedClassName(target);
				selectedItemClass 					= ClassUtils.getClassName(target);
				selectedItemName 					= ClassUtils.getName(target);
				selectedItemID 						= ClassUtils.getIdentifier(target) || "";
				selectedItemSuperClass 				= ClassUtils.getSuperClassName(target);
				selectedItemSuperClassPackage 		= ClassUtils.getSuperClassPackage(target);
				selectedItemPackage 				= ClassUtils.getPackageName(target);
				selectedItemParentDocument			= ClassUtils.getParentDocumentName(target) || "";
				selectedItemDocument 				= ClassUtils.getDocumentName(target) || "";
				
				// example, if ID exists, "myButtonID:Button in MyComponent"
				// if ID isn't set, "Button0 in MyComponent"
				selectedItemDescription = target ? (selectedItemID ? selectedItemClass + "." + selectedItemID : selectedItemClass) + " in " + selectedItemDocument : "";
				
				if (selectedItemDescription.indexOf("null")!=-1) {
					selectedItemDescription = selectedItemClass ? selectedItemClass : "";
				}
			}
			
			
			public var radiate:Radiate = Radiate.instance;
			
			protected function group2_creationCompleteHandler(event:FlexEvent):void {
				//radiate.addEventListener(RadiateEvent.TARGET_CHANGE, targetChangeHandler);
			}
			
			protected function targetChangeHandler(event:RadiateEvent):void {
				target = event.selectedItem;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="class"/>
		<s:State name="qualifiedClass"/>
		<s:State name="id"/>
		<s:State name="name"/>
		<s:State name="superClass"/>
		<s:State name="document"/>
		<s:State name="package"/>
		<s:State name="parentDocument"/>
	</s:states>
	
	<s:Form >
		<s:layout>
			<s:FormLayout paddingBottom="0" paddingTop="0" gap="-4"/>
		</s:layout>
		<s:FormItem label="Class:"><s:Label >{selectedItemClass}</s:Label></s:FormItem>
		<!--<s:FormItem label="Identity:"><s:Label >{selectedItemID}</s:Label></s:FormItem>
		<s:FormItem label="Name:"><s:Label >{selectedItemName}</s:Label></s:FormItem>-->
		<s:FormItem label="Super Class:"><s:Label >{selectedItemSuperClass}</s:Label></s:FormItem>
		<s:FormItem label="Document:"><s:Label >{selectedItemDocument}</s:Label></s:FormItem>
		<s:FormItem label="Package:"><s:Label >{selectedItemPackage}</s:Label></s:FormItem>
		<s:FormItem label="Parent Document:"><s:Label >{selectedItemParentDocument}</s:Label></s:FormItem>
	</s:Form>
	<!--
		
		<s:RichText id="descriptionTextValue" 
					width="100%" 
					paddingTop="4"
					color="#2F3030" 
					fontWeight="normal"
					>
			<s:textFlow>
				<s:TextFlow fontFamily="Arial" fontSize="10" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" 
						  whiteSpaceCollapse="preserve" 
						  xmlns="http://ns.adobe.com/textLayout/2008">
					<s:p tabStops="s155" ><s:span>Class:<s:tab/>{selectedItemClass}</s:span></s:p>
					<s:p tabStops="s155" ><s:span>Identity:<s:tab/>{selectedItemID}</s:span></s:p>
					<s:p tabStops="s155" ><s:span>Name:<s:tab/>{selectedItemName}</s:span></s:p>
					<s:p tabStops="s155" ><s:span>Super Class:<s:tab/>{selectedItemSuperClass}</s:span></s:p>
					<s:p tabStops="s155" ><s:span>Document:<s:tab/>{selectedItemDocument}</s:span></s:p>
					<s:p tabStops="s155" ><s:span>Package:<s:tab/>{selectedItemPackage}</s:span></s:p>
					<s:p tabStops="s155" ><s:span>Parent Document:<s:tab/>{selectedItemParentDocument}</s:span></s:p>
				</s:TextFlow>
			</s:textFlow>
		</s:RichText>-->
		<!--<mx:UIComponent width="100%"/>
		<s:Image source="{Radii8LibraryAssets.copy}" height="16" width="16"
				 useHandCursor="true" mouseChildren="false" buttonMode="true"
				 toolTip="Copy the text to the clipboard"/>-->
		
	
</s:Group>
