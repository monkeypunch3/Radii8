<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				
				mouseChildren="false"
				mouseEnabled="false"
				buttonMode="false"
				mouseEnabledWhereTransparent="false"
				autoDrawBackground="false"
				width="20" height="20"
				implements="com.flexcapacitor.utils.supportClasses.ISelectionGroup"
				>
	
	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.model.IDocument;
			
			import mx.core.mx_internal;
			import mx.events.DragEvent;
			import mx.utils.NameUtil;
			
			use namespace mx_internal;
			
			
			
			override public function set data(value:Object):void {
				super.data = value;
				
				
				// check if target is component and is not skin
				// should not be a skin
				var componentName:String = NameUtil.getUnqualifiedClassName(data);
				if (componentName.toLowerCase()=="application") {
					componentName = "Document";
				}
				
				labelDisplay.text = componentName;
				
			}
			
			// PROBLEM WITH THIS IS THE PARENT GROUP HAS MOUSE CHILDREN AND MOUSE ENABLED
			// SET TO FALSE. SO WE ARE NOT GETTING MOUSE EVENTS
			protected function itemrenderer1_mouseMoveHandler(event:MouseEvent):void
			{
				trace("selection group is getting mouse events");
				dispatchEvent(event.clone());
			}
			
			protected function itemrenderer1_dragOverHandler(event:DragEvent):void
			{
				trace("selection group is getting drag events");
				dispatchEvent(event.clone());
			}
			
			private var _showResizeHandles:Boolean;

			public function get showResizeHandles():Boolean
			{
				return _showResizeHandles;
			}

			public function set showResizeHandles(value:Boolean):void
			{
				_showResizeHandles = value;
				invalidateDisplayList();
			}

			
			private var _showSelectionFill:Boolean = true;

			public function get showSelectionFill():Boolean {
				return _showSelectionFill;
			}

			public function set showSelectionFill(value:Boolean):void {
				_showSelectionFill = value;
				invalidateDisplayList();
			}

			
			private var _showSelectionFillOnDocument:Boolean = true;

			public function get showSelectionFillOnDocument():Boolean {
				return _showSelectionFillOnDocument;
			}

			public function set showSelectionFillOnDocument(value:Boolean):void {
				_showSelectionFillOnDocument = value;
				invalidateDisplayList();
			}

			
			private var _showSelectionLabel:Boolean = true;

			public function get showSelectionLabel():Boolean {
				return _showSelectionLabel;
			}

			public function set showSelectionLabel(value:Boolean):void {
				_showSelectionLabel = value;
				invalidateDisplayList();
			}

			
			private var _showSelectionLabelOnDocument:Boolean = true;

			public function get showSelectionLabelOnDocument():Boolean {
				return _showSelectionLabelOnDocument;
			}

			public function set showSelectionLabelOnDocument(value:Boolean):void {
				_showSelectionLabelOnDocument = value;
				invalidateDisplayList();
			}

		
			private var _selectionBorderColor:uint = 0x2da6e9;
	
			public function get selectionBorderColor():uint {
				return _selectionBorderColor;
			}
	
			public function set selectionBorderColor(value:uint):void {
				if (_selectionBorderColor==value) return;
				
				_selectionBorderColor = value;
				
				invalidateDisplayList();
			}
			
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				var radiate:Radiate = Radiate.getInstance();
				var documentDescription:IDocument = radiate.selectedDocument;
				//graphics.clear();
				/*
				was showing previous selection like the graphics weren't cleared
				selectionFill.width = unscaledWidth;
				selectionFill.height = unscaledHeight;
				selectionStroke.width = unscaledWidth;
				selectionStroke.height = unscaledHeight;*/
				var solidColorStroke:SolidColorStroke = SolidColorStroke(selectionStroke.stroke);
				if (selectionStroke && 
					solidColorStroke.color != selectionBorderColor) {
					solidColorStroke.color = selectionBorderColor;
					labelDisplay.setStyle("backgroundColor", selectionBorderColor);
				}
				
				// hide or show background fill
				if (showSelectionFill) {
					
					if (documentDescription && documentDescription.instance == data && !showSelectionFillOnDocument) {
						selectionFill.visible = false;
					}
					else {
						selectionFill.visible = true;
					}
				}
				else {
					selectionFill.visible = false;
				}
				
				// hide or show label
				if (showSelectionLabel) {
				
					if (documentDescription && documentDescription.instance == data && !showSelectionLabelOnDocument) {
						labelDisplay.visible = false;
					}
					else {
						labelDisplay.visible = true;
					}
				}
				else {
					labelDisplay.visible = false;
				}
				
				if (showResizeHandles) {
					//topRight.visible = true;
				}
				else {
					//topRight.visible = false;
				}
				
			}
			
			
		]]>
	</fx:Script>
	
	
	<s:Rect id="selectionFill" width="{width}" height="{height}">
		<s:fill>
			<s:SolidColor color="0x2da6e9" alpha=".08" />
		</s:fill>
	</s:Rect>
	
	<s:Rect id="selectionStroke" width="{width}" height="{height}">
		<s:stroke>
			<s:SolidColorStroke color="0x2da6e9" weight="0" alpha="1"/>
		</s:stroke>
	</s:Rect>
	
	<!-- BOTTOM RIGHT DRAG BOX -->
	<!--<s:Rect id="dragRectangle" width="16" height="16" right="-8" bottom="-8" >
	<s:stroke>
	<s:SolidColorStroke color="0x2da6e9" weight="0" alpha="1"/>
	</s:stroke>
	</s:Rect>-->
	<!--
	<s:BorderContainer id="topRight" 
					   visible="false"
					   width="8" height="8" 
								right="-4" top="-4"
								borderColor="#0000FF" 
								borderWeight="1" 
								backgroundColor="#0000FF"
								backgroundAlpha="1"
								rollOver="trace('rollover')"
								rollOut="trace('roll out')"
								click="trace('clicked')">
	
	</s:BorderContainer>-->
	
	<s:Label id="labelDisplay" 
			 top="-12"
			 fontSize="8"
			 typographicCase="uppercase"
			 text="Group"
			 textAlign="center"
			 verticalAlign="middle"
			 height="12" 
			 paddingTop="1"
			 paddingLeft="4" 
			 paddingRight="5"
			 fontWeight="bold"
			 color="0xffffff" 
			 backgroundColor="0x2da6e9"
			 backgroundAlpha=".9" 
			 mouseChildren="false"
			 mouseEnabled="false"
			 />
	<!--<s:Button bottom="-5" label="clickable?" click="trace('clicked')"/>-->
</s:ItemRenderer>
